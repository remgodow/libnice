
 (0.1.16-123-g49d25a8-dirty)

  * gitlab-ci: Disable trigger for now
  * gitlab-ci: Make the documentation acceptable for the website
  * conncheck: Connection check reply must have a remote candidate

    Ensure that a conncheck reply is coming from an address and port of a
    known remote candidate and that the type of incoming socket matches that
    candidate's transport.

    Attemps to fix a Coverity issue in which no matching remote_candidate
    gets found for a connectivity reply in conn_check_handle_inbound_stun()
    (apparently due to transport mismatch), yet
    priv_map_reply_to_conn_check_request() still successfully matches it
    with a previous request.
  * conncheck: Typo fix
  * conncheck: display priorities in debug by spliting their values

    We display 32-bit candidate priorities in hexadecimal to identify each
    8-bit-aligned field more easily: type preference, local preference, and
    component id. We display 64-bit pair priority by splitting their local
    and remote part. See RFC-8445, section 5.1.2.1.  "Recommended Formula",
    and section 6.1.2.3. "Computing Pair Priority and Ordering Pairs".
  * candidate: strip link-local ipv6 scope in local preference

    This patch makes IPv6 link-local addresses obtain a unique ice
    local preference when computing their priority, by stripping the
    "%<interfacename>" added to them by getnameinfo(). Previously, all
    these addresses obtained the same preference value, since the whole
    local ips list was checked without finding a match.
  * gitlab: Also push to coverity on manual builds
  * stun usage turn: Check return value as is done elsewhere
  * udp-bsd: Check all return value

    Errors found by coverity
  * stun test: Check return value as is done elsewhere
  * conncheck: Pass arguments in the right order

    The order of the passed arguments doesn't match the prototype of the
    function. We exchange the local and remote candidates.
  * udp-udp: Make coverity happy by giving it the whole union
  * gitlab-ci: Build coverity using meson
  * agent: refactor conncheck update_selected_pair
  * agent: update the selected pair priority when foundation changes

    The component selected pair priority may have its priority modified
    if the foundation of its remote candidate changes. This update needs
    to be recorded, even if its not signalled, since this value is used
    in the conncheck in priv_update_selected_pair().
  * agent: make code indentation a bit more homogeneous
  * agent: verify the best nominated pair after priorities recalculation

    When we get a set_remote_candidate late after the start of the
    conncheck, some remote candidates type may change from peer-reflexive
    to server-reflexive. This required a recalculation of the foundations
    and of the priorities of the related pairs.

    This recalculation may change the pairs ordering in the conncheck list:
    a srflx:prflx pair becoming a srflx:srflx pair will have a lower
    priority (RFC 8445, section 5.1.2.1 "Recommended Formula", "the type
    preference for peer-reflexive candidates MUST be higher than that of
    server-reflexive candidates.")

    This recalculation is required to maintain the same pairs ordering in
    both agent.

    But in some cases, in aggressive nomination mode, this may also change
    the selected pair, if this recalculation changed the highest priority
    pair with the nominated flag.
  * conncheck: send keepalive for candidates until connected state

    We can start sending keepalive stun request for the selected pair, and
    stop sending keepalive for candidates as soon as the conncheck reaches
    state connected and not ready.
  * conncheck: fix peer-reflexive priority in discovered pair

    The peer-reflexive priority used in the STUN request is copied from the
    parent succeeded pair to the discovered pair. This value is not required
    for discovered pair, that won't emit stun requests themselves, but may
    be used when such pair becomes the selected pair, and when keepalive
    stun are emitted, using the sockptr and prflx_priority values from the
    succeeded pair.
  * conncheck: update peer-reflexive priority of the selected pair
  * conncheck: do not create a pair from peer-reflexive local candidate

    The usual case when forming the initial conncheck list from local and
    remote candidates is to discard server-reflexive local candidates, since
    the agent can not send requests directly from these candidates. But it
    also may happen, when the remote candidates are received late after the
    beginning of the conncheck, that we also have discovered peer-reflexive
    local candidates, that must be discarded as well. See RFC 8445, section
    6.1.2.4 "Pruning the Pairs".
  * conncheck: prune oversized conncheck list based on pair state

    Removing lower-priority pairs to keep the conncheck list under a fixed
    size (RFC 8445, sect 6.1.2.5) may accidently remove pairs that we want
    to preserve, like succeeded and discovered pairs. We choose to only
    remove pairs that are not engaged yet in the connection check
    processing, those in frozen state.

    Fixes #95
  * interfaces: use fallback if getifaddrs failed

    fix #99
  * test-thread: Increase timeout
  * test-io-stream-common: Remove io_stream pointer when removing stream
  * gitlab-ci: No longer allow meson test failures
  * test-send-recv: Change timeout to 150s
  * tests: Make iostream test termination more reliable
  * test-io-common: Abort on error
  * gitlab-ci: Run meson tests in debug setup

    This setup stores more debug info
  * test-send-recv: Write in a loop until blocked

    We're not sure that our callback will be called again if
    we haven't filled the pipe.
  * conncheck: print a supplementary pair flag in the debug dump
  * conncheck: fix timer remainder return value

    We show the timer remainder in milliseconds.
  * Fix building doc when libnice is a subproject

    When passing strings to 'src_dir', they are assumed to be relative to
    the root source dir of main project. That's possibly a Meson bug, it
    should be relative to current source dir. In any case, it's better to
    use include_directories() to avoid any confusion.
  * Remove GTimeVal as it is deprecated in GLib
  * gitlab-ci: Replace dependencies with needs for parallel running
  * gitlab-ci: Add workaround for missing msys in Docker image
  * gitlab-ci: Move CI to Windows 1809 builder

    Also upgrade to Windows image v8 as the image needs to match the host
  * conncheck: fix long time to connect if conncheck list gets filled late

    When a stream's conncheck list is empty during
    priv_conn_check_unfreeze_related() and the check pairs get added only
    afterwards, the whole list may remain in frozen state for tens of
    seconds until the lists of all other streams are completed.

    If a connection check list missed the opportunity to be unfrozen
    according to the process in RFC 5245 Section 7.1.3.2.3 because it was
    empty at the time, unfreeze it immediately once some check pair gets
    added.
  * meson: fix build with Meson 0.49.2

    The parser didn't seem to handle line continuations properly back then.
  * gitlab-ci: Add MSVC builds

    Uses a wrap file to download a prebuilt OpenSSL from our git as a
    subproject.
    Builds for both amd64 & x86
  * tests: Don't use GSubprocessLauncher

    It crashes on Windows
  * test-fullmode-with-stun: Use portable g_usleep() for MSVC
  * meson.build: Simplify shell based test checks
  * meson: Add non-pkgconfig test for OpenSSL

    This makes it work with Windows MSVC builds of OpenSSL which
    don't include a pkg-config file.
  * CI: add basic msys2 build

    For now it uses the gstreamer docker image and shared runner, based
    on windows server 1607. The runner will migrate to windows 1807
    soonish hopefully.

    This commit also adds a glib wrap file needed to build
    libnice.
  * tests: Port test-fullmode-with-stun wrapper to C

    Shell scripts don't work well on Windows and Python doesn't work with valgrind.
  * stund: Add win32 support
  * conncheck: fix a wrong transport value in debug
  * dockerfiles: Add buildah format export to make gitlab happy
  * tests: Pass GST env with valgrind too
  * libnice.supp: Add RHEL 7 suppressions
  * gitlab-ci: Add valgrind autotools test too
  * dockerfiles: Add valgrind to docker files
  * gitlab-ci: Use extends to reduce size of script
  * gitlab-ci: Add valgrind meson test
  * meson: Add valgrind setup
  * libnice.supp: Add GStreamer suppressions
  * test-gstreamer: fix buffer leak
  * conncheck: Drop valid STUN for which we can't find a request

    It's most likely caused by a retransmission received after the initial
    request already had a reply.
  * test-tcp: Only free passive socket after child

    The child now calls into the parent..
  * test-turn: Initialize variable earlier to avoid race
  * test-udp-turn-fragmentation: Avoid leaking test socket
  * test-different-number-streams: Avoid leaking NiceAddress
  * conncheck: ignore selected pairs for nomination that failed

    When evaluating the stopping criterion, failed pairs from other streams
    having the "use_candidate_on_next_check" flag set should be
    ignored.

    This should normally not happen, because a pair selected for nomination
    has no reason to fail when being rechecked, since it previously
    worked... but it may happen with Skype for Business, when libnice
    selects a tcp pair for component 1, the peer seems to have no interest
    in the second component and lets it fail in the middle of the conncheck.
  * conncheck: make the stopping criterion a bit more clear

    This patch doesn't change the logic of the selection of the pair for
    nomination, it makes the code a bit more simple to read.
  * agent: fix a regression when updating foundations

    A previous commit c1fb6f2 introduced a regression in the way the
    foundation of a selected pair is updated and signaled, when the
    foundation of its remote candidate changes. The previous comparison was
    made on *always* identical strings, so the update of the selected pair
    was *never* signaled.
  * conncheck: update a misleading debug statement

    We may not have received remote candidates yet, but we may have
    discovered remote candidates from the early incoming checks. Only
    having stream credentials is required to react to these checks.
  * udp-bsd: Use sockaddr_storage union to ensure big enough socket

    The IPv6 struct sockaddr variant is bigger than the IPv4 one,
    so use the storage struct to ensure that the size is big enough.
  * discovery: Don't start STUN/TURN disco on errorneous socket

    If the initial attempt at sending discovery message returns a socket
    error, don't start the retransmit timer and immediately mark such
    discovery item as done. This is to quickly eliminate clearly
    non-functioning items from the discovery process.

    Particularly improves times to finish discovery on Windows, where
    sending data from a link-local (169.254.0.0/16) IP to a destination not
    on the same subnet leads to "A socket operation was attempted to an
    unreachable network" error. Pointless retransmissions on those sockets
    prolonged discovery in the order of seconds.
  * udp-bsd: log source and destination addresses on GSocket send error
  * agent: fix server-reflexive candidates with oc2007r2

    The nomination of a pair having such a local candidate breaks SfB when
    the libnice agent is behind a nat that does not do port mapping
    randomization. In that case a server reflexive local candidate usually
    lead to a nominated pair.

    The guess made here from observing this behavior is that, it is valid to
    discover and signal these local server reflexive candidates to our peer,
    but they should be removed from our local candidates list thereafter, so
    they do not contribute to build a valid and *even worse* a nominated
    pair with the type server-reflexive. They do not appear in the conncheck
    list per design anyway.

    Instead, the same candidate is discovered again later during the
    conncheck, with a peer-reflexive type this time, and with that type, it
    just works.

    Closes #90
  * conncheck: avoid transport association mismatch

    In some rare cases, the same address and port number may match two
    remotes candidates, a tcp and an udp one, and lead to buggy pair
    construction with incompatible transport. This supplementary check
    prevents this problem. The matching test is not aimed to be exhaustive
    but just a way to discard obviously broken associations, and fallback to
    accept everything else (because socket type has a great diversity, with
    socket types based on other sockets types).

    It should fix #81, where such bogus transport association has been
    reported (tcp-pass:udp).
  * interfaces: ignore only interfaces we really want to

    Once an interface got ignored, ALL interfaces coming after it were
    dropped too.
  * candidate: replace uint8_t -> guint8

    Fixes MSVC build.
  * debug: fix verbose mode

    Since g_parse_debug_string() was looking only at the first 4 items in
    GDebugKey arrays, "libnice-verbose" couldn't get activated.
  * examples: fix compiler extra warnings
  * agent: fix condition for turn-tcp discovery creation

    We support turn-tcp in oc2007 compatibility only and when the
    host candidate transport is compatible, ie when reliable_tcp is true.
  * conncheck: test inbound stun address on the candidate base address

    When receiving an stun packet on a socket, and looking for the matching
    local candidate, normally it doesn't make a difference to test the
    address or the base address. Because a pair cannot have a local candidate
    of type srv-rflx, where there would be a difference, the local candidate
    obtained will be part of a pair of the conncheck list.

    Except for the case of a pairs with tcp-act local candidate, where the
    addr has a port number of zero (tcp-act socket before connect), and the
    socket of the stun packet has a non-null port number (tcp-act socket
    after connect), corresponding to the base address of another
    peer-reflexive tcp-act local candidate, previously discoverd.

    The selection of the local candidate concerned by an inbound stun
    request happens when early incoming checks are processed, and when
    inbound stun packets are normally received during the conncheck.

    This commit complete commit e6a1941 (for early incoming checks)
    in the normal inbound stun packets code path, where is similar
    modification is needed.
  * conncheck: improve comment on local peer-reflexive selection

    This patch rewrites the comment surrounding this code snippet, to make it
    clear, that this pair selection is not specific to the tcp transport.
  * conncheck: nominate matching pairs across components and streams

    The current valid pair nomination makes no effort to select pairs that
    could have some similarities across different components and different
    streams. This is normally not required by the RFC8445, but some well
    known applications will misbehave when the libnice agent is in this
    position to choose the nominated pairs (regular nomination mode, and
    controlling mode) and if it makes an unexpected choice from the peer
    point-of-view.

    This patch improves the stopping criterion and the selection of the
    preferred pair to nominate in that case.

    When no other pair has been nominated yet (across all streams), the
    previous stopping criterion still applies, and the best ranked pair of
    the checklist is selected.

    When a nominated pair exists from another component, we try to nominate
    a pair of the same kind (same local and remote addresses and same
    transport) if we have one, and possibly the best pair we have in the
    checklist, and else we look for a nominated pair from another stream.
  * agent: fix agent reference count
  * tests: fix a compiler warning
  * tcp-bsd: fix a heap-use-after-free
  * component: don't detach the socket source twice

    The source is also detached in socket_source_free()
  * conncheck: define a property for a final idle timeout

    This final idle timeout is renamed from the
    NICE_AGENT_MAX_TIMER_GRACE_PERIOD macro, and keeps its semantic.

    We also increase the default value of this timeout from 1 second to 5
    seconds.  This is useful for the sipe pidgin plugin that has to deal
    with SfB agents, that may take some time in controlling mode before
    choosing and testing the nominated pair
  * conncheck: fix pair priorities uniqueness

    This patch fixes the priority assigned to a peer reflexive discovered
    local candidate, when the agent has the stun client role and receives an
    stun reply. This priority must be the value put in the stun request, ie
    the pair->rflx_priority from the parent pair. This ensures two similar
    ordered pairs, will generate discovered pairs ordered in the same way
    for the stun client, and also for the stun server on the other side.
    Without this identical ordered on both sides of the connections, the two
    agents may nominate a different pair with the aggresive nomination
    scenario, since both are valid.

    The other fix concerns the function that ensures local candidates
    priority uniqueness, that breaks the assumption that "two local
    candidates having the same priority should generate the same
    prflx_priority in the pairs they contribute". Respecting this assumption
    is important to stay coherent with the behavior of the other agent, that
    considers that two stun requests coming from the same peer-reflexive
    remote candidate will have the same remote priority (once a remote
    candidate is added to the component remote_candidates list, its priority
    is not supposed to change).
  * conncheck: create the valid pair on early tcp stun requests

    When replaying the incoming checks, we have to create the succeeded
    valid pair matching this tcp connection the same way we do it
    in conn_check_handle_inbound_stun().
  * agent: discard sockptr on updated remote candidates

    These candidates type is updated from peer-reflexive, discovered during
    early incoming checks, to the type of the matching regularly transmitted
    candidate, so the previous sockptr value is no longer of interest here.
    The same socket is already associated to the initial local candidate
    anyway, source of the early discovery.
  * component: remove socket also from remote candidates

    A socket to be removed may also come from a peer-reflexive remote
    candidate, and some cleanup also needs to be done in this case. This
    reference in a remote peer-reflexive tcp-active candidate caused a
    heap-use-after-free asan error in some custom debugging dump of the list
    of sockets of a component, after a read error in component_io_cb():

    agent_recv_message_unlocked returned -1, errno (25) :
    Inappropriate ioctl for device
  * debug: fix verbose debug enable
  * conncheck: fix incoming checks memory leak
  * conncheck: test incoming checks on candidate base address

    The candidate may be a newly discovered peer reflexive one,
    or a server reflexive initial candidate, where address and
    base address differ. Early incoming checks are received on
    the base address. These incoming checks may accumulate if remote
    credentials arrive with a delay.
  * socket: fix a heap use-after-free on the send queue
  * conncheck: increase dumped information in debug

    In complement to the conncheck list, we dump the pair transport type,
    the socket type, and the incoming checks list.
  * conncheck: make oc2007r2 mode more rfc5245 friendly
  * agent: more debug when remote credential are received

    This complete the similar debug trace when remote candidates are
    received, and help to debug our tests with the patched farstream
    library, where candidates and credentials are transmitted with a
    random delay.
  * agent: signal when a selected pair foundation is updated

    This foundation update may be needed when a selected pair contains a remote
    candidate that has been found by an inbound stun request, but has not
    been received by nice_agent_set_remote_candidates()
  * nicesrc: fix a leak spotted by asan
  * examples: fix compiler warning about uninitialized variables
  * Revert "conncheck: Don't lookup prflx pair for UDP candidates"

    This reverts commit ca47519feda9d4dad38a06e2f7d94c0afc501364.
  * component: Fix use-after-free and resolve regression

    conn_check_prune_socket() on nsocket must be called before removing the
    candidate with this socket inside the loop, to prevent the
    use-after-free reported initially in issue #73.

    But commit 541801d introduced a regression during discovery when an udp
    turn over tcp socket is immediately closed by a HUP condition for
    example. In this case, discovery_prune_socket() is never called, because
    we don't have a candidate with this socket inside the loop. So the
    nsocket is freed by the final nice_component_detach_socket() but is
    still used by the discovery timer callback.

    This commit moves the discovery_prune_socket() and
    conn_check_prune_socket() actions before the loop instead of after, or
    inside.

    Closes #73
  * agent: fix a memory leak
  * agent: keep a ref on the agent while removal of TURN refreshes

    The patch makes the agent alive at least until the last callback of
    the removal of turn refreshes when a stream is deleted from the agent.

    Closes #84
  * discovery: fix an use-after-free in SFB user credentials

    The base64 decoded username and password strings given to
    stun_usage_turn_create() should not freed immediately, since they remain
    used when handling the following related inbound stun replies.
  * meson: Fix enum types generation to match automake

    The automake generated ones are a little funky, so the meson one have to also be
    to not break API...
  * agent: add nice_agent_get_sockets API

    This API makes it possible to get an array of all of the sockets used
    by a specific component, this is useful to set options on the socket.

    Also bump GLib requirement to 2.54, which is the version in RHEL 7
  * conncheck: add transport information to debug
  * build: add default ignore network interface prefix

    By default libnice now ignores network interfaces from virtual machines
    and containers, i.e. names that start with "docker", "veth", "virbr" and
    "vnet".

    If you want to disable this feature override the default with

    ./configure --without-ignored-network-interface-prefix ...
    ./configure --with-ignored-network-interface-prefix= ...
    meson setup -D ignored-network-interface-prefix= ...
    meson setup -D ignored-network-interface-prefix=[] ...
  * configure: support --without-ignored-network-interface-prefix

    This fixes commit b4abda09c79e4ce372a3771300abf568c85c7ff5

    --without-XXX sets $withval to "no", hence we must check for this special
    value instead of ignoring network interfaces that start with "no".
  * build: make prefix option accept a list of strings

    The parameter for the ignored network interface prefix build option
    accepts a comma-separated string now. This list will be converted to a
    comma-separated list of string literals for the C code.

    Disable the feature:

    ./configure ...
    ./configure --with-ignored-network-interface-prefix= ...
    meson setup -D ignored-network-interface-prefix= ...
    meson setup -D ignored-network-interface-prefix=[] ...

    Ignore interfaces whose names start with "virbr":

    ./configure --with-ignored-network-interface-prefix=virbr ...
    meson setup -D ignored-network-interface-prefix=virbr ...

    Ignore interfaces whose names start with "virbr" or "veth":

    ./configure --with-ignored-network-interface-prefix=virbr,veth ...
    meson setup -D ignored-network-interface-prefix=virbr,veth ...
  * interfaces: allow list of ignored prefixes

    Improve on commit b4abda09c79e4ce372a3771300abf568c85c7ff5

    Instead of checking one prefix, check against a list of prefixes. This
    allows libnice to be configured to ignore interfaces from virtual
    machines and containers.
  * interfaces: ignore non-running interfaces

    Check for IFF_UP and IFF_RUNNING flags on the interface.
  * tests: ignore trickle executables

    This fixes commit 9afd0c8b8f12aa560f800ced7e50b4da40dea456
  * interfaces: detect IPv6 ULA & link-local addresses

    Update nice_interfaces_is_private_ip() to handle IPv6 too:

    - unique local address block: fc00::/7
    - link-local address block:   fe80::/10
  * interfaces: add missing support for IGNORED_IFACE_PREFIX

    This fixes commit b4abda09c79e4ce372a3771300abf568c85c7ff5

    Copy the implementation to the !HAVE_GETIFADDRS branch too.
  * interfaces: support multiple loopbacks

    Clone implementation from HAVE_GETIFADDRS branch to !HAVE_GETIFADDRS
    branch of nice_interfaces_get_local_ips()
  * Assign source out of the for loop
  * Fix regression introduced by https://gitlab.freedesktop.org/libnice/libnice/commit/da41258a21102f63ec5d5b2dc20d303f772eb195. Fix #64.
  * conncheck: Don't lookup prflx pair for UDP candidates

    Code comment mentions peer reflexive candidate pair should be selected
    only in the case of TCP local candidates, but it was done in all cases.
  * meson: Fix build with MSVC and non-English locale

    Otherwise, MSVC will complain and cause build error.
  * Deploy documentation
  * Version 0.1.16.1

-- Olivier Crête <olivier.crete@collabora.com>  Thu, 13 Feb 2020 16:19:03 -0500


 (0.1.16)

  * Version 0.1.16
  * gst: Fix URI in plugin
  * agent: Replace closed signal with GASyncResult type function

    This makes the API more GIO style
  * agent: add nice_agent_close_async() API

    Asynchronously closes resources the agent has allocated on remote
    servers.
  * agent: Add "closed" signal
  * discovery: Asynchronous removal of TURN refreshes

    When deleting a turn refresh, ensure the assocaited port allocations on
    the TURN server are properly removed. This means wait for a response for
    our 0-lifetime refresh request and implement retransmissions. Only
    delete the refresh after TURN port removal has been confirmed or all
    our retransmissions timed out.
  * component: Refactor nice_component_clean_turn_servers()

    First collect the relay candidates, then dispose them in a loop.
  * discovery: Remove unused refresh_prune_socket()
  * agent: G_GNUC_FALLTHROUGH macro for compatibility with older glib
  * conncheck: NOMINATION STUN attribute support

    Attribute is proposed here: https://tools.ietf.org/html/draft-thatcher-ice-renomination-00
    WebRTC supports this attribute: controlling side provides attribute value increased by one each time selected pair is changed:
    https://chromium.googlesource.com/external/webrtc/+/3c7d599750405bc734e1d5adbf1b54265b725a9d/p2p/base/p2ptransportchannel.cc#1821
  * Added OPENSSL_LDFLAGS
  * Replaced OPENSSL_CFLAGS with OPENSSL_INCLUDES
  * component: Fix use-after-free

    conn_check_prune_socket() was trying to access deleted NiceCandidate
    instance. Prune the socket before removing the candidate.

    Closes #73
  * test-new-trickle: remove superfluous expression
  * tests: enable "trickle-ice" mode

    Call nice_agent_peer_candidate_gathering_done () where appropriate.
  * test-new-trickle: prevent deadlock in dgram_process()

    The STUN thread may be blocked waiting for stun_signal_ptr so signal it
    when stopping the thread.
  * tests: rename test-dribble to test-trickle
  * agent: trickle ICE mode

    In this mode, activated by setting "ice-trickle" property of a
    NiceAgent to TRUE, a component without a successful connectivity check
    will wait indefinitely for more remote candidates to come.

    nice_agent_peer_candidate_gathering_done() must be called after
    receiving the last remote candidate for the component to finally change
    its state to NICE_COMPONENT_STATE_FAILED.
  * win32: remove obsolete vs9 build files

    Windows users should just use Meson for building libnice.
  * libnice.sym: export nice_agent_new_full

    Forgotten to add in 0.1.15 release?
  * test-send-recv: Fix occasional timeouts

    While waiting for write thread to finish sending, keep also receiving so
    that any STUN messages from the peer still get processed.
  * stun: Fix LibreSSL support

    Closes #71
  * agent: don't print TURN password unless the logging is verbose

    Limits accidental leakage of secret information.
  * stunbdc: initialize Winsock API when on Windows
  * turn: Allow lifetimes under 60s

    Don't set a timeout to the very far future if the lifetime sent  by the
    server is under 60s. Instead of doing "lifetime - 60", switch to lifetime/2.
  * component_io_cb: Avoid potential deadlock

    Don't unref NiceAgent while holding agent mutex. If it's the last
    reference, nice_agent_dispose() will try to acquire the mutex again and
    deadlock.
  * test-fullmode: Make test non-racy too
  * test-drop-invalid: Fix raciness
  * gitlab-ci: Move docker images to main libnice repo
  * meson: Require very latest 0.49.1 as older versions break in our CI

    Also remove workarounds for the older versions.
  * gitlab-ci: Work around meson bug for non-POSIX utf-8 characters
  * gitlab-ci: remove username for now because meson craps out on accents
  * gitlab ci: Use new CentOS 7 dockerfile based containers everywhere
  * tests: Add Dockerfiles
  * turn: Allow alternate server error with no valid credentials

    coturn doesn't authenticate us before sending us to an alternate server.
  * stunagent: Replace more magic numbers with defines
  * turn: Replace magic numbers with define
  * gitlab-ci: Add gtkdoc-check log to build artifacts
  * meson: install .pc file for static gstreamer plugin
  * gitlab-ci: Use compiler warning level 2 in Meson build
  * tests: Fix -Wcast-function-type warnings with GCC 8

    glib documentation says G_SOURCE_FUNC() macro should be used to suppress
    the warning about incompatible function types when the function will be
    cast back to the correct type before it is called by the GSource.
  * tests: Disable UPnP

    An application using more than one NiceAgent instance may crash due to
    a race in gUPnP.

    Fix is to be released in gUPnP 1.1.2 / 1.0.4:

    https://gitlab.gnome.org/GNOME/gupnp/commit/0123e574595e0a547ce26422633df72d63d3d0e0
  * meson: unify exported symbol versions with autotools

    libnice.so created by autotools has its symbols bound to the default
    'Base' version node, whereas Meson build arbitrarily introduced a
    version node named 'libnice'. This breaks tools like dpkg-gensymbols
    that track changes in exported symbols through several releases of the
    library.

    Remove 'libnice' version and revert back to using unspecified version.
  * agent: Fix spelling

    Errors reported by lintian -EvIL -pedantic.
  * udp-turn: Avoid potential integer overflow
  * udp-turn: Fix unaligned memory access on ARM
  * gitlab-ci: Build gtk-doc and test install with meson
  * gitlab-ci: Split make distcheck into a separate build
  * gitlab-ci: Run autotools tests in CI too
  * gitlab-ci: Add meson tests to build
  * gitlab-ci: Skip meson build on schedules
  * test-tcp: Use IPv4 instead of IPv6

    This is because Docker doesn't have IPv6 by default.
  * tests/test-different-number-streams: Make it work with only localhost
  * meson: fix test-gstreamer

    On Nix, test-gstreamer fails with

    36/38 test-gstreamer                          FAIL     0.07 s (exit status 1)

    --- command ---
    BUILT_WITH_MESON='1' /build/libnice/build/tests/nice-test-gstreamer
    --- stdout ---
    Running suite(s): nice_gstreamer_test
    0%: Checks: 1, Failures: 1, Errors: 0
    ../libs/gst/check/gstcheck.c:466:F:nice:buffer_list_test:0: Could not create a 'nicesink' element
    Check suite udpsink ran in 0.002s (tests failed: 1)
    -------

    Let’s add the build directory to GST_PLUGIN_SYSTEM_PATH_1_0, so that
    the test can find the built GStreamer element.
  * meson: Fix DLL search path during test execution on Windows

    Meson needs to see all libraries a target depends on so that it can add
    each to PATH when running "meson test".

    Avoids "*.dll was not found" errors.
  * meson: Add fallback for openssl
  * Version 0.1.15.1

-- Olivier Crête <olivier.crete@collabora.com>  Thu, 09 May 2019 13:18:13 -0400


 (0.1.15)

  * Version 0.1.15
  * Makefiles: Add meson.build files to tarball
  * Add more files to .gitignore
  * Fix little bugs found by clang-analyzer
  * docs: Add _get_type() symbols to hidden section
  * meson.build: Sync libversion with libtool
  * nice/test-symbols.sh: Make symbols test work from other path too
  * Makefile.am: Export *_get_type() symbols like meson does
  * conncheck.c: Fix negotiation problem

    When a peer reflexive candidate is discovered, it is added to the
    list of connection checks, but is is not nominated by default.

    This causes a problem if parent pair is already nominated and
    the remote peer does not send more requests because it has already
    selected a candidate. (i.e.: This is the case of WebRtc in Firefox)
  * agent: Check for early checks on dribbled candidates too

    We have to check this list every time candidates are added.
  * conncheck: Don't free all incoming checks on credentials

    Candidates could also be dribbled.
  * component: Make incoming_checks into a GQueue

    We check the size regularly, so add a little efficiency.
  * meson: Allow building of g-i with static libs.

    Allow building of g-i with static libs which should
    work since Meson 0.49 and sufficiently recent
    gobject-introspection (>= 1.58.1). If g-i is too
    old people will get a suitable error message and
    can disable g-i via build options.
  * meson: Fix pkg-config generation with internal dependencies

    Prevents Meson error:

    ERROR:  requires argument not a string, library with pkgconfig-generated
    file or pkgconfig-dependency object, got <InternalDependency null: True>

    Requires Meson 0.49.
  * meson: Fix build with fallback glib

    When building libnice with glib fallback, its 'libgio_dep' internal
    dependency doesn't provide all needed include and library search paths.

    To avoid unresolved header files and linker errors in such case,
    'libglib_dep', 'libmodule_dep' and 'libgobject_dep' from glib submodule
    must be pulled in as well.

    The problem should be fixed in GLib 2.60.
  * agent: Fix use of freed stream in nice_agent_dispose()

    nice_stream_close() calls agent_find_stream(), which iterates over
    agent->streams list.

    Therefore, when we're freeing agent->streams in a loop, we must also
    delete the respective GSList item from the list at the end of each
    iteration. Otherwise agent_find_stream() would stumble over already
    deleted NiceStream instance the next time it gets called.

    Fixes random crashes when running test-different-number-streams on
    Windows.
  * meson ci: Add logs to artifacts
  * pseudotcp: Rename state enums to not clash with system ones
  * tests: Initialize Windows Sockets where needed

    Fixes failing test cases on Windows.
  * udp-bsd: Fix recv with small buffer on Windows

    The underlying GSocket implementation on Windows returns an error when
    the user-provided buffer isn't large enough to fit the whole datagram
    received on a message-oriented socket.

    When this occurs, in order to preserve identical behavior of udp-bsd
    NiceSocket across platforms, we have to mute the error and set the
    received message length to the size of the provided NiceInputMessage.
    Any excess portion of the message gets discarded.

    Fixed udp-bsd test on Windows.

    GLib 2.48 is required in order to use G_IO_ERROR_MESSAGE_TOO_LARGE.
  * agent: Expose input_message_get_size() in agent-priv.h
  * libnice.sym: add some generated get_type functions and fix gtk-doc build

    https://gitlab.freedesktop.org/gstreamer/gst-build/issues/14
  * meson: tests: make fullmode-with-stun non-parallel and disable fuzzing test

    test-fullmode-with-stun needs to run in non-parallel mode to work.

    test-pseudotcp-fuzzy sometimes just times out, which needs investigating.

    meson test -C builddir --repeat=20
  * windows: use proper fallback for ssize_t and use stdint.h for types

    stdint.h is available since vs2010 and stdbool.h since vs2013,
    so we should be able to just use that these days.
  * Fix build with MSVC

    Tested inside Cerbero with VS 2017
  * meson: fix gtk-doc message

    It's disabled by default, so saying it wasn't found is confusing.
  * stun: tools: drop getopt for arg parsing for better windows compatibility

    Just implement argument parsing ourselves here.

    It's not really more lines of code than the getopt.h variant
    and makes things build on Windows with MSVC without having to
    ship a separate getopt implementation.
  * CI: rename autotools build target

    No tests are being built or run here.
  * CI: use -werror for meson

    And drop gstreamer1-plugins-base-devel dep
    which is not needed.
  * CI: Add a meson build job
  * meson: disable introspection if g-ir-scanner is not found
  * meson: add fallbacks for glib and gio
  * meson: don't error out if clock_gettime() was not found

    It's not a requirement, there's a fallback.
  * meson: check for gtkdoc-scan
  * meson: add new unit test
  * meson: allow selecting crypto library manually via an option
  * Add support for Meson build system
  * agent: Don't require stream names to parse remote SDP

    The streams are matched by the order in which they appear in the SDP,
    not by name, so insisting on local streams to have one makes no sense.

    This likely should have been removed in 5972db0.
  * tcp-passive: Clear connection on child closing

    If this isn't done, then there may be invalid points left inside the
    passive socket which could be used and cause a crash.

    Fixes #33
  * tcp-bsd: Restore global locks

    Avoids race between socket_send_more() and socket_close() leading either
    to crash on use of freed NiceSocket, or abort upon attempting to
    g_mutex_clear() a locked mutex.

    Akin to what d1611c0c0ba6c5bce500b96a8f61de4fe5f144e9 did to udp-turn.
  * udp-turn: Create locked version of realm&nonce cache function

    To be able to call it from a context that is already locked.
  * udp-bsd: Protect the GSocketAddress cache with a mutex
  * agent: check message length before extracting RFC4571 frame size

    nice_socket_recv_messages() may return a NiceInputMessage of length = 0,
    so before attempting to read the RFC4571 header check the message really
    has at least sizeof (guint16) bytes of data.

    The bug's always been there, the previous commit only made it more
    apparent.
  * udp-turn: handle multiple RFC4571 frames received in a TCP-TURN message

    There might be multiple RFC4571-framed messages (or fragments thereof)
    within a single TCP-TURN message. Make sure each NiceInputMessage
    passed by the user into socket_recv_messages() gets exactly one RFC4571
    frame, or remains empty if there aren't any messages to receive.

    We should keep any data that doesn't fit into the user buffers for
    the next time socket_recv_messages() gets called with the socket.
  * udp-turn: don't re-iterate incoming TURN control messages

    After being parsed, a TURN control message turns into a NiceInputMessage
    with zero length. Such message doesn't increment the iteration counter i
    and so is re-processed in the next iteration, which detects right away
    that message->length == 0 and continues to the next element in
    recv_messages.

    Thus, n_valid_messages variable serves no real purpose and to achieve
    the same result we can simply increment the iteration counter after each
    message.
  * udp-turn: Start function with lock instead of unlock
  * udp-turn: Restore global locks

    The socket abstraction not being reference counted, we need a global
    lock for them in the short term.
  * udp-turn: Rename misleading function, it's a timeout

    It's not locked in any way.
  * udp-turn: Factor our SendRequest destruction
  * component: Replace agent pointer with weak reference

    This should make it safer.
  * udp-turn: Restore synchronized seconds timeout
  * agent: Remove explicit parent pointers

    Remove all pointers that don't include have a reference except to agents
  * Use per-agent locks and GWeakRefs in callbacks from timeout sources

    Work on libnice's bug #1 in Gitlab. This work is composed of multiple
    merged parts:

    - "Global lock contention removed"
    Phabricator D1900: https://phabricator.freedesktop.org/D1900
    By @nifigase
    Opened in GitLab as Merge Request !12

    - "agent: properly handle NiceAgent ref in callbacks from timeout
    sources"
    Phabricator D1898: https://phabricator.freedesktop.org/D1898
    By @mparis
    This patch was itself based upon a previous version of the work done in
    D1900. After the switch of hosting, it got lost.

    On top of these, additions to follow some review comments from @ocrete:
    - https://phabricator.freedesktop.org/D1900#40412
    - https://phabricator.freedesktop.org/D1898#39332
  * component: Also accept TCP from udp-turn socket
  * Fix build with android NDK r16

    getifaddrs() may only be available if the target API is >= 24
  * conncheck: don't disable keepalive on TCP if it's explicitly enabled

    This makes it possible to enable keepalive for TCP candidates. It is useful
    to detect disappearing peers or network failures faster.
  * stun: check identifier before using it

    By default, 'candidate_identifier == NULL' only happens for 'compatibility
    == NICE_COMPATIBILITY_GOOGLE'. However, keepalive=true will also trigger
    the same code path so candidate_identifier must be checked to avoid a
    segfault.
  * agent: fix crash with debugging enabled

    For some connection types nicesock->fileno is never set.
    Make sure it is not NULL before using it.
  * configure: Allow selecting crypto library manually
  * stun: Add support to detect OpenSSL
  * stun: Add implementation using OpenSSL for rand/SHA1/MD5
  * openssl: Add ax_check_openssl.m4
  * tests: Remove non-existing mainloop test from Makefile.am
  * Add GitLab CI configuration
  * docs: Add missing symbols to various sections
  * Makefile.am: Replace valgrind.sh with valgrind-test-driver
  * Remove Phabricator .arcconfig

    Now, we use GitLab at https://gitlab.freedesktop.org/libnice/libnice
  * test-bind: define MSG_NOSIGNAL if undefined

    MacOS X and Windows don't have MSG_NOSIGNAL.

    Signed-off-by: Justin Kim <justin.kim@collabora.com>
  * Fix queue_clear replaced by queue_free error

    There was two cases where instead of freeing the queue, we actually
    clear the queue so it's ready for reused. Notably in
    nice_socket_free_send_queue(), a missed name function and nicesrc
    element state change.

    This regression was introduced by: fa783b1dd727a6ee2b99a111ca24790ae850c2f7
  * Fix cast-function-type warning introduced in GCC 8

    This is new warning introduced with GCC 8. This is being fixed by using appropriate function, like g_queue_free_full/g_list_free_full or by casting to GCallback before casting to the target function signature.

    Closes: #46
  * discovery: fix candidate foundation using valid characters

    Following [1] and [2], "-" character is not allowed for foundation

    Refs
    [1] https://tools.ietf.org/html/rfc5245#page-73
    [2] https://tools.ietf.org/html/rfc5234#appendix-B.1
  * test-pseudotcp(-fuzzy): Fix format string warnings causing build errors on 32-bit

    Closes: ttps://gitlab.freedesktop.org/libnice/libnice/issues/45
  * stun: Also rename windows-specific function

    Like all other instances of nice_RAND_bytes that were renamed
    to nice_RAND_nonce.

    Fixes the windows build
  * agent: Redefine socket error messages for windows

    In the same way we do it for the other error messages
  * stund: Pass sockaddr_storage size for both families
  * stund: Pass the right length for ipv6
  * Ignore function case warnings

    This makes GLib usage annoying as it makes GSourceFunc casts invalid.
  * agent: don't require "reliable" be TRUE in order to use "ice-tcp"

    Setting writable socket callbacks doesn't have to be limited to reliable
    agents. TCP sockets need the callback in any case for correct operation
    and calling nice_socket_set_writable_callback() on a NiceSocket that has
    UDP as its base has no effect.

    Differential Revision: https://phabricator.freedesktop.org/D1726
  * discovery: ignore bogus Skype for Business srflx addresses

    If main SfB TURN server sends our allocation request to an alternate
    server, the response will have XOR_MAPPED_ADDRESS containing the IP
    address of the turn server that proxied the message instead of our own
    actual external IP.

    Before we create server reflexive candidates upon receiving an allocate
    response, check that the TURN port got assigned on the same server we
    sent out allocate request to. Otherwise, the request was proxied and
    XOR_MAPPED_ADDRESS contains a bogus value we should ignore.

    Issue introduced by 59fcf95d505c3995f858b826d10cd48321ed383e.
    Differential Revision: https://phabricator.freedesktop.org/D1949
  * agent: make candidate username and password immutable

    With this patch we prevent the username and the password of a candidate
    to be modified during a session, as required by the RFC, sect 9.1.2.
    This is also needed from a memory management point of view, because the
    password string pointer may be recorded in the components stun agent
    sent_ids[] struct key member, and freeing these values there may cause
    an use-after-free condition, when an inbound stun is received from this
    candidate. This behavior has been observed with pidgin, xmpp, and
    farstream when a same remote candidates are "updated" several times,
    even if the credentials don't change in this case.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1917
  * discovery: ignore all non-relay local candidates when relay is forced

    The tcp server reflexive discovered local candidates must be ignored
    when force_relay is set.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1899
  * conncheck: dont fail a stream with a empty conncheck list

    Since commit 17f30e4, we may have a stream with an empty conncheck list,
    and such a stream obviously should not be tested for failed components.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1895
  * socket: ping the stun server address on the right socket

    Verify the compatibility of the socket domain with the stun server
    IP address, before sending a request.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1894
  * conncheck: make debug more homonegeous

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1893
  * conncheck: factorize pair state debug

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1892
  * conncheck: the conncheck send function may fail

    With this patch, we put the pair in state failed if we cannot send
    the connection check, for example due to missing local credentials.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1891
  * test-new-dribble: make credentials swap asymmetric

    the first case of test-new-dribble (standard-test) is updated, by making
    the credentials swap between the left and right agent asymmetric.
    Previously, ragent started to receive stun requests without initially
    knowing lagent candidates. Now, ragent also ignores lagent credentials.
    This modification allows to test changes introduced by the previous
    commit.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1890
  * conncheck: rework early stun requests handling

    With this patch we simplify the code used to handle the incoming stun
    request when remote candidates or remote credentials have not been
    received yet.

    When the remote credentials is unknown, the stun request is stored
    in a list of incoming_checks for later processing, and no further
    processing is done, except responding to the request.

    When the remote credentials are received, the triggered checks for these
    incoming checks can now be queued, and the related pairs are created.

    If the remote candidates have not been received when the stun request
    on a valid local port arrives, a peer-reflexive remote candidate will be
    created. This candidate may need to be updated later when remote
    candidates are finally received, including candidate priority and
    foundation, and also related pairs.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1889
  * agent: Fixes incompatible pointer type warning on OSX.

    The variable tie is actually never read.
  * conncheck: handle alternate-server for turn relays differently

    If a relay gives us an alternate-server, we need to cancel and reset
    every candidate discovery attempt that uses the same server, to avoid
    ending up with one component on one server and the other component on
    another server (causing relay candidates with mismatched foundations).
  * discovery: Increase discovery_unsched_items whenever we restart a check

    The discovery_unsched_items is decremented every time a DiscoveryCandidate
    goes from non-pending to pending. So if we restart a check by setting
    pending to FALSE, we should re-increase the discovery_unsched_items.
  * turn: Add support for ALTERNATE_SERVER in OC2007 Compatibility

    The MS Office TURN servers will always return the MS_ALTERNATE_SERVER in
    allocation responses, and if they are not handled, we end up using the
    main turn server to send allocation requests that then get sent to the
    alternate server which will return the XOR_MAPPED_ADDRESS containing
    the IP address of the turn server that proxied the message instead of
    our own actual external IP.
  * conncheck: do not require that all streams have a connection check list

    One or more streams might not have any connection check list if the
    number of streams differs from the peer agent.
    Differential Revision: https://phabricator.freedesktop.org/D1880
  * Makefile: really enable debug for tests

    Differential Revision: https://phabricator.freedesktop.org/D1888
  * agent: prevent external role change while conncheck is running

    With this patch, we stash the controlling mode property change, and
    apply it safely, when it won't interfere with an ongoing conncheck
    running. According to RFC5245, sect 5.2. "Determining Role", the role
    is determined for a session, and persists unless an ICE is restarted.

    Differential Revision: https://phabricator.freedesktop.org/D1887
  * stun: Fix FD leak in test/utility code

    https://phabricator.freedesktop.org/T7798

    Signed-off-by: Philip Withnall <withnall@endlessm.com>
    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1819
  * tests: Fix agent.h header inclusion in test-gstreamer.c

    Spotted by Lukas Gradl on the mailing list.

    Signed-off-by: Philip Withnall <withnall@endlessm.com>
  * tests: Fix copyright dates in test-gstreamer.c

    This code is not 1000 years old.

    Signed-off-by: Philip Withnall <withnall@endlessm.com>
  * conncheck: change state before updating nominated pairs

    When a pair is nominated while in state failed, we first move
    back to state connecting, then we update the selected pair, and
    finally we move to state connected.
  * conncheck: forgot to put a pair in triggered check list

    When a new pair is created from an unknown remote candidate, it
    should be enqueue for a triggered check, to allow it to be marked
    as nominated on response arrival in priv_mark_pair_nominated().
    Creating it in waiting state is not sufficient since the update
    in priv_mark_pair_nominated() from previous commits.

    Differential Revision: https://phabricator.freedesktop.org/D1763
  * conncheck: update the state of triggered checks pairs

    With this patch, we fix an ambiguity of some parts of the spec, when
    the document refers to in-progress pairs, that also concern pairs in
    the triggered checks list.

    The first cast is in section 7.1.2.5, "Updating the Nominated Flag",
    when the in-progress pair will be nominated on response arrival. This is
    handled in function priv_mark_pair_nominated(), when a pair is put to
    the triggered check list in reaction to a matching inbound stun request.
    Such a pair in priv_mark_pair_nominated() will _always_ be in the
    triggered check list, from the previously called function
    priv_schedule_triggered_check().

    The second case is in section 8.1.2, "Updating State" when an in-progress
    pair stops its retransmission when another pair of higher priority is
    already nominated. This is handled by function priv_prune_pending_checks().

    Until now, pairs enqueued in the triggered check list move transiently
    to state waiting, according to 7.2.1.4. But this state causes wrong
    decisions in the two previous cases, because such pairs should in fact
    rather be considered "like in-progress", to avoid discarding them
    inadvertantly.

    This patch update the state of the triggered check list
    pairs to in-progress. It allows to remove exception handling cited
    above: the code is a bit more simple, and allows some refactoring
    in priv_mark_pair_nominated() between RFC and compatibility modes.

    Differential Revision: https://phabricator.freedesktop.org/D1762
  * conncheck: support several stun requests per pair

    This patch should improve the reliabily of the connection check by
    keeping the record of several simultaneous ongoing stun requests per
    pair. A new stun request on an in-progress pair typically is caused by
    in inbound stun request from the peer on this same pair. This is named
    "Triggered Checks" in the spec. When this situation arises, it is fair
    to handle these two stun requests simultaneously, the triggered check,
    and the initial ordinary check, since both can potentially succeed.

    Differential Revision: https://phabricator.freedesktop.org/D1761
  * conncheck: use stun_timer_remainder less frequently

    We try to use stun_timer_remainder() less frequently, particularily
    in the debug messages, and favour of the next_tick value associated
    to the pair.

    Differential Revision: https://phabricator.freedesktop.org/D1760
  * conncheck: make debug sentences more accurate

    We add a helper function to print the pair state in-extenso.

    Differential Revision: https://phabricator.freedesktop.org/D1759
  * conncheck: reorder some chunks of code

    With this patch we simplify the levels of code indentation.

    Differential Revision: https://phabricator.freedesktop.org/D1758
  * agent: Set error if it isn't set
  * conncheck: improve role conflict debug

    This patch displays explicitely the controlling or controlled
    role of the agent.

    Differential Revision: https://phabricator.freedesktop.org/D874
  * configure: Remove -Wswitch-enum

    Creates useless warnings when other libraries change.

    https://phabricator.freedesktop.org/T7770
  * component: Use non-GClosure dummy callbacks

    GClosures are not that cheap to setup
  * agent: Don't crash if recv cancelled without a GError
  * Repleace UNRELEASED with 0.1.15
  * agent: Adjust the nice_agent_new_full() to use flags

    This makes it easier to read and more extensible.
  * agent: remove spurious newlines

    Differential Revision: https://phabricator.freedesktop.org/D1756
  * stun: fix gcc7 implicit fallthrough warning

    Differential Revision: https://phabricator.freedesktop.org/D1754
  * agent: add new pairs only for gathering streams

    At the end of the local candidate gathering process, we only create new
    pairs for streams that are in gathering state.

    Other stream that may be in ready state for example, due to a
    previously succeeded conncheck process, may have accumulated some
    couples (local,remote) candidates that have not resulted in the creation
    a new pair during this previous conncheck process, and we don't want
    these new pairs to be added now, because it would generate unneeded
    transition changes for a stream unconcerned by this gathering.

    Differential Revision: https://phabricator.freedesktop.org/D1755
  * conncheck: fix the component failed transition

    This patch fixes the transition of a component from connecting to
    failed, that previously occured due to the propagation of the
    keep_timer_going variable, and to the final call to function
    priv_update_check_list_failed_components(), after the global agent
    timer was stopped.

    Previously, the code almost never entered to failed state, because the
    timer was going one, as long as the number of nominated pair was not
    enough, and as long as there were valid pairs not yet nominated. Even
    if all pair timers were over.

    The definition of the Failed state of a conncheck list is somewhat
    contradictory in the spec, depending on weather you read :

    * sect 5.7.4. "Computing States",
    "Failed:  In this state, the ICE checks have not completed successfully
    for this media stream."

    or

    * sect 7.1.3.3. "Check List and Timer State Updates",
    "If all of the pairs in the check list are now either in the Failed or
    Succeeded state: If there is not a pair in the valid list for each
    component of the media stream, the state of the check list is set to
    Failed."

    Our understanding of the ICE spec is that, the proper way to enter failed
    state instead in when all connchecks have no longer in-progress pairs.
    All pairs are either in state succeeded, discovered, or failed. No timer
    is still running, and we have no hope that the conncheck list changes
    again, except if an unexpected STUN packet arrives later. All pairs in
    frozen state is a special case, that is handled separately (sect
    7.1.3.3).

    A special grace delay is added before declaring a component in state
    Failed. This delay is not part of the RFC, and it is aimed to limit the
    cases when a conncheck list is reactivated just after it's been declared
    failed, causing a user visible transition from connecting to failed, and
    back from failed to connecting again. This is also required by the test
    suite, that counts exactly the number of time each state is entered, and
    doesn't expect these transcient failed states to happen (frequent due to
    the nature of the testsuite, less frequent in real life).

    Differential Revision: https://phabricator.freedesktop.org/D1111
  * conncheck: remove cancelled pair state

    Pairs with the state NICE_CHECK_CANCELLED are the pairs targeted for
    removal after the nomination of a pair with an higher priority,
    described in Section 8.1.2 "Updating States", item 2 of RFC 5245. They
    include also pairs that overflow the conncheck list size, but this is a
    somewhat more marginal situation. So we are mainly interested in the
    first use case of this state.

    This state mixes two different situations, that deserve a distinct
    handling : on one side, there are waiting or frozen pairs that must be
    removed, this is an immediate action that doesn't need a dedicated state
    for that. And on the other side, there are in-progress pairs that
    should no longer be retransmitted, because another pair with a higher
    priority has already been nominated.

    This patch removes the cancelled state, and adds a flag
    retransmit_on_timeout to deal with this last situation. Note that this
    case should not generate a triggered check, as per described in section
    7.2.1.4, when the state of the pair is In-Progress or Failed, since this
    pair of lower priority has no hope to replace the nominated one.

    Differential Revision: https://phabricator.freedesktop.org/D1114
  * conncheck: adjust recheck on timeout strategy

    The pair recheck on timeout can easily cause repetitive rechecks in
    a ping-pong effect, if both peers with the same behaviour try to
    check the same pair almost simultaneously, and if the network rtt
    is greater than the initial timer rto. The reply to the initial
    stun request may arrive after the in-progress conncheck
    cancellation (described in RFC 5245, sect 7.2.1.4). Cancellation
    creates a new stun request, and forgets the initial one.
    The conncheck timer is restarted with the same initial value,
    so the same situation happens again later.

    We choose to avoid resetting the timer in such situation. After enough
    retransmissions, the timeout delay, that doubles after each timeout,
    becomes longer than the rtt, and the stun reply can be handled.

    Differential Revision: https://phabricator.freedesktop.org/D1115
  * conncheck: do not recheck a just succeeded pair

    We cancel the potential in-progress transaction cancellation, caused by
    sect 7.2.1.4 "Triggered Checks", when we receive a valid reply before
    transmission timeout, or just after timeout, when the pair is
    temporarily put on the triggered check list on the way to be
    rechecked. This situation is not covered by the RFC 5245.

    Differential Revision: https://phabricator.freedesktop.org/D1119
  * conncheck: fix a state transition case

    When a new stun request hits a valid pair, of a failed component, we may
    have a transition from state failed to connected. In this situation, we
    do a logical progression failed -> connecting -> connected, like we do
    in function priv_update_check_list_state_for_ready()

    Similarily, when a new stun request hits a failed pair, of a failed
    component, triggering a new conncheck for this pair may also cause the
    component state to move back from failed to connecting state.

    Differential Revision: https://phabricator.freedesktop.org/D1118
  * conncheck: try to change earlier to state ready

    We check if we can move from state connected to ready just
    after a pair expired its retransmission count. This pair
    will be marked failed, and will no longer be in-progress.
    The number of in-progress dropping down to zero is one
    of the conditions needed to make the transition to ready,
    per component (and not globally as it's the case in other
    locations where this check function is called).

    Differential Revision: https://phabricator.freedesktop.org/D1117
  * conncheck: dont cancel a pair for triggered check

    This patch adds another supplementary "corner" case, not covered by the
    ICE spec, sect 8.1.2, "Updating States". A pair in waiting state and in
    the triggered check list should be considered like an in-progress pair,
    and cancelled only if its priority is lower than the priority of the
    nominated pair. This is required in some aggressive nomination
    situations for both peers to select the same pair, having the highest
    priority.

    Differential Revision: https://phabricator.freedesktop.org/D933
  * conncheck: remove a useless pair recheck

    This exception to the ICE spec is no longer needed: when a pair is in
    the succeeded state, there is no needed to recheck it again upon
    reception of an incoming stun request on it.

    Differential Revision: https://phabricator.freedesktop.org/D884
  * conncheck: update the pair state in triggered check list

    With this patch, we update the state of the pair to waiting when
    it is put in the triggered check queue. We also take care to call
    priv_schedule_triggered_check() before priv_mark_pair_nominated()
    so a pair to be rechecked and put on the triggered check queue
    will have a unique state to be tested in the following call to
    priv_mark_pair_nominated() when evaluating its nomination attributes.

    Differential Revision: https://phabricator.freedesktop.org/D883
  * conncheck: new pairs never have the nominated flag preset

    This patch disables the possibility to set the nominated flag of a
    candidate pair at creation time. This possibility was used when a new
    pair is created from a new peer reflexive remote candidate, when the
    agent is in controlled mode, and an stun request with USE-CANDIDATE is
    received. In this case, since previous commit "conncheck: fix a
    nomination corner case", we set the nominated flag when the stun
    response of this new pair will arrive, and not before.  Consequently,
    this flag is no longer required when the pair is created.

    Differential Revision: https://phabricator.freedesktop.org/D881
  * conncheck: fix a nomination corner case

    This patch add two supplementary cases, not covered by the ICE spec,
    sect 7.2.1.5 "Updating the Nominated Flag" when a controlled agent
    receives a STUN request with the USE-CANDIDATE flag, for a pair that is
    in the waiting state. We consider that this case is similar to the
    in-progress state, and should be handled in the same way. We also accept
    when the pair is in frozen state. This latter case happens in the
    new-dribble test, when an agent replays incoming early connchecks.

    Differential Revision: https://phabricator.freedesktop.org/D880
  * conncheck: use the right pair when retriggering a check

    This patch completes the previous patch by adding a link back from the
    discovered pair, to the parent pair that generated this check. This link
    is needed by the ICE spec, to comply with section 8.1.1.1, "Regular
    nomination", where the check to be retriggered is the initial check that
    caused the discovery of the valid pair. When the valid pair is a
    peer-reflexive pair, the retriggered check must target the succeeded
    pair, and not the valid discovered pair.

    Differential Revision: https://phabricator.freedesktop.org/D879
  * conncheck: link succeeded and discovered pairs

    When the agent has the role of the stun server, is in controlled mode,
    and receives a pair with the "use-candidate" attribute set, it must find
    a matching succeded or discovered pair in its conncheck list. This is
    described in ICE spec 7.2.1.5, "Updating the Nominated Flag", item #1.
    When a matching pair is in succeeded state, the agent must nominate the
    valid pair (a discovered pair) constructed from section 7.1.3.2.2,
    that's been created from this succeeded one. To make this lookup, we
    introduce a new "discovered_pair" member of the CandidateCheckPair
    struct, that links the succeeded pair, and its discovered pair
    if any.

    Differential Revision: https://phabricator.freedesktop.org/D878
  * conncheck: improve triggered check of in-progress pairs

    This patch update the way triggered checks of in-progress pairs are
    handled, according to ICE spec, section 7.2.1.4. Previously the same
    connection check was retransmitted with an updated timeout. This causes
    problems when a controlling role switch occurs in this time frame.
    This is the reason why a new connection check must be generated
    reflecting the updated role. We introduce a new flag "recheck_on_timeout"
    in the pair indicating that the pair must be rechecked at the next timer
    expiration.

    Differential Revision: https://phabricator.freedesktop.org/D875
  * conncheck: invoke the debug dump in more places

    Differential Revision: https://phabricator.freedesktop.org/D1123
  * conncheck: improve the selection of the pairs to be checked

    This patch aims to implement more closely the algorithm described
    in RFC 5245 indicating how pairs are transitionned from state Frozen
    to Waiting. This is described in 7.1.3.2 when a check succeeded, and
    correspond to modifications in function priv_conn_check_unfreeze_related().
    This is also described in 5.7.4 when defining the initial state of the
    pairs in a conncheck, and correspond to modifications in function
    priv_conn_check_unfreeze_next().

    This patch introduces the notion of active and frozen check list. It
    allows us to define the timer restranmission delay as described in 16.1.

    Another modification in priv_conn_check_tick_unlocked() is that every
    stream in handled consecutively, and in an independant way. The pacing
    was previously of a single STUN request emitted per callback, it is now
    of a triggered check per callback OR a single STUN per callback AND per
    stream per callback.

    The description of ordinary checks per stream in 5.8 is detailled in
    function priv_conn_check_tick_stream(), and a remaining of the code
    used to nominate a pair by the controlling agent is put in a dedicated
    function priv_conn_check_tick_stream_nominate()

    Differential Revision: https://phabricator.freedesktop.org/D813
  * conncheck: update pair valid property selectively

    With this patch, we fix a corner case when the succeeded pair is a
    peer-reflexive candidate pair, that already has been discovered
    previously, In this case, the current pair -p- should not be marked
    valid, because the valid flag is already set on the discovered pair.

    Differential Revision: https://phabricator.freedesktop.org/D1124
  * test-nomination: added a new test for the nomination mode

    Differential Revision: https://phabricator.freedesktop.org/D1107
  * conncheck: implement ice regular nomination method

    This patch implements Regular Nomation as described in RFC5245
    8.1.1.1. The controlling agent lets valid pairs accumulate, and
    decides which pair to recheck with the use-candidate attribute set.
    priv_mark_pair_nominated() follows 7.2.1.5, to update the nominated
    pair when acting as a STUN server, and
    priv_map_reply_to_conn_check_request() implements 7.1.3.2.4 to
    update the nominated pair when acting as a STUN client. A new
    property is also added to the agent to control the nomination
    mode, which can be regular of aggressive, with default value
    set to aggressive.

    Two new flags are introduced in the CandidateCheckPair structure:

    - use_candidate_on_next_check indicates the STUN client to add the
    use-candidate attribute when the pair will be checked. At this
    time, the nominated flag has not been set on this pair yet.

    - mark_nominated_on_response_arrival indicates the STUN server
    to nominate the pair when its succesfull response to a
    previous triggered check will arrive (7.2.1.5, item #2)

    Differential Revision: https://phabricator.freedesktop.org/D811
  * conncheck: fix pair state transition when successful response is received

    According the ICE RFC 5245, 7.1.3.2.3, the pair that *generated* a
    successful check should go to state succeeded, not only the valid
    pair built in section 7.1.3.2.2.

    Differential Revision: https://phabricator.freedesktop.org/D810
  * conncheck: peer reflexive candidates are not paired

    This patch makes the code compliant with ICE RFC, 7.2.1.3 "Learning
    Peer Reflexive Candidates" and 7.1.3.2.1 "Discovering Peer Reflexive
    Candidates", where discovered candidates do not cause the creation
    of new pairs to be checked.

    Differential Revision: https://phabricator.freedesktop.org/D805
  * conncheck: update selected pair when nominated flag is set

    This modifies commit 8f1f615. It is better focused to update the
    selected pair just after its nominated flag has been set. We also keep
    the code homogeneous with other places, where the call to
    priv_update_selected_pair() immediately follows the setting of
    pair->nominated. Moreover in priv_update_check_list_state_for_ready(),
    we would call priv_update_selected_pair() more times that necessary when
    iterating on all nominated pairs.

    Differential Revision: https://phabricator.freedesktop.org/D1125
  * stun timer: make properties for stun timer tunables

    Three STUN binding request properties should be customisable. RFC 5245
    describes the retransmission timer of the STUN transaction 'RTO', and
    RFC 5389 describes the number of retransmissions to send until a
    response is received 'Rc'. The third property is the 'RTO' when
    a reliable connection is used.

    RFC 5389 introduces a supplementary property 'Rm' as a multiplier used
    to compute the final timeout RTO * Rm. However, this property is not
    added in libnice, because this would require breaking the public API for
    STUN. Currently, our STUN implementation hardcodes a division by two for
    this final timeout.

    Differential Revision: https://phabricator.freedesktop.org/D1109
  * agent: Use base_addr to generate rport in SDP

    Reported by Capricornus (zhushengliang)

    https://phabricator.freedesktop.org/T7763
  * interfaces: ignore predefined network interfaces

    Some interfaces, like the one managed by libvirtd to provide a network
    bridge to locally hosted virtual machines, can be completely ignored
    when gathering ICE candidates. The motivation for adding this
    possibility is that, ignoring them doesn't remove capabilities, and
    improves the overall speed of the connection check method, by reducing
    the number of pairs to be tested. This patch adds the possibility to
    define such interfaces in the configuration script.

    Differential Revision: https://phabricator.freedesktop.org/D948
  * examples: Stop installing the examples

    There’s no point in installing them; their benefit is in providing
    example code to developers.

    Debian doesn’t package them; Fedora packages them in a separate
    subpackage which will have to disappear.

    Signed-off-by: Philip Withnall <withnall@endlessm.com>
    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1737
  * agent: do not create a GSource for UDP TURN socket

    With this patch, we don't create a new GSource for udp-turn socket,
    because it would duplicate the packets already received on the base UDP
    socket, as the underlying GSocket is the same. This is a race condition,
    because an UDP packet arriving on the base socket, may randomly be
    handled by the GSource callback created for the base socket (udp-bsd) of
    the callback created for the udp-turn socket. Moreover this callback
    already knows how to parse UDP datagrams received from a known turn
    server.

    This patch also prevents a subtle bug, when a STUN request is received
    directly from a peer, is handled by the udp turn socket. If the agent
    already has a valid permission for this remote candidate, established
    for another pair, it will happily send the STUN reply through the turn
    relay. This generates a source address mismatch on the peer agent, when
    it'll receive the STUN response from the turn relay instead of the
    initial address the request has been sent to.

    Differential Revision: https://phabricator.freedesktop.org/D932
  * stun timer: fix timeout of the last retransmission

    According to RFC 5389, section 7.2.1, a special timeout is applied to
    the last retransmission (Rm * RTO), with Rm default value of 16, instead
    of (64 * RTO), 2^6 when the number of transmissions Rc is set to 7.

    As spotted by Olivier Crete, stun_timer_* is a public API, that cannot
    be changed, and the initial delay (RTO) is not preserved in the
    stun_timer_s struct. So we use a hack that implicitely guess Rm from the
    number of transmissions Rc, by generalizing the default value of the
    spec for Rm and Rc to other values of Rc passed in stun_timer_start(

    According to the spec, with the default value of Rc=7, the last delay
    should be (64 * RTO), and it is instead (16 * RTO). So the last delay
    can be computed by dividing the penultimate delay by two, instead of
    multiplying it by two.

    Differential Revision: https://phabricator.freedesktop.org/D1108
  * agent: Ignore remote candidate of non-accepted types

    If we disable ice-tcp or ice-udp, ignore the remote
    candidates for those types.
  * conncheck: Check the controlling state when the req was sent

    It was checking when the pair was created, but the role may have
    already changed when the request is sent.
  * tests_: Add test to verify that only packets from validated addresses pass

    https://phabricator.freedesktop.org/T104

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D1717
  * agent: Drop packets not from validated addresses

    This is required by the WebRTC spec.

    Remove test-mainloop as it doesnt even try to do
    a negotiation.

    https://phabricator.freedesktop.org/T104

    Differential Revision: https://phabricator.freedesktop.org/D1716
  * candidate: Add equality check function

    Add a function that can check if two candidates point to the same place.

    https://phabricator.freedesktop.org/T104

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D1715
  * test-credentials: Fix leak
  * debug: Use libnice-verbose, not libnice-nice-verbose
  * tests: Use automake test-driver for valgrind

    This fixes the valgrind integration with the new test drivers.
  * agent: Remove impossible case
  * agent: Separate return from NiceSocket and internal enum

    The same variable was used for return values from NiceSocket and
    for the internal enum, but 0 and -1 have different meanings in both.
  * udp-turn: Add some const to internal APIs
  * Make clang-analyzer happy

    Various little things, none of which should make a functional difference.
  * agent: Don't set variable that won't be used

    It exits the loop immediately, so no point to set the variable.
    And it makes the clang static analyzer happy.
  * conncheck: Use the right test for empty remote_frag

    It's now an array, not a pointer, so needs to test to emptyness.

    It's a bugfix on the previous commit, 59ce41df
  * conncheck: consider answer received when remote credentials are set

    Consider that the answer is received when remote credentials
    are set instead of when a remote candidate is set,
    which could not happen or could cause more delay for the
    connection establishment.

    Ported to git master by Olivier Crête

    Differential Revision: https://phabricator.freedesktop.org/D1704
  * Version 0.1.14.1

-- Olivier Crête <olivier.crete@collabora.com>  Thu, 27 Dec 2018 16:46:19 -0600


 (0.1.14)

  * Version 0.1.14
  * README: Depends on GLib 2.44
  * stun: Make hmac code NDEBUG safe
  * stun: Remove double const on int
  * candidate: Test against possible type

    There was a confusion and it tested against a value not in the enum.
  * configure: Remove missing-noreturn warning

    We don't have or call noreturn functions in practice and it makes
    the stun test build fail on clang.
  * stun: Use unions fix alignment issues

    This makes clang happy.
  * configure: Make sure flag test really fails on unknown flag

    clang on recent macOS seems to only emit a warning on unknown flags
    which makes this test fail and then when using Werror, it makes the
    compiler test fail too.
  * stun: Rename rand function to make its strengh clear

    It's only nonce level randomness, not long term key level.

    Differential Revision: https://phabricator.freedesktop.org/D1711
  * stun: Switch from gcrypt to gnutls

    GLib already uses it, instead of adding another dep.

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D1705
  * agent: Only try to use the address of the same family to connect to TURN

    Using a IPv6 local address to connect to a IPv4 relay just creates an
    extra discovery attempt that will not provide something useful.

    This commit fixes another place of TURN discovery creation which was
    omitted in fc0d3744ebc03f8137866170594968ba61e6be30. In my case it cuts
    down up to ~15 seconds from candidate gathering phase, making it almost
    instantaneous.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1709
  * udp-bsd: Log g_socket_send_message() errors

    Those may have previously been silently ignored.

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D1708
  * agent: Eliminate duplicate debug in agent_recv_message_unlocked()

    There were two almost consecutive verbose debugs containing basically
    identical information. Merge them into one message that is printed only
    when something was actually received.

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D1707
  * agent: Improve debug in component_io_cb()

    agent_recv_message_unlocked() always receives a single message and
    returns a RecvStatus code.

    Avoid weird debugs like "received -1 valid messages" (when retval is
    RECV_WOULD_BLOCK) and print the message only when something was actually
    received.

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D1706
  * configure: gcry_mac_* were added in 1.6

    They're not present int he 1.5.0 release, so require
    the newer one.
  * Makefile: Build tests before docs
  * doc: Improve gtkdoc-check environment
  * doc: Add missing symbol
  * configure: Actually require gtk-doc 1.10 for no-tmpl
  * stun: Use libgcrypt for SHA1 support

    Now that libstun depends on libgcrypt, we might as well use its SHA1 hash
    support, rather than carrying around our own.

    Differential Revision: https://phabricator.freedesktop.org/D1612
  * stun: Use libgcrypt for MD5 support

    Now that libstun depends on libgcrypt, we might as well use its MD5 hash
    support, rather than carrying around our own.

    Differential Revision: https://phabricator.freedesktop.org/D1611
  * stun: Use libgcrypt to provide secure random number generation

    Previously, a custom Mersenne Twister PRNG was used, which is not
    securely random. In addition, its seeding fell back to wall-clock time,
    which is typically predictable.

    This uses libgcrypt on Linux but retains the Windows code which uses the
    Windows crypt API.

    Differential Revision: https://phabricator.freedesktop.org/D1610
  * stun: Add libgcrypt dependency

    This will shortly be used to implement secure random number generation.

    Differential Revision: https://phabricator.freedesktop.org/D1609
  * stun: Remove outdated tests from test-hmac

    The SHA-1 and MD5 implementations in libnice are about to be removed, so
    stop testing them explicitly. In addition, rework the remaining test to
    use the stun_sha1() API which will remain.

    Differential Revision: https://phabricator.freedesktop.org/D1608
  * stun: Fix cast-align compiler warning when casting sockaddr

    There should never be a problem with alignment at runtime, since we’re
    casting the sockaddr to sockaddr_in or sockaddr_in6 based on its
    declared sa_family — anything declared as AF_INET6 should have been
    allocated as a sockaddr_in6, and hence have appropriate alignment (same
    for AF_INET).

    This fixes a compiler warning on ARM and other alignment-sensitive
    architectures.

    https://phabricator.freedesktop.org/T7718

    Signed-off-by: Philip Withnall <withnall@endlessm.com>
    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D1686
  * build: Add default-reviewers key to .arcconfig

    This should cause all patches submitted using git-phab to be assigned to
    the #libnice project for review, by default.

    Signed-off-by: Philip Withnall <philip@tecnocode.co.uk>
  * ms-ice: limit legacy connchecks as per [MS-ICE2] 3.1.4.8.2

    Client should stop sending connectivity checks with legacy FINGERPRINT
    when it receives a conncheck message containing IMPLEMENTATION-VERSION
    attribute.

    Differential Revision: https://phabricator.freedesktop.org/D1139
  * ms-ice: legacy FINGERPRINT mode

    In order to preserve compatibility with clients which use custom CRC
    lookup table from [MS-ICE2], whenever a connectivity check request or
    reply is sent, an additional message is sent along. These two messages
    differ only in FINGERPRINT attribute - one uses regular CRC lookup table
    for calculation, the other uses the modified table.

    When a message is received and FINGERPRINT doesn't pass validation using
    regular CRC table, the receiver also tries to verify using the modified
    table.

    [MS-ICE2] 3.1.4.8.2 describes this procedure.

    The commit fixes compatibility with older MSOC and Lync clients.

    Differential Revision: https://phabricator.freedesktop.org/D1138
  * stun: add STUN_COMPATIBILITY_MSICE2

    Windows Live Messenger is a discontinued service. We can repurpose
    STUN_COMPATIBILITY_WLM2009 as [MS-ICE2] compatibility.

    The orignial WLM enumerator is kept for the sake of API compatibility.

    Differential Revision: https://phabricator.freedesktop.org/D1137
  * ms-ice: calculate FINGERPRINT according to [MS-ICE2]

    Connectivity checks that are fully conforming to [MS-ICE2] should
    contain IMPLEMENTATION-VERSION attribute ([MS-ICE2] 2.2.2.2) equal to 2
    and their FINGERPRINT should be calculated as described in RFC5389
    section 15.5 (i.e. using standard CRC lookup table).

    We need this because some Skype for Business clients no longer accept
    messages whose FINGERPRINT contains a value calculated using Microsoft's
    old custom CRC table (specified verbatim in [MS-ICE2] 3.1.4.8.2).

    The change creates a compatibility breakage with legacy Lync clients
    which will be fixed in following commits.

    Differential Revision: https://phabricator.freedesktop.org/D1136
  * stun: add STUN_USAGE_ICE_COMPATIBILITY_MSICE2

    Windows Live Messenger is a discontinued service. The only users of WLM
    mode seem to be Lync clients, so STUN_USAGE_ICE_COMPATIBILITY_WLM2009
    can be repurposed as [MS-ICE2] compatibility.

    We keep the WLM enumerator for the sake of API compatibility.

    Differential Revision: https://phabricator.freedesktop.org/D1135
  * conncheck: invoke the debug dump in more places

    Differential Revision: https://phabricator.freedesktop.org/D1123
  * conncheck: fix pair socket assignment

    This patch fixes a problem when a new pair having a peer-reflexive new
    remote candidate is added while the transport type is udp. In this case
    the new pair socket really should be the socket of the local candidate,
    and not the remote (for example, the local candidate may be of relayed
    type).

    Differential Revision: https://phabricator.freedesktop.org/D1122
  * conncheck: fix tick counter used for debug stats

    The tick counter variable used to display pairs statistics should be
    per stream defined, to avoid side effects of a global variable, for
    example always having an odd or even tick counter value when the agent
    contains just two streams.

    Differential Revision: https://phabricator.freedesktop.org/D1113
  * agent: remove unused agent property

    Differential Revision: https://phabricator.freedesktop.org/D1112
  * test-turn: wait for gathering done sequentially

    Fixes a bug in the logic of the wait loop, where only a single
    gathering done was required to exit the loop, the other was caught
    by the following assert.

    Differential Revision: https://phabricator.freedesktop.org/D1110
  * agent: Don't ask upnp to remove not yet allocated candidates

    This caused a warning in Farstream tests.
  * agent: read from the correct TCP-TURN socket

    fileno of UDP-TURN NiceSocket is NULL since 0a6c779f and so we need
    different means to identify the topmost socket.

    Differential Revision: https://phabricator.freedesktop.org/D1100
  * conncheck: dump timer status in the stream check list

    Instead of printing the static pair priority values, it provides more
    information to dump each pair timer state, next timeout, and
    retranmission count, when debugging the whole connchecks list
    content.
  * conncheck: use strncmp instead of strcmp

    Differential Revision: https://phabricator.freedesktop.org/D931
  * tests: fix io-stream when built with optimizations

    In construct like "while (foo);" when foo is modified outside of the
    current thread, the variable should be declared volatile to suggest the
    compiler to read its value without making code optimization.
  * stun: avoid expensive call to sprintf in debug-related code
  * agent: rework gathering failures on auto-generated IPs

    This patch reworks commit fc4d3aa "ignore gathering failures on
    auto-generated IPs", that introduces a regression in the test-fullmode
    check, when turn is on and use_loopback is off. The part of the test
    that fails is when nice_agent_gather_candidates (ragent...) should
    return false when the port range for the second component is already
    busy, line 385.

    In this case, agent->local_address is null, so the code path added by
    commit fc4d3aa is taken, and the function will return true, even when
    not local address has been gathered.

    The proper fix is to swap the inner and outer loops (on components, and
    on local addresses), and to go to error when all local addresses of a
    given component have failed, and to return false only in this case.
  * conncheck: state is connected when a pair is nominated

    This patch fixes is bug introduced in commit 1ab9d7c "conncheck:
    Separate valid and succeded states", with the introduction of the valid
    flag. The agent really should go to connected state when we have a
    nominated pair, and not just a valid one.
  * test-send-recv: reduce deadlock timeout
  * pseudotcp-fuzzy: fix this test

    The header size should be 24 bytes only, if we don't want to fuzz the
    payload too.  Moreover, the default lambda parameter is decreased to
    one, to not fuzz the header too heavily, and consequently increase too
    much the time for the test to complete, due to exponential
    retransmission timeout when packets are corrupted.
  * pseudotcp: accept several FIN segments

    This modification allows to gracefully recover from a first
    corrupted FIN segment.
  * build: fix build in alternate builddir

    Differential Revision: https://phabricator.freedesktop.org/D930
  * conncheck: Remove pairs before freeing candidate

    Remove the whole pair before the candidate is
    to be freed.

    https://phabricator.freedesktop.org/T7460
  * stun timer: Do 7 retransmissions as recommended

    Also reduce the normal timeout to make the test bearable.

    This is what RFC 5389 section 7.2.1

    Differential Revision: https://phabricator.freedesktop.org/D1056
    Maniphest Task: https://phabricator.freedesktop.org/T3339
  * timer: Maximum retransmission should include the original one

    We really care about the maximum transmissions, the first one counts.
  * pseudotcp: it's still a GObject
  * pseudotcp: Make sure duplicate ack representing losses have no data

    If they have data in them, they won't be recognized as duplicate acks by
    the sender.
  * pseudotcp: Implement NewReno timestamp heuristic

    This allows the sender to enter fast retransmit after a timeout because
    it can now detect that three duplicate acks are caused by a packet loss.

    As specific in RFC 6582 section 4.2.
  * pseudotcp: Set min RTO to 1 second

    This is recommended by RFC 6298
  * pseudotcp: Implement full NewReno
  * pseudotcp: Make debug more useful
  * pseudotcp: Separate default and maximum MTU

    Accept packets much beyond the default MTU, but
    set a reasonable default MTU for sending of 1400
  * pseudotcp: close local socket on initial transmission error

    This is required as no retransmissions will happen
  * pseudotcp: Export more symbols for PseudoTCP
  * pseudotcp: Make structs definitions private
  * pseudotcp: Correct behaviour of buffer size methods when part-closed

    Correct the behaviour of pseudo_tcp_socket_get_available_bytes() and
    pseudo_tcp_get_available_send_space() when the socket is not in
    TCP_ESTABLISHED state. It’s still permissible to send and receive up
    until the local side calls pseudo_tcp_socket_close(), which means we
    may be in state TCP_ESTABLISHED *or TCP_CLOSE_WAIT*.
  * pseudotcp: Fix EOS checks in high packet loss situations

    The state tracking previously assumed that if a FIN packet was sent, the
    other side received it and the preceding packets, and hence it was
    correct to sent an RST if an unexpected packet (such as a delayed
    SYN-ACK) was received.

    In cases where there is high packet loss, this won’t work. For example,
    peer A sends a SYN, it is received and peer B replies with a SYN-ACK
    which is also received; then peer A sends its data and a FIN, which are
    both dropped. Since it hasn’t received anything since the original SYN,
    peer B resends its SYN-ACK. If that is received, peer A was incorrectly
    treating it as an erroneous packet, and would then send a RST. In actual
    fact, it should take this as a signal that the data and FIN packets were
    dropped, and should resend them.

    TODO: Add unit tests
  * pseudotcp: Propagate error codes from transmit() to callers

    Otherwise we can’t easily differentiate between different transmission
    failures; for example: underlying socket failures, versus retransmission
    timeouts.
  * pseudotcp: Add more debug info on closing down a pseudo-TCP socket
  * pseudotcp: Fix pseudo_tcp_socket_recv() in state TCP_CLOSE_WAIT

    Previously, pseudo_tcp_socket_recv() would start returning 0 (EOS) as
    soon as a FIN segment was received from the peer, even if there was
    unread data already in the receive buffer.

    Instead, the unread data should all be accessible before
    pseudo_tcp_socket_recv() starts returning 0.
  * pseudotcp: Fix retransmission of segments before handling a FIN

    Previously, if peer A transmitted one or more data segments (1),
    followed by a FIN segment (2) to peer B, and segments 1 were
    dropped, peer B would not request retransmission of them and would
    instead continue with the FIN handshake. This effectively meant
    segments 1 were lost without peer B realising.

    Fix this by only handling the FIN segment once its sequence number is
    acknowledged in the receive window.
  * socket: Assert trying to use free'd socket

    Cleanly returnign makes no sense and may hide
    worse problems.
  * component: Fix set TCP selected remote candidate

    https://phabricator.freedesktop.org/T7407
  * agent: Parse TURN packet on the right socket

    https://phabricator.freedesktop.org/T99
  * tests: Add TURN test

    This test depends on rfc5766-turn-server which must
    be installed for this test to run.
  * conncheck: mark discovered pairs with TCP passive as valid

    Doing so similarly to priv_process_response_check_for_reflexive(),
    which also sets valid flag on discovered peer reflexive pairs.

    Fixes a regression in previously working scenario.
    Differential Revision: https://phabricator.freedesktop.org/D1035
  * test-icetcp: don't be sensitive to the signal order

    "new-selected-pair" may be emitted after "component-state-changed"
    to READY, by which time the main loop might have gotten quit in
    cb_component_state_changed(). Consequently, cb_new_selected_pair() could
    miss to register the selected pair, ultimately leading to an assertion
    failure in main().

    We should wait for both selected pair and state change events to occur
    before stopping the main loop.

    Differential Revision: https://phabricator.freedesktop.org/D1044
  * Revert "WIP"

    This reverts commit 01519677ba4d8df46e2c07bc20a5ef03ee2d9c3a.
  * WIP
  * conncheck: fix pruning conn checks with TCP active sockets

    TCP active socket makes a NiceSocket for each peer in conn_check_send()
    and this new socket is then stored as CandidateCheckPair's 'sockptr'.
    We thus have to look also at the 'sockptr' value when eliminating
    sockets which have received HUP from connection checks.
    Differential Revision: https://phabricator.freedesktop.org/D1034
  * agent: Remove socket on read error

    If a socket returned an error, remove it.
  * component: Add API to cleanly remove a base socket
  * agent: Fix udp-turn-over-tcp

    The TCP-based turns don't come pre-parsed unlike
    the UDP variants!
  * agent: Add force-relay property to force messages through the relay

    This allows implementing WebRTC privacy mode.
  * conncheck: Start conncheck on server reply if needed

    This only really applies in the force relay mode where there are
    no local candidates.
  * Replace g_malloc/g_new with g_alloca where possible

    This should reduce the overhead a bit.
  * conncheck: explain some corner cases

    This patch give details why some exceptions to the ICE spec are needed.

    Differential Revision: https://phabricator.freedesktop.org/D876
  * conncheck: add a debug dump of the whole stream check list

    https://phabricator.freedesktop.org/D814
  * conncheck: fix the replay of early incoming connchecks

    This patch fixes a bug in the way the list of incoming checks
    is handled. The code purges this list too early, before all ichecks
    for a given component are processed. It happens because the component
    is computed from each pair of the check list, instead of being passed
    as a fixed parameter of the function.

    Differential Revision: https://phabricator.freedesktop.org/D882
  * stun: fix ice role conflict handling

    This patch fixes the role conflict handling in stun ICE usage,
    according to RFC 5245, by adding including missing cases in the
    test. The role switch not only depends of the comparison of the
    stun ice-controlling/controlled attrib with the agent tie breaker
    value, but it also depends on the current role of the agent.

    This patch also changes the value returned by
    stun_usage_ice_conncheck_create_reply() when a role conflict exists
    but doesn't change the role of the agent, causing an error stun
    response. Previously, this case could not be differenciated by the
    caller from a case with no role conflict. Now by examinating the
    return value, and whether the control param changed, the caller
    can check the four possibles situations. The stun test suite is
    updated to match this change.

    Differential Revision: https://phabricator.freedesktop.org/D873
  * conncheck: Make previous commit compile

    https://phabricator.freedesktop.org/T3324
  * discovery: Make sure each candidate has a unique priority

    This should fix compliance with RFC 5245 Section 4.1.2

    https://phabricator.freedesktop.org/T3324
  * agent: Restrict transitions to gathering

    Only allow transitions to gathering from disconnected or
    failed states.
  * conncheck: fix TCP active relay handling

    TCP active relay candidates use UDP TURN for their underlying socket.
    Since 0a6c779f1f, socket->fileno of UDP TURN sockets is always NULL,
    which caused a wrong code path to be chosen in conn_check_send().

    We have to update the if-expression accordingly.

    Maniphest Tasks: T7442
    Differential Revision: https://phabricator.freedesktop.org/D1017
  * agent: ignore gathering failures on auto-generated IPs

    Candidate gathering is stopped when discovery_add_local_host_candidate()
    returns HOST_CANDIDATE_CANT_CREATE_SOCKET. This may be too radical
    a measure when other local addresses can still be able to generate
    usable candidates.

    The issue was observed by a user who had an IPv6 address with tentative
    flag on one of the interfaces. That single failing address was causing
    the whole gathering process to end with no candidates found.

    Still, don't do this if nice_agent_add_local_address() has been called.
    In that case, the user really cares about the addresses and if there's
    any problem, the process should fail.

    https://phabricator.freedesktop.org/D1016
  * candidate: Give lower priority to TCP relayed candidates
  * udp-turn: Fix binding timeout leak
  * conncheck: Update selected pair if necessary
  * conncheck: Don't reset keepalive timer on next keepalive

    If the keepalive is still being re-send, just let the retries do their
    job. If they don't get a reply, then declare the attempt failed.
  * conncheck: Separate valid and succeded states

    RFC 5245 specifies that when a mapped-address differs from the address
    from the request was sent, the mapped-address is used to select the
    valid pair, but the source address of the check is used to select the
    pair that succeeded, so they are not the same.
  * udp-turn: Don't expose GSocket

    UDP turn sockets should never be read frm directly.
    Because they may share the same socket with the non-relay,
    so the incoming data may not be relayed and then the NiceSocket
    API doesn't allow returning the base socket as the source.
  * conncheck: Make very frequent debug verbose-only
  * debug: Enable based on G_MESSAGES_DEBUG
  * agent: Don't emit signal in the middle of recv call
  * agent: Update type of peer-reflexive candidate on trickled candidate

    If a remote candidate matches an already discovered peer-reflexive candidate,
    then the type can be updated to the real type and the foundation
    can be set correctly.
  * agent: Only try to use the address of the same family to connect to TURN

    Using a IPv6 local address to connect to a IPv4 relay just creates an
    extra discovery attempt that will not provide something useful.
  * stun turn usage: Only send the username if short term creds or nonce present

    This is recommended by the STUN RFC 5389.
  * turn: Cache the nonce & realm to remove useless round trips

    Instead of re-discovering the nonce and realm for every request, cache them
    in th socket.
  * conncheck: Stay READY if a new nominated pairs comes in
  * conncheck: Deduplicate conncheck stopping code
  * Reset to connecting if reconnected after failed
  * agent: Add warning on ignored result
  * conncheck: display controlling mode of stun requests

    This patch makes the debug log more explicit about the agent
    controlling role for each stun request sent. It helps to debug
    role conflict resolution.

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D877
  * agent: remove newline from debug output

    Just a cosmetic fix.

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D872
  * socket: refactor nice_socket_is_base_of()

    • rename to nice_socket_is_based_on() and swap the order of arguments
    accordingly; the implementation doesn't have to use the confusing
    'return other->is_base_of()' pattern anymore
    • fix potential NULL dereferences

    The argument order in agent_recv_message_unlocked() was already wrongly
    swapped in 1732c7d6 and thus this commit isn't changing it back because
    that order has become the correct one.

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D866
  * socket: fix wrong function called in nice_socket_is_base_of()

    We have to call is_base_of "virtual function pointer" of 'other'
    object, not 'sock', since 'other' is the structure whose base
    NiceSocket we need to get from its private data.

    For instance calling nice_socket_is_base_of() with 'sock' and 'other'
    being respectively pseudo-SSL and UDP-TURN-over-TCP invoked is_base_of
    variant for pseudo-SSL, casting other->priv into PseudoSSLPriv *, but
    other->priv is actually TurnTcpPriv *. It must be called the other way
    around.

    https://phabricator.freedesktop.org/T7335
    https://phabricator.freedesktop.org/T7336

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Reviewed-by: José Antonio Santos Cadenas <santoscadenas@gmail.com>
    Reviewed-by: Philip Withnall <philip@tecnocode.co.uk>
    Reviewed-by: José Antonio Santos Cadenas <santoscadenas@gmail.com>
    Differential Revision: https://phabricator.freedesktop.org/D785
  * conncheck: implement a "triggered queue" list

    The checks should not be sent immediately in priv_conn_check_initiate(),
    but be put into the "triggered queue", see  "7.2.1.4 Triggered Checks".
    This patch implements this triggered checks list, and uses it to enforce a
    pacing of STUN transactions, no more than one per Ta ms, according to
    "B.1. Pacing of STUN Transactions".

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Reviewed-by: Philip Withnall <philip@tecnocode.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D802
  * agent: Fix argument order

    Fixes crash reported on https://phabricator.freedesktop.org/D786
  * ice: fix the debug of the presence of the controlling/controlled attrib

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D807
  * agent: fix relay candidate discovery on hosts having several IPs

    When a message is received from a TURN server and we manage to find a
    local relay candidate with matching stream and component IDs, we should
    also check whether the message came from the candidate's respective
    socket.

    We should do this because there might still be some pending TURN
    candidate discovery with the same server from a different local host IP
    and the message may be a response to our allocate request. If
    nice_udp_turn_socket_parse_recv_message() is passed such request, it can
    make some wrong assumptions and modify it like in the case of reliable
    UDP-TURN-OVER-TCP by removing (supposed) RFC4571 framing, which in turn
    causes the reply to be unrecognized and discarded.

    Because of this, any subsequent replies following the first successful
    allocate response from that server couldn't create any additional relay
    candidates.

    Maniphest Tasks: https://phabricator.freedesktop.org/T7336

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D786
  * build: Update autogen.sh from GNOME template

    https://wiki.gnome.org/Projects/GnomeCommon/Migration#autogen.sh
  * component.c: Fix memory leak

    If nicesocket is not added to a component it will be leaked.

    This is the case of active tcp sockets

    Change-Id: I57fefffef71d35ce9871139ee1064181f6fe125b
    Reviewed-by: José Antonio Santos Cadenas <santoscadenas@gmail.com>
    Differential Revision: https://phabricator.freedesktop.org/D822
  * agent: Use provided CandidatePair rather than re-finding a pair

    In priv_update_selected_pair(), commit 57393333 changed the code to
    re-find a CandidatePair matching the given lfoundation and rfoundation.
    However, the foundation does not uniquely identify candidate pairs,
    and if we’re aiming to set a specific candidate pair as the selected
    pair, this could result in the wrong pair being selected.

    This can happen when handling multiple similar candidate pairs, such as
    when generating peer reflexive candidates from multiple sources.

    See https://tools.ietf.org/html/rfc5245#section-2.4.

    Originally spotted by Fabrice Bellet in
    https://phabricator.freedesktop.org/T3557.

    Reviewed-by: José Antonio Santos Cadenas <santoscadenas@gmail.com>
    Differential Revision: https://phabricator.freedesktop.org/D742
  * simple-example: transmission can begin earlier than in ready state

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D819
  * test-new-dribble: wait until ragent reaches state completed

    The test didn't let enough time for ragent to reach the completed state
    after obtaining its remote candidates and switching to connecting state.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D817
  * conncheck: reorder the connection list when priorities are updated

    The update of pairs priorities due to agent role change requires the
    conncheck list to be reordered to reflect this modification.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D806
  * conncheck: fix keepalive stun agent initialisation

    With this patch, we send keepalive binding requests using agent
    compatibility flags, instead of RFC 3489 classic stun. The peer stun
    agent will known how to handle it, and won't be confused by the
    uncompatible RFC 3489 message, causing "no cookie" errors in the debug
    log.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D804
  * conncheck: foundations are shared across streams

    This patch fixes a bug where the foundation definition shouldn't take
    into account the stream the pair belongs to. This is important, because
    the ordinary checks algorithm will change pair state from Frozen to
    Waiting, by selecting pairs from other streams sharing the same
    foundation than already succeeded pairs.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D815
  * test-priority: ignore the local preference

    The local preference depends on the rank of the IP address in the list
    of all IP addresses available of the box running the test. As this value
    is not fixed we ignore it in the test.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D818
  * conncheck: nominate only one matching pair

    This patch fixes a bug in priv_mark_pair_nominated(), where the local
    candidate was not passed to the function, so removing the possibility to
    find which local candidate the check was sent to.

    Reviewed-by: Philip Withnall <philip@tecnocode.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D808
  * conncheck: add more debug information

    Add a more debug details, specifically in some places, it is interesting
    to have the src and dst IP addresses of the pairs being checked, and
    also to make the difference between log related to different stream ids.

    Reviewed-by: Philip Withnall <philip@tecnocode.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D803
  * agent: Fix not setting UPnP timeout on second gather_candidates()

    If the first call to nice_agent_gather_candidates() partially succeeds
    (setting a UPnP agent and timeout), then fails before starting
    gathering, a second call to nice_agent_gather_candidates() would fail to
    set a new UPnP timeout because the UPnP initialisation block would be
    skipped. That means gathering would never succeed due to timing out on
    UPnP.

    Fix that by setting the UPnP timeout whenever a new pending UPnP mapping
    is added.

    https://phabricator.freedesktop.org/T3534

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
  * configure.ac: Update glib version

    As udp-bsd.ccode is using G_IO_ERROR_CONNECTION_CLOSED glib 2.44
    is required.

    Change-Id: I1bb63f2484c513c58eeec312ba0835164604c40c
    Reviewed-by: Philip Withnall <philip@tecnocode.co.uk>
    https://phabricator.freedesktop.org/T3492
  * pseudotcp: Use labs() rather than abs() for handling long integers

    This fixes a compiler warning and prevents a possible truncation.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D345
  * tests: Enable G_MESSAGES_DEBUG for all unit tests

    Now that we’re using automake’s parallel test harness, it automatically
    redirects all the debug log spew away from the console, so we should
    always have it enabled.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D292
  * build: Set repository callsign in .arcconfig

    This fixes `arc diff` to select the right repository when submitting
    patches.
  * agent: Correctly namespace Component and its methods

    Remove all references to the old, unnamespaced versions. This should
    cause no functional changes.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D309
  * agent: Correctly namespace Stream and its methods

    Remove all references to the old, unnamespaced versions. This should
    cause no functional changes.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D308
  * agent: Turn Component into a GObject

    This makes it reference-counted. This will be useful for allowing
    GDatagramBased and GIOStream objects to hold references to the stream
    and component they are interested in, allowing removal of the global
    NiceAgent lock previously needed to look up the component for every I/O
    operation.

    Deprecate all the old methods until it’s properly namespaced.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D307
  * agent: Turn Stream into a GObject

    This makes it reference-counted. This will be useful for allowing
    GDatagramBased and GIOStream objects to hold references to the stream
    and component they are interested in, allowing removal of the global
    NiceAgent lock previously needed to look up the component for every I/O
    operation.

    It also means that nice_stream_close() could eventually become
    asynchronous, which would fix a few race conditions.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D306
  * tests: Update expected priority values in test-priority

    This is a follow up to T3324, to update the test case to match the new
    values generated.

    Bug: https://phabricator.freedesktop.org/T3324
    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D301
  * tests: Use g_assert_cmpuint() to make test failures easier to diagnose

    Now we can actually see the priority numbers which are unequal.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D300
  * tests: Set candidate addresses in test-priority

    This avoids an assertion failure in nice_address_to_string() when the
    addresses are compared for priority.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D299
  * agent: Remove redundant GLIB_CHECK_VERSION macros

    We depend on GLib 2.36.0, which is a higher version than any of these
    version checks cared about, so they were all trivially true or false.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D298
  * tests: Remove g_thread_init() calls

    We depend on GLib 2.36.0; g_thread_init() has been deprecated since
    2.32.0, when thread initialisation was changed to happen automatically.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D297
  * tests: Remove g_type_init() calls

    We depend on GLib 2.36.0, which deprecated g_type_init() since GType
    initialisation is now done automatically.

    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>
    Differential Revision: https://phabricator.freedesktop.org/D296
  * conncheck: rename priv_process_response_check_for_peer_reflexive()

    Renamed the function to priv_process_response_check_for_reflexive()
    because it now checks also for server reflexive candidates.

    Updated the documentation to indicate that the function never returns
    NULL.

    Maniphest Tasks: https://phabricator.freedesktop.org/T115
    Differential Revision: https://phabricator.freedesktop.org/D243
    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
  * conncheck: generate candidate pair for valid srflx candidate

    In priv_process_response_check_for_peer_reflexive(), mere presence of a candidate in local_candidates doesn't mean there's also some candidate
    pair in conncheck_list using it - for instance that candidate may be server reflexive, for which no check pairs are initially created (see
    conn_check_add_for_candidate_pair()).

    If we fail to find corresponding pair upon receiving such candidate's IP in a conncheck response's XOR-MAPPED-ADDRESS attribute, we shall add a
    new one in a similar way we would add a new pair for a just discovered peer reflexive candidate.

    Previous priv_process_response_check_for_peer_reflexive() implementation would return NULL, causing a CandidateCheckPair with local candidate of
    type HOST to be wrongly selected even though the local host IP might not be directly accessible by the remote counterpart (e.g. it's an address
    on a private network segment). In practice this was coming through as a duplex connection that libnice was reporting as properly established,
    but only one direction of the communication was actually working.

    Maniphest Tasks: https://phabricator.freedesktop.org/T115
    Differential Revision: https://phabricator.freedesktop.org/D242
    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
  * agent: check for base socket in _tcp_sock_is_writable()

    The argument passed into the callback is always a base (TCP/UDP) socket,
    which can't be directly compared with local candidate's sockptr (may be
    TURN, http, or other socket wrapping another one). We're in fact
    interested whether sock is a base socket of sockptr.

    Maniphest Tasks: T114
    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D241
  * socket: add nice_socket_is_base_of()

    This will be used in the next commit.

    Maniphest Tasks: T114
    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Differential Revision: https://phabricator.freedesktop.org/D240
  * build: Bump GLib dependency to 2.36

    This is needed for G_IO_ERROR_BROKEN_PIPE, which is used in the I/O
    stream code.

    Reported by Emanuele Bizzarri <emabiz76@gmail.com> on the mailing list.
  * stun: Disable debug by default

    To match debug_enable in agent/debug.c. Debug can still be enabled by
    calling stun_debug_enable() or nice_debug_enable().

    Spotted on the mailing list by Tom Chen.
  * agent: Add assertions to check component state transitions are valid

    There is no point in the NiceComponents having a state machine if the
    state transition graph is not documented or enforced. Document and
    enforce it.

    http://phabricator.freedesktop.org/T120
  * ms-ice: ensure distinct candidate priority for multihomed hosts

    Summary:
    Offering multiple host candidates with equal priorities could lead to unpredictable candidate pair selection by our counterparty.

    Fixes call disconnection by MS Lync client after 30 seconds while VPN (2nd IP) was active on libnice host.

    Maniphest Tasks: T3324

    Reviewers: pwithnall

    Projects: #libnice

    Reviewed By: pwithnall

    Subscribers: pwithnall

    Differential Revision: https://phabricator.freedesktop.org/D234
  * candidate: use distinct priority also for non-MS compatibilities

    Maniphest Tasks: T3324

    Reviewers: pwithnall

    Projects: #libnice

    Reviewed By: pwithnall

    Differential Revision: https://phabricator.freedesktop.org/D239
  * conncheck: give temporary candidate_priority a base_addr

    Summary:
    Fixes "(nice_address_to_string): should not be reached" errors when calling nice_candidate_ms_ice_priority() because of invalid NiceAddress.

    Maniphest Tasks: T3324

    Reviewers: pwithnall

    Projects: #libnice

    Reviewed By: pwithnall

    Subscribers: pwithnall

    Differential Revision: https://phabricator.freedesktop.org/D238
  * ms-ice: ensure distinct candidate priority for multihomed hosts

    Summary:
    Offering multiple host candidates with equal priorities could lead to unpredictable candidate pair selection by our counterparty.

    Fixes call disconnection by MS Lync client after 30 seconds while VPN (2nd IP) was active on libnice host.

    Maniphest Tasks: T3324

    Reviewers: pwithnall

    Projects: #libnice

    Reviewed By: pwithnall

    Subscribers: pwithnall

    Differential Revision: https://phabricator.freedesktop.org/D234
  * discovery: assign candidate priority after base_addr is set

    Summary: So that we can take the base address into account in the calculation.

    Maniphest Tasks: T3324

    Reviewers: pwithnall

    Projects: #libnice

    Reviewed By: pwithnall

    Subscribers: pwithnall

    Differential Revision: https://phabricator.freedesktop.org/D235
  * ms-turn: don't wait for a reply to STUN_SEND request

    Maniphest Tasks: T126

    Reviewers: pwithnall

    Projects: #libnice

    Reviewed By: pwithnall

    Subscribers: pwithnall

    Differential Revision: https://phabricator.freedesktop.org/D223
  * ms-turn: don't wait for a reply to STUN_SEND request

    As per [MS-TURN] Section 2.2.1, TURN message type 0x0104 "Send request
    response" isn't supported and the TURN server MUST NOT send them. Thus,
    libnice should not remember Send requests in agent->sent_ids because
    without replies coming, the number of allowed pending transaction gets
    quickly exhausted, causing our data packets to be dropped until a
    request timeout frees some space in the queue.

    This behavior resulted in choppy reception of our audio on a Lync client
    when connected via Lync Edge (TURN) Server.

    Maniphest Tasks: T126

    Reviewers: pwithnall

    Projects: #libnice

    Reviewed By: pwithnall

    Subscribers: pwithnall

    Differential Revision: https://phabricator.freedesktop.org/D223
  * Creating TCP sockets with TCP_NODELAY option set to TRUE

    Summary:
    Disable Nagling for underlying TCP sockets used by libnice, because they
    are typically used for streaming applications, or for pseudo-TCP; the
    bandwidth in both cases is harmed by Nagling.

    Based on a patch by Vadim Genkin.

    Maniphest Tasks: T3317

    Reviewers: vadimgenkin, pwithnall

    Projects: #libnice

    Reviewed By: pwithnall

    Subscribers: pwithnall, vadimgenkin

    Differential Revision: https://phabricator.freedesktop.org/D230
  * Creating TCP sockets with TCP_NODELAY option set to TRUE

    Disable Nagling for underlying TCP sockets used by libnice, because they
    are typically used for streaming applications, or for pseudo-TCP; the
    bandwidth in both cases is harmed by Nagling.

    Based on a patch by Vadim Genkin.

    Maniphest Tasks: T3317

    Reviewers: pwithnall

    Projects: #libnice

    Subscribers: pwithnall, vadimgenkin

    Differential Revision: https://phabricator.freedesktop.org/D230
  * Fix agent leak in case component socket is reset remotely

    Summary: The patch fixes the issue where agent reference count is not properly decremented causing instance leak in cases where component's socket is reset remotely.

    Reviewers: #libnice, pwithnall

    Projects: #libnice

    Reviewed By: #libnice, pwithnall

    Subscribers: pwithnall, maximgolunov

    Differential Revision: https://phabricator.freedesktop.org/D236
  * Fix agent leak in case component socket is reset remotely

    Summary: The patch fixes the issue where agent reference count is not properly decremented causing instance leak in cases where component's socket is reset remotely.

    Reviewers: #libnice, pwithnall

    Projects: #libnice

    Reviewed By: #libnice, pwithnall

    Subscribers: pwithnall, maximgolunov

    Differential Revision: https://phabricator.freedesktop.org/D236
  * build: Update .gitignore

    Add stun/usages/.dirstamp.
  * build: Fix multiple definition of CLEANFILES

    It’s already defined in common.mk.
  * build: Add .arcconfig file

    This completes the transition to Phabricator; everyone should be using
    the same project settings now.

    https://phabricator.freedesktop.org/tag/libnice/
  * socket: Handle ECONNRESET as EWOULDBLOCK on Windows

    Summary:
    Some versions of Windows can return ECONNRESET for UDP recvmsg() calls
    if they would otherwise block. Hence, handle the two equivalently; this
    should not affect behaviour on Linux, which apparently does not return
    ECONNRESET for UDP recvmsg() calls at all.

    https://phabricator.freedesktop.org/T121

    Maniphest Tasks: T121

    Reviewers: ocrete

    Projects: #libnice

    Reviewed By: ocrete

    Subscribers: stwiname, felixSchl

    Differential Revision: https://phabricator.freedesktop.org/D227
  * socket: Close base socket for a TCP passive socket when closing parent

    Summary:
    Otherwise the base socket will leak. Spotted by Vadim Genkin.

    https://phabricator.freedesktop.org/T125

    Maniphest Tasks: T125

    Reviewers: ocrete

    Projects: #libnice

    Reviewed By: ocrete

    Subscribers: vadimgenkin

    Differential Revision: https://phabricator.freedesktop.org/D228
  * socket: Close base socket for a TCP passive socket when closing parent

    Otherwise the base socket will leak. Spotted by Vadim Genkin.

    https://phabricator.freedesktop.org/T125
  * agent: Remove unused inet_pton() function

    Summary:
    As spotted by Felix <felixschlitter@gmail.com>. This is a static
    function which is totally unused in this compilation unit and is causing
    build failures with `-Werror=unused-function`.

    Maniphest Tasks: T123

    Reviewers: felixSchl, ocrete

    Projects: #libnice

    Differential Revision: https://phabricator.freedesktop.org/D221
  * agent: Remove unused inet_pton() function

    As spotted by Felix <felixschlitter@gmail.com>. This is a static
    function which is totally unused in this compilation unit and is causing
    build failures with -Werror=unused-function.

    http://phabricator.freedesktop.org/T123
  * socket: Handle ECONNRESET as EWOULDBLOCK on Windows

    Some versions of Windows can return ECONNRESET for UDP recvmsg() calls
    if they would otherwise block. Hence, handle the two equivalently; this
    should not affect behaviour on Linux, which apparently does not return
    ECONNRESET for UDP recvmsg() calls at all.

    https://phabricator.freedesktop.org/T121
  * conncheck: set writable callback to socket from TCP active connect

    A new socket created in nice_tcp_active_socket_connect() should have its
    writable callback set, because it's possible for it to become a base
    socket of a peer reflexive candidate, if some is discovered by
    connection checks on that TCP active candidate.

    Previously, when such prflx candidate became selected, without write_cb
    on the socket the agent was never notified about it becoming writable
    again after the socket's buffer got filled up. This caused the data flow
    to hang permanently.

    Reviewed-by: Philip Withnall <philip.withnall@collabora.co.uk>
    Reviewed-by: Olivier Crête <olivier.crete@collabora.com>

    http://phabricator.freedesktop.org/T117
  * pseudotcp: Only define errnos on Windows if not already defined

    Recent versions of MinGW define at least ECONNABORTED and EAFNOSUPPORT,
    so only define the various socket errnos if they are not defined
    already.

    Based on a patch by Alexey Pawlow <alexey.pawlow@gmail.com> and Felix
    <felixschlitter@gmail.com>.

    Reviewed-by: Olivier Crete <olivier.crete@collabora.com>
    Reviewed-by: Felix Schlitter <felixschlitter@gmail.com>

    http://phabricator.freedesktop.org/T122
  * Use G_GSIZE_FORMAT instead of %zu

    The C runtime on windows does not implement a printf that understands
    %zu and other C99 format specifiers. Use G_GSIZE_FORMAT instead. This
    is further consistent with the rest of the code base that makes use of
    G_GSIZE_FORMAT throughout.

    https://github.com/libnice/libnice/pull/3
  * Split "verbose" on-every-packet messages to a verbose log

    This way, the regular log will only contain connection-time information.
  * stun: Remove annoying non-error on non-STUN packet
  * configure: Fix configure failure when building without gstreamer support

    Error introduced in 20ea22e0a11a9bdfe4d8125b68083249b694338a, resulting in a
    configure/build error when building without gstreamer:

    configure: error: conditional "HAVE_GST_CHECK" was never defined.
    Usually this means the macro was only invoked conditionally.

    https://bugs.freedesktop.org/show_bug.cgi?id=90801
  * build: Auto-generate win32 .def file from libnice.sym

    We’ve neglected to manually update this file once too often — it’s been
    out of date for important new symbols (for example,
    nice_agent_get_io_stream()) since at least 0.1.11.

    Since the format is a simple extension of libnice.sym, we might as well
    automatically generate it at dist time.
  * Removing no-op assignment
  * Do not compare scope for IPv6 address when scope is 0

    This caused issues with thinking local host candidates were peer-reflexive
    candidates because the nice_address_equal would fail since the scope
    would be 6 (or some other value) but locally created NiceAddress from
    a stun response would have the scope set to 0.
    We ignore the scope when comparing ipv6 candidates when scope is 0
    to avoid these kinds of issues.
    Thanks to ikonst_ for finding these issues
  * Do not update a remote candidate's type

    When adding a remote candidate, if it's the same ip:port, we should
    also check its type, otherwise it's a new candidate. We can't allow
    a candidate type to be updated. This caused issues to ikonst_ on IRC
    where for some reason a host candidate appeared as both host and prflx
    and the update caused a remote host candidate to be updated to prflx
    causing a crash when the sockptr was being accessed.
  * agent: Remove unnecessary NULL check

    With the changes in commit 483bdcf8, @name is now guaranteed to be
    non-NULL. Spotted by Coverity.

    CID: #109878
  * Version 0.1.13.1

-- Olivier Crête <olivier.crete@collabora.com>  Mon, 03 Apr 2017 14:28:22 -0400


 (0.1.13)

  * Version 0.1.13
  * examples: Use the correct g_io_channel_win32_new_fd() function
  * agent: Fix a utility function being defined unnecessarily

    sockaddr_to_string() is not needed on UNIX when compiling without
    HAVE_GETIFADDRS. This fixes a compiler warning in that case.
  * agent: Add a missing cast when compiling without HAVE_GETIFADDRS
  * agent: Move utility function outside #ifdef

    This fixes compilation when HAVE_GETIFADDRS is not define. Reported on
    the mailing list by Curieux Tres <trescurieux@yahoo.fr>.
  * stun: Add missing casts to unit tests

    This fixes some compiler warnings.
  * examples: Make them built on non-win32 with GLib < 2.36
  * Version 0.1.12.1

-- Olivier Crête <olivier.crete@collabora.com>  Tue, 28 Apr 2015 15:37:57 -0400


 (0.1.12)

  * Version 0.1.12
  * examples: Make them build and work on Windows
  * agent: Print valid string even with no local candidates
  * agent: Fix SDP line counting

    Fixes SDP parsing which I broke in commit 5972db04
  * nicesrc: Attach the receive callback in READY->PAUSED and detach in PAUSED->READY

    Receiving data before the element is ready to push them does not seem like the
    best idea.

    https://bugs.freedesktop.org/show_bug.cgi?id=89673
  * nicesrc: Keep the mutex locked whenever accessing the queue

    https://bugs.freedesktop.org/show_bug.cgi?id=89673
  * Version 0.1.11.1

-- Olivier Crête <olivier.crete@collabora.com>  Wed, 22 Apr 2015 21:11:17 -0400


 (0.1.11)

  * Version 0.1.11
  * stunagent: Initiliaze variable

    This remove a gcc warning
  * agent: Count m= files to match streams

    The only valid way to match streams is to count m= lines, see RFC 3264.

    https://bugs.freedesktop.org/show_bug.cgi?id=90019
  * agent: Warn on invalid media types for SDP

    Only 6 strings are valid.

    https://bugs.freedesktop.org/show_bug.cgi?id=90019
  * Prefix include guards

    The include file names are very generic, at least make
    the guards a bit less generic.

    https://bugs.freedesktop.org/show_bug.cgi?id=90013
  * configure.ac: Fix error when GUPnP is requested and not available

    https://bugs.freedesktop.org/show_bug.cgi?id=90010
  * gst: improve error when agent/stream/component is unset

    https://bugs.freedesktop.org/show_bug.cgi?id=89962
  * agent: Improve nice_agent_attach_recv and nice_agent_recv* docs

    Explain that either having an I/O callback or calling nice_agent_recv*
    is essential for ICE connection check to succeed.

    https://bugs.freedesktop.org/show_bug.cgi?id=89849
  * stun: Add missing format attributes for va_list printf functions

    As detected by GCC 4.9.
  * agent: Add API to set local credentials

    Adds new API: nice_agent_set_local_credentials().
  * agent: Whitespace fixes
  * configure: On Solaris, library is libnsl, not libnls

    https://bugs.freedesktop.org/show_bug.cgi?id=73042
  * configure: Disable static by default, and add win32 DLL support

    https://bugs.freedesktop.org/show_bug.cgi?id=85962
  * nicesink: Add test for buffer list support

    https://bugs.freedesktop.org/show_bug.cgi?id=89609
  * nicesink: Add support for render buffer_list

    Also memory copies are reduced if buffers are fragmented

    https://bugs.freedesktop.org/show_bug.cgi?id=89609
  * nicesrc: Clear the output buffer queue when shutting down and disposing

    https://bugs.freedesktop.org/show_bug.cgi?id=89673
  * agent: Add missing preconditions to public API

    Makes things a little bit safer to abuse.
  * agent: Fix documentation to use ‘nul-terminated’ for strings

    NULL is ((gpointer) 0). nul is '\0'. Arrays can be NULL terminated.
    Strings can be nul terminated.
  * stun: Fix documentation to use ‘nul-terminated’ for strings

    NULL is ((gpointer) 0). nul is '\0'. Arrays can be NULL terminated.
    Strings can be nul terminated.
  * win32: Update README
  * stun: Use dynamic array instead of stack allocated array

    Dynamic on-stack arrays are not supported in Visual Studio.

    This has the downside of introducing an extra memory allocation into
    libstun, but it’s on a debug path so should be harmless.
  * win32: Update file list in Visual Studio project
  * win32: Remove outdated DLL files
  * stun: Use sprintf() instead of snprintf() to support VS 2010

    Visual Studio 2010 still doesn’t support C99, and snprintf() is a C99
    function, so compilation fails with:
    error: C3861: 'snprintf': identifier not found

    Use sprintf() instead, which is C89 and thus supported. This does not
    make the code unsafe, as the format specifier is constrained to two
    characters (+ trailing nul), which are guaranteed to fit in the array
    bounds.

    Reported on the mailing list:
    http://lists.freedesktop.org/archives/nice/2014-October/000978.html
  * Remove duplicate ips from nice_interfaces
    OpenVPN creates a tun interface having the same IP assigned twice like:

    9: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc ...100
    link/none
    inet 10.222.111.10 peer 10.222.111.9/32 brd 10.222.111.10 scope global tun0
    valid_lft forever preferred_lft forever
    inet 10.222.111.10/32 brd 10.222.111.10 scope global tun0
    valid_lft forever preferred_lft forever

    This interface would generate two identical host candidates with the same value
    of foundation.
  * Version 0.1.10.1

-- Olivier Crête <olivier.crete@collabora.com>  Mon, 20 Apr 2015 17:24:08 -0400


 (0.1.10)

  * Version 0.1.10
  * nicesink: unblock pending write on component change

    When a nicesink switches to a different component, we should unblock any
    pending write waiting in gst_nice_sink_render() for writable_cond being
    signalled because if the new transport already is writable, we'll never
    get notified about the condition and thus nicesink will wait forever.

    That way, either the pending data are immediately sent or the nicesink
    blocks again until the transport becomes writable.
  * configure: Add "subdir-objects" automake option

    Automake now warns that it will be the only behavior
    in the future. So quell the warning by adding it.
  * Version 0.1.9.1

-- Olivier Crête <olivier.crete@collabora.com>  Wed, 28 Jan 2015 22:35:09 -0500


 (0.1.9)

  * Version 0.1.9
  * Only change the receiving nicesock for udp-turn for ice-tcp

    The code was in the wrong spot, for OC2007, we need to fix the
    nicesock used only in the case of udp-turn-over-tcp for OC2007
    compatibility mode. With the current code, it was thinking that
    the data came from TURN for every udp packet.
    This should hopefully fix : https://github.com/EricssonResearch/openwebrtc/issues/85
  * docs: Enable documentation checks during `make check` by default

    Now that they pass, we should endeavour to ensure they continue to pass.
  * docs: Add 0.1.8 API to the documentation index

    This should have been included before. This fixes `make check` in docs/.
  * docs: Add various missing documentation comments and update sections.txt

    This straightens out the last few bits of the documentation and almost
    allows `make check` to pass in docs/.
  * docs: Inform gtk-doc of the libnice namespace

    This allows it to order the index a little better.
  * docs: Use gtk-doc no-tmpl mode

    Templated mode has been deprecated for a long time and will be removed
    in future versions of gtk-doc. Switch to no-tmpl mode for faster
    documentation builds and future-proofness.

    This does not bump our gtk-doc dependency, since gtk-doc 1.9 supported
    no-tmpl mode.
  * docs: Switch from gtk-doc SGML mode to XML mode

    We already used XML everywhere; just formally switch to XML mode and
    eliminate the last few traces of SGML.
  * agent: Document G_MESSAGES_DEBUG and NICE_DEBUG

    As requested on the mailing list, expand the documentation for
    nice_debug_enable() to mention them.
  * agent: Handle EWOULDBLOCK when transmitting pseudo-TCP segments

    The pseudo-TCP code previously didn’t handle EAGAIN or EWOULDBLOCK
    errors from the low-level NiceSocket code. This caused pseudo-TCP
    connections to be dropped if the transmitting socket ever filled up,
    which could cause problems on high bandwidth connections.

    Fix the issue by effectively dropping the packet on EWOULDBLOCK. This
    will eventually get picked up by the pseudo-TCP recovery mechanism,
    retransmitting the packet and throttling the sender. This should
    hopefully reduce the system resource usage which caused EWOULDBLOCK in
    the first place.

    Spotted and debugged by Radosław Kołodziejczyk
    <radek.kolodziejczyk@gmail.com>.

    https://bugs.freedesktop.org/show_bug.cgi?id=87344
  * pseudotcp: Do roll-over safe assertion

    In case of a roll-over, only the difference matters.
  * agent: Add debug output for lifetime of Components and Streams
  * tests: Use G_SOURCE_[CONTINUE|REMOVE] instead of booleans

    Makes the test code a little clearer. Introduces no functional changes.
  * tests: Fix a memory leak in test-send-recv

    If n_messages ≠ n_valid_messages.
  * Add ability to build static GST plugins

    Note that this only works for 1.0 plugin.

    https://bugs.freedesktop.org/show_bug.cgi?id=85929
  * agent: Expand simple example in documentation to mention GMainContext

    wrt the ML thread:
    http://lists.freedesktop.org/archives/nice/2014-October/000981.html
  * agent: Close pseudo-TCP socket earlier in component_close()

    This tries to mitigate the race condition between finishing the TCP FIN
    handshake and closing the underlying sockets, but it’s impossible to
    mitigate properly without API changes. See the comment.
  * stun: Rename a symbol to avoid a naming clash with OpenSSL

    The symbol is not exported, but nevertheless leaks in the static version
    of libnice, due to limitations on symbol visibilities with static
    libraries. OpenSSL has a symbol named RAND_bytes(), which ours clashes
    with if the two are linked together statically.

    Avoid this by prefixing ours with ‘nice_’.
  * Fix documentation relating to how remote crendentials should be set for new ICE format
  * agent: ignore externally set peer-reflexive candidates

    All discovered peer-reflexive candidates should be added internally in
    conncheck.c and should have the sockptr set. We ignore any prflx
    candidates added by an external application because their NULL sockptr
    could cause a crash in conn_check_send().
  * Version 0.1.8.1

-- Olivier Crête <olivier.crete@collabora.com>  Wed, 28 Jan 2015 21:44:04 -0500


 (0.1.8)

  * Version 0.1.8
  * agent: Remove extra post condition

    It prevent the GError from happening
  * udp-turn: Don't dereference priv before check that it's valid
  * agent: Pass all packets that are not acceptable STUN packets to the application

    We attempted to not pass through some packets that looked like
    valid STUN but were ot acceptable to us, but that dropped some application
    packets.
  * agent: Re-emit gathering done after a new relay has been set

    If the stream was ever gathering and a new relay has been set,
    then re-emit the candidate=gathering-done signal
  * pseudotcp: Print unsigned int with %u not %d
  * agent: Add function to retrieve the current component state
  * agent: Make the stun-pacing-timer app configurable

    There is no reason to only allow modifying it in the new().
  * pseudotcp: Set default RTO to 1 second

    The newer RFC 6298 recommends 1 second instead of 3.
  * conncheck: Computer STUN retransmission timeout (RTO) dynamically

    This is how it is specified in RFC 5245 section 16
  * discovery: Remove extra \n in g_debug()
  * agent: Only add pairs once on gathering done

    Also don't try to re-add pairs that already have been added
  * conncheck: Insert the candidates sorted after setting the priority
  * conncheck: Insert peer reflexive pair sorted

    The rest of the list is sorted, but this was just appended, making it likely
    to be dropped if the list grows too long.
  * conncheck: Don't remove elements in the conncheck list while iterating it

    priv_limit_conn_check_list_size() would remove elemtns from the conncheck_list
    while the calling functions were iterating it. Now instead just mark them as
    cancelled. Then later, at the outer function, free all cancelled elements to
    prevent the list from growing out of bounds.
  * agent: Avoid leaking UPnP mappings between streams

    Clean up the UPnP mappings of each stream when closing it
  * agent: Avoid restarting the GUPnP client on every gather

    This would cause mappings to be dropped on every new gather, which is bad!
    Instead, keep the same one with the mappings, and just drop the timer to ignore
    new discovered mappings afterwards.
  * agent: Ignore UPnP mappings after the UPnP discovery has finished
  * component: On ICE restart reset selected pair priority to 0

    This is to ensure that the result of the new negotiation will always
    have priority.
  * agent: Add some preconditions to public API

    To try and avoid NULL NiceCandidates entering our internal state.
  * build: Update .gitignore
  * outputstream: Fix double unref
  * agent: Remove socket source on HUP
  * agent: Declare the stream to be CONNECTED only if a pair is selected

    Don't change the state if no pair is selected. Otherwise we get
    a component that claims to be CONNECTED but has no selected pair.
    Also, set the selected pair before announcing the state change.
  * nice.pc: Include ${includedir} directly

    It doesn't make sense to tell applications to include <agent.h>,
    including <nice/agent.h> is much safer. So tell the applications
    to use the includedir directly.
  * agent: Document interaction between closing and removing streams

    GIOStream and nice_agent_remove_stream() interact slightly subtly when
    closing down the stream.

    See: https://bugzilla.gnome.org/show_bug.cgi?id=735754
  * tests: Add more helgrind suppressions
  * agent: Delay some assignments until the agent is locked

    This makes helgrind slightly happier.
  * agent: Warn if a Component is freed without first being closed
  * agent: Close Streams before freeing them

    This could result in leaking the stream’s un-closed state otherwise, in
    any case where a NiceAgent is finalised without
    nice_agent_remove_stream() being called on all its streams.
  * tests: Add a Valgrind suppression file

    To be used with `make check-valgrind`.
  * tests: Fix various memory leaks in the unit tests

    The theory being that if we can get check-valgrind to pass, we could
    acutally use it to find more memory leaks and other errors in the agent.
  * agent: Check STUN buffer is non-NULL before getting its message ID

    This should fix a crash, as detected by Valgrind:
    ==28354== Invalid read of size 2
    ==28354==    at 0x4C2B5B0: memcpy@@GLIBC_2.14 (in
    /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
    ==28354==    by 0x50C17E2: stun_message_id (stunmessage.c:658)
    ==28354==    by 0x509E4E7: candidate_check_pair_fail (conncheck.c:254)
    ==28354==    by 0x50A4EDB: conn_check_prune_socket (conncheck.c:3145)
    ==28354==    by 0x509B6F8: component_io_cb (agent.c:3951)
  * agent: Fix a leak of a GCancellable and its GSource

    The GSource holds a reference to the GCancellable, so needs to be
    explicitly removed from the GMainContext when it’s finised with.
  * agent: Fix a minor leak in an error handling path
  * tests: Move a closure from the heap to the stack

    There is no need for this to be heap-allocated.
  * conncheck: Don't use CandidateRefresh after freeing it
  * socket: Fix a leak on the slow TURN packet handling path
  * agent: Eliminate a memset() for local variable initialisation

    Stack variables can be initialised to zero by explicit assignment.

    This introduces no functional changes.
  * agent: Use g_slist_free_full() to reduce code

    This introduces no functional changes.
  * agent: Add some preconditions to internal API

    To try and avoid NULL NiceCandidates entering our internal state.
  * agent: Add some preconditions to public API

    To try and avoid NULL NiceCandidates entering our internal state.
  * agent: Clear GSource timeout also for GUPnP timeout

    Fix regressions introduced by the following patch:
    Clear existing GSource timeouts before adding new ones
  * agent: Drop valid but unmatched STUN packets

    Rather than passing them through to the application. Invalid STUN
    packets are still passed through, but it causes unnecessary noise and
    corruption for higher-level applications to receive STUN packets they
    weren’t expecting.

    This is permitted by RFC 5389, §7.3.0:
    If any errors are detected, the message is silently discarded.
    In the case when STUN is being multiplexed with another protocol,
    an error may indicate that this is not really a STUN message; in
    this case, the agent should try to parse the message as a different
    protocol.
    where I interpret ‘error’ to mean ‘validation error’ rather than (e.g.)
    ‘unrecognised attribute’ or ‘unmatched response’ where the STUN packet
    is otherwise perfectly formed.
  * agent: Remove dangling pointers on NiceSocket destruction

    If a NiceSocket is destroyed, various pointers are currently left
    dangling to it in the conncheck state. These can cause crashes if (for
    example) a CandidateCheckPair with such a dangling pointer is then used;
    the GSocket methods will fail.

    Fix this by explicitly removing the socket and all NiceCandidates which
    wrap it from various areas of the state.
  * agent: Factor out state transition to FAILED for CandidateCheckPairs

    This introduces no functional changes.
  * agent: Factor out free function for IncomingCheck
  * agent: Improve comments for container element types

    To allow enhanced grepping for what structs point to other structs.
  * agent: Clear existing GSource timeouts before adding new ones

    Modify agent_timeout_add_with_context() to force destroying and freeing
    of an existing GSource before overwriting it with a new one (probably
    with an updated timeout period).

    This fixes a case in priv_map_reply_to_relay_refresh() where the TURN
    candidate refresh timer was being overwritten with a new one, without
    the old one being destroyed. This lead to two timeouts existing, only
    one of which would be destroyed when the CandidateRefresh struct was
    freed, leaking the other one (in the main context) and allowing it to be
    later dispatched with a dangling CandidateRefresh pointer.

    The modification to agent_timeout_add_with_context() should prevent this
    happening in new code in future.
  * agent: Add names to timer GSources

    Modify the agent_timeout_add_with_context() utility function to
    automatically add names to the timer GSources it creates. This makes
    them a little easier to identify when debugging.
  * socket: Return early from socket functions if the socket is closed

    Explicitly check whether the socket is closed (universally represented
    as sock->priv == NULL) before doing anything else in the socket methods.
    This should safely return from unusual situations where the socket has
    been closed and part-destroyed but still ends up having send() or recv()
    called on it.
  * socket: Fix return values of socket_send_messages in socks5.c

    The return value is the number of messages sent, or -1 on error — not a
    boolean.
  * stun: Make a warning message more prominent

    Since dropping a STUN message due to having insufficient buffer space in
    libstun can cause ICE negotiation to fail. So we want it to be more
    obvious in the logs.
  * agent: Put one StunAgent per Component

    Otherwise we risk running out of space in the space limited saved ids
    list. So the easiest way to do that is to put one StunAgent in each
    component. It may be advisable to just give up on not allocating
    memory inside libstun and just use a regular hash table in there
    instead.
  * conncheck: Fetch stream once instead of twice
  * agent: Agent can reach EOS after having received something

    The agent can reach EOS after performing one or more non-empty reads in
    its read loop, and then hitting EOS on the underlying stream. That means
    reached_eos is TRUE, but n_valid_messages is non-zero.

    Weaken the postcondition to reflect this.
  * agent: Fix locking when calling component_free()

    As mentioned in the previous commit message, component_free() requires
    the agent lock to be released, but component_close() requires it to be
    held. Fix the locking in nice_agent_remove_stream() to do that.
  * agent: Split component_free() into component_[close|free]()

    Closing a component and freeing it are slightly conceptually different.
    As it happens, freeing it can result in the disposal of the component's
    NiceIOStream, which requires the agent lock to be released — but closing
    the rest of the Component requires the agent lock to be held. Splitting
    the function up simplifies locking handling in other parts of the code
    (see next commit).
  * agent: Fix initialisation of the agent mutex for old GLib versions

    The mutex is now non-recursive. This is left over from commit 1deee693.
  * tests: Fix test-build-io-stream for EOS changes

    From commit 7b6935c66738d855c84fba291d47ece6ce1c43e2.
  * agent: Add missing bracket

    Bad merge in commit 67179ffd8fb1a39936c54ce611e8deeec8705ac3.
  * agent: Add missing stream-closed checks for pseudo-TCP

    This got lost in rebasing the FIN–ACK work. component->tcp is now only
    NULL before the pseudo-TCP stream is initially created — afterwards, it
    is always non-NULL, but pseudo_tcp_stream_is_closed() returns TRUE if
    the stream has closed (gracefully or on errors). This allows
    differentiation between the states: TCP support was never initialised;
    and TCP support was initialised but is now closed.
  * agent: Return 0 on EOS from nice_input_stream_read()

    We should return 0 instead of G_IO_ERROR_CLOSED for consistency with
    recv() and read().
  * pseudotcp: Ensure shutdown member is not overwritten

    Add a few safeguards to ensure that once priv->shutdown is set, it is
    not overwritten with a different value.
  * pseudotcp: Fix EOS return from recv() in non-FIN–ACK mode

    Change pseudo_tcp_socket_recv() to return 0 if in non-FIN–ACK mode and
    the socket has been shut down. This makes the behaviour of FIN–ACK and
    non-FIN–ACK modes consistent.

    This is a behaviour change from before the introduction of FIN–ACK mode
    — previously, pseudo_tcp_socket_recv() would return -1 and set the
    ENOTCONN error if called after the socket had been shut down (i.e. after
    pseudo_tcp_socket_get_next_clock() had returned FALSE). The new
    behaviour will hopefully not break anything.
  * pseudotcp: Ensure socket is closed after shutdown in non-FIN–ACK mode

    If the socket is closed (with pseudo_tcp_socket_close()) with FIN–ACK
    unsupported, it should transition to the CLOSED state when
    pseudo_tcp_socket_get_next_clock() returns FALSE (as that’s the
    old-style indication that the socket has closed).

    This is a behaviour change from before the introduction of FIN–ACK:
    previously, the socket would stay in the ESTABLISHED state. However,
    this should not have been easily detectable by consumers of the API,
    as pseudo_tcp_socket_is_closed() did not exist then.
  * pseudotcp: Add a PseudoTcpSocket:support-fin-ack property

    This allows FIN–ACK support to be disabled entirely. This is mostly for
    testing purposes, since TCP_OPT_FIN_ACK is negotiated when establishing
    the connection, and is disabled if the other side doesn’t support it.

    This includes an interoperability test.
  * tests: Fix race conditions in test-thread

    As found by tsan.
  * agent: Close pseudo-TCP streams when closing G[IO|Input|Output]Streams

    This means that users of the Nice[Input|Output|IO]Stream API can easily
    close TCP connections without having to hack around with libnice
    internals.
  * docs: Ignore some undocumentable/non-public API
  * pseudotcp: Add pseudo_tcp_socket_shutdown() support

    This is analogous to the UNIX shutdown() function, allowing either or
    both sides of a pseudo-TCP connection to be shut down.
  * pseudotcp: Shorten the TIME-WAIT state timeout dramatically

    The TIME-WAIT timeout is typically 2×MSL (on the order of 60 seconds),
    which is needed to be able to reject delayed segments from closed
    conversations. However, the underlying socket layer for pseudo-TCP takes
    care of channel numbering so that segments don’t end up being sent to
    closed conversations. Therefore, the TIME-WAIT state can be eliminated
    (by shortening the timeout). The code for the state is kept around so
    that the pseudo-TCP implementation matches the TCP specification
    correctly, which will simplify maintenance.
  * tests: Add a new segment-by-segment test framework for pseudo-TCP

    This explicitly removes all timers and main loop considerations from the
    pseudo-TCP testing, which considerably simplifies arranging packet swaps
    and mistimings for testing purposes.

    This test suite includes a few tests for the FIN–ACK support.
  * pseudotcp: Add optional FIN–ACK and RST support

    In order to detect cases where the peer closes its connection without an
    explicit in-band close message (e.g. in protocols such as Telnet where
    there is none), pseudo-TCP needs to grow support for a shutdown
    handshake, following the TCP FIN–ACK specification. Arguably it should
    have had this all along, but Jingle apparently doesn’t need it.

    This adds support for FIN–ACK to the pseudo-TCP implementation. It is
    backwards-compatible, only being used if the TCP_OPT_FIN_ACK option is
    specified in the SYN segment.

    If enabled, full-duplex closes are supported, and the standard method
    for notifying a peer of the other end closing its connection (returning
    0 from recv()) is used.

    Also allow rapidly tearing down a connection, discarding unsent and
    unreceived data, by sending an RST segment. This preserves the ability to
    do a forced socket closure with pseudo_tcp_socket_close(sock, TRUE).

    It also permits graceful socket shutdown in the case where the final ACK
    is lost, and one peer gets stuck in the LAST-ACK state: that peer will
    eventually re-transmit its FIN segment. The other peer, in the CLOSED
    state, will respond with a RST segment, and the first peer will then
    reach CLOSED.

    References (most useful first):
    • http://tools.ietf.org/html/rfc793#section-3.5
    • http://tools.ietf.org/html/rfc1122#page-87
    • http://vincent.bernat.im/en/blog/2014-tcp-time-wait-state-linux.html
    • http://tools.ietf.org/html/rfc675
    Diagram:
    •
    http://en.wikipedia.org/wiki/Transmission_Control_Protocol#mediaviewer/File:TCP_CLOSE.svg
  * agent: Handle EPIPE from pseudo_tcp_socket_send()

    As with send(), pseudo_tcp_socket_send() may return EPIPE if the local
    side of the connection has been closed using close() or shutdown(). It
    currently doesn’t, but will do once pseudo-TCP FIN–ACK support has been
    implemented.
  * agent: Don’t clear the PseudoTcpSocket on error

    Instead, keep the closed object around. This allows differentiation
    between the states: TCP support was never initialised; and TCP support
    was initialised but is now closed.
  * pseudotcp: Fix a typo in some documentation
  * pseudotcp: Factor out state change functions for ESTABLISHED and CLOSED

    Both state changes need some follow-up code executed immediately after,
    which was duplicated in a number of places. Factor that out. This
    introduces no behavioural changes.
  * pseudotcp: Split out some state checks

    This clarifies the code a little, and does not introduce functional
    changes.
  * pseudotcp: Tidy up buffer size handling in queue_connect_message()

    This removes some hard-coded offsets. It does not introduce any
    functional changes.
  * pseudotcp: Store segment flags in SSegment

    Rather than reconstructing the flag state when sending a segment, just
    store the flags explicitly. This does not introduce any behavioural
    changes.
  * pseudotcp: Allow the ‘current’ time to be set

    This is needed for the upcoming new test suite for pseudo-TCP. It
    shouldn’t be used in normal code — only in tests.

    Ideally, the pseudo-TCP code should originally never have called
    g_get_monotonic_time() itself, and should have always taken a time
    parameter from the caller; then it would be more testable.
    Unfortunately, API guarantees prevent this from being changed now.
  * pseudotcp: Add socket state to debug messages

    This should make debugging a little clearer.
  * pseudotcp: Put TCP flags in an enum

    The on-the-wire flags (FIN, RST, ACK, etc.) should be in an enum to
    clarify the code a little. This introduces no functional changes.
  * pseudotcp: Put TCP options in an enum

    This tidies things up a little. No functional changes.
  * tests: Improve debug output of pseudotcp tests slightly
  * tests: Add setlocale() call to test-pseudotcp.c

    This ensures UTF-8 output is printed correctly.
  * tests: Add a logging domain for the unit tests

    This clarifies the log output a little.
  * socket: Gracefully return from send() if the socket is closed
  * agent: Ensure Component.selected_pair is cleaned when freeing candidates

    When freeing candidates (component_free_socket_sources()), the sockets
    which back Component.selected_pair.[local|remote] are closed and their
    addresses destroyed. Component.selected_pair should be cleared as well
    to allow calling code to condition on (Component.selected_pair == NULL)
    to see if it’s invalid.
  * agent: Factor out common clean up code in Component

    This introduces no functional changes.
  * agent: Tidy up a few variable references

    This simplifies the code a little. No functional changes.
  * agent: Rearchitect message handling to use GErrors for EWOULDBLOCK

    Previously, an EWOULDBLOCK return value from the low-level socket calls
    (including PseudoTcpSocket) would be represented by a zero number of
    bytes (or messages) read by the agent. This conflicts with the use of
    zero to represent end of stream (EOS) for pseudo-TCP connections, where
    the sender has indicated that they are not going to send any more bytes.

    So, now use GError (G_IO_ERROR_WOULD_BLOCK) to represent EWOULDBLOCK,
    just like the GSocket functions. Zero is reserved exclusively for if:
    • the number of requested bytes/messages is zero; or
    • reliable mode is enabled and EOS is reached.

    This does change the documented behaviour of the NiceAgent send/recv
    API, but only by allowing a new behaviour (returning zero) rather than
    by changing an existing one, so it should be OK.
  * pseudotcp: Fix the type of an argument to apply_option()

    We’re dealing with unsigned bytes here, not chars. This will become
    important when adding new TcpOptions numbered from 254 downwards.
  * pseudotcp: Add pseudo_tcp_socket_is_closed_remotely()

    New convenience API to check if the remote end of a pseudo-TCP socket
    has been closed (but not necessarily the local end). This is currently a
    stub implementation, but will be used fully once pseudo-TCP FIN–ACK
    support lands.
  * pseudotcp: Add pseudo_tcp_socket_is_closed()

    New convenience API to check if the socket is in state TCP_CLOSED.
  * pseudotcp: Factor out state changes and validate them

    By validating state changes, we can verify that the implementation
    conforms to the RFC 793 state machine at runtime. This will become more
    important when FIN–ACK support is added, adding more states.
  * agent: Factor out peer reflexive priority calculation
  * agent: Add "keepalive-conncheck" property to make keepalives be conncheck

    This is to use keepalives to check if the connection is still ongoing. If
    they don't get a reply, then we can assume that the connection has died.

    This needs to not happen in the case of ICE-TCP.
  * nicesink: Check for signal present before removing it

    The signal is only connected when setting an agent, if no agent
    has been set, there will be no signal.
  * stun: Fix definition of ssize_t on Windows

    ssize_t should definitely be signed, not unsigned.
  * build: Add README.win32 to EXTRA_DIST

    As spotted by B Andrei on the mailing list.
  * socket: Remove dead code

    At that point, (len > 0), since there are conditions above handling the
    (len == 0) and (len < 0) cases, both of which break from the loop.

    Coverity issue: #29325
  * nicesink: Block until component is writable if in reliable mode
  * Fix bug in the ice-tcp unit test
  * conncheck: Go to connected only if the component was connected or ready

    Otherwise, it claimed it was connected when the component was in the FAILED
    state, when it should really have gone to connecting.
  * outputstream: Fix ref leak
  * component: Fix ref leak
  * agent: Expand documentation for nice_interfaces_get_ip_for_interface()
  * Set candidate pairs from discovered peer-reflx tcp-passive candidates into DISCOVERED state so it doesn't fail if the other side doesn't reply to our binding request
  * Fix retransmission timers for reliable sockets
    The retransmissions would timeout after 600ms which caused the TCP connections
    to timeout before it's able to connect. TCP sockets need to timeout
    after 8 seconds instead.
  * Revert "agent: Separate reliability from ice-tcp vs ice-udp"

    This reverts commit 18e5dff4f25b12522e857c13d3ef3bdb40212246.
  * Change test-icetcp to be more robust against ready->connected->ready state changes
  * Cast the current time for pseudotcp timeout calculation into guint32
    The pseudo_tcp_socket_get_next_clock returns the next clock in terms
    of g_get_monotonic_clock / 1000, however, it gets cropped to guint32.
    When we try to find the interval, by substracting the current time as
    a guint64, it will return a negative value, which prevents an integer
    overflow by setting the timeout to 0. This causes the notify_clock
    timeout to be called all the time by the mainloop, taking 100% of CPU.
  * agent: Print libnice debug messages when setting G_MESSAGES_DEBUG appropriately

    This way all the debug can be controlled from one place.

    Also disable -Wsuggest-attribute=format with -Werror because gcc 4.8.3
    erroneously suggested it.
  * pseudotcp: Use different g_log domain for pseudotcp

    Also add one for pseudotcp-verbose
  * debug: Make debug messages ready for g_log()

    Send thing one line at a time, so no explicit \n

    Also make it possible to set a log handler explicitly
  * Fix timer for TURN CreatePermission.
    The TURN CreatePermission is a list of multiple permissions but the timer
    is created and overwrites the old one, so some of them don't get triggered
    at the right time.
    This patch was suggested by Livio Madaro. We create a timer for the minimal
    amount of time, and trigger the retransmissions on the permissions that
    timed out, then reschedule for the next retransmissions.
  * Check error code 438 for TURN Nonce expired
  * Do not access component if it was destroyed when calling the io callback
    When calling component_emit_io_callback, the agent mutex will be unlocked before
    the callback is called, this can cause another thread to remove the
    stream and thus destroying the component. We must verify that the
    source was not destroyed after calling component_emit_io_callback
    and avoid accessing the component in that case.
    Bug report by Stephan Thamm in the mailing list.
  * Use sockaddr for stun_usage_bind_process in unit test
  * agent: Use AC_CHECK_HEADERS to check for netdb.h

    Rather than assuming it is not available on Windows.
  * interfaces: Add missing brackets
  * agent: Fix infinite loop when the peer closes a TCP connection remotely
  * tcp-passive: Relay the tcp writable callback up

    Otherwise, the caller gets a callback from an unexpected source.
  * agent: Fix an old-style function definition in the Windows code
  * agent: Add debugging when parsing addresses
  * agent: Switch to GetAdapterAddresses() to find local IPs on Windows

    The old GetIpAddrTable() function only returned IPv4 addresses. In order
    to support IPv6 addresses, we need to use GetAdapterAddresses(), which
    is available from Windows XP or Server 2003 onwards.
  * agent: Use getaddrinfo() to parse addresses from strings

    Rather than using inet_pton(), which doesn’t support IPv6 link-local
    scope IDs, use getaddrinfo(). This is supported on all platforms
    (POSIX.1-2001, and Windows winsock).
  * agent: Use getnameinfo() instead of inet_ntop() to stringify addresses

    inet_ntop() drops IPv6 link-local scope IDs on the floor, which means
    libnice doesn’t generate any IPv6 candidates for link-local connections,
    meaning that it will theoretically fail to negotiate a connection on an
    IPv6-only network where the two peers are local.

    Fix that by using getnameinfo() to convert sockaddrs to strings, which
    preserves the scope ID.

    There are no portability concerns — getnameinfo() is POSIX.1-2001, and
    isn’t used on Windows (although it is supported, surprisingly).
  * outputstream: Always try sending

    Otherwise we're never woken up when it's again possible to send
  * outputstream: Fix reference leak
  * agent: Factor our writability signal
  * introspection: Rename gir file to match library version
  * socket: Avoid g_main_context_ref(NULL) calls using the default context

    If (agent->main_context == NULL) the sockets are created with a NULL
    main context, which they then try to ref. That does not end well.
  * examples: Remove unnecessary dynamic type casts

    We know the agent is a GObject — there is no need to check it at
    runtime. This also improves Tartan’s static analysis of signal
    connections.
  * agent: Add a missing precondition assertion

    Spotted by Tartan.
  * docs: Remove some private symbols from the documentation sections file
  * agent: Add a missing field documentation comment
  * agent: Fix typos in documentation
  * build: Add the lcov directory to .gitignore
  * agent: Add missing #includes to candidate.h
  * agent: Mark nice_agent_attach_recv() as (skip)

    This removes it from the introspected bindings. It is unintrospectable
    because it specifies a callback (@func) which persists after the
    nice_agent_attach_recv() call returns. This is only supported by
    gobject-introspection if a full closure with GDestroyNotify callback for
    the user is passed in too.
  * agent: Fix a typo in a documentation comment
  * agent: Add missing (element-type) annotations to gtk-doc comments

    These make the GSLists usable from introspection.
  * agent: Fix badly formatted gtk-doc comments
  * build: Add GObject introspection support

    This bumps our autoconf requirement to 2.62 (from 2.59c) and disables
    automake portability warnings.

    It does not introduce a hard dependency on gobject-introspection; but if
    available, it requires version 1.30.0. Support can be enabled with
    --enable-introspection, and is required to make distcheck.

    The generated introspection file has not been checked thoroughly, and
    may expose internal symbols. A lot of new annotations are needed to make
    many of the symbols usable.
  * nice: Expose UPnP support in nice.pc.in

    It might be useful for dependent packages to check whether libnice was
    compiled with UPnP support, so expose that as a variable in the
    pkg-config file, set to ‘true’ if supported, and the empty string
    otherwise.
  * nice: Auto-substitute pkg-config requirements in nice.pc.in

    The requirements in the pkg-config file were outdated and incomplete. It
    makes a lot more sense to automatically substitute them in from the
    checks in configure.ac.
  * interfaces: License was meant to be the same as the rest
  * Require automake 1.12

    We use macros from 1.12 anyway.
  * agent: Separate reliability from ice-tcp vs ice-udp

    We want ICE-TCP to not have reliable behavior unless the agent
    is reliable otherwise it will confuse existing VoIP applications.
  * agent: Only deal with pseudotcp if actually using PseudoTCP

    PseudoTCP is only used if both the pseudotcp socket exists and the
    underlying transport is unreliable.
  * discovery: Make it less likely that a locally assigned remote foundation clashes with the remote one.
  * discovery: Compare turn server when assigning foundations

    The RFC says that "for reflexive and relayed candidates, the STUN or TURN servers
    used to obtain them have the same IP address."
  * discovery: Use nice_address_equal_no_port()
  * discovery: Compare tranports (TCP vs UDP) while assigning remote foundations
  * address: add nice_address_equal_no_port() to compare addresses ignoring ports
  * agent: Add new-selected-pair-full

    This signal include the whole candidate as the foundation is ambiguous.
  * signal
  * TODO: Update to match current state
  * gitignore: Add test-driver from recent automake
  * agent: Add new-candidate-full and new-remote-candidate-full signals

    These signals include the actual candidate instead of just the foundation
    which is not unique.
  * candidate: Add Boxed type
  * stunmessage: Accept NULL terminated buffers for fast speed validation
  * discovery: Differentiate socket creation failure from other errors

    If the socket can't be bound, then trying another port makes sense,
    otherwise it doesn't.
  * Add TCP server reflexive candidates

    For TCP server reflexive candidates, since STUN can't work on TCP
    candidates, we will use STUN on UDP or TCP and once we get an
    externally mapped address, we will create a server reflexive candidate
    for all local TCP candidates that share the same base address, and use
    the same mapped port as the base addresse's port.
  * Signal reliable-transport-writable when ice-tcp socket is writable
  * Add a nice_socket_can_send and nice_socket_set_writable_callback APIs
  * Call g_socket_check_connect_result before g_socket_is_connected

    If we don't call check_connect_result on an outbound connection,
    then is_connected will always return FALSE. That's why we check
    both conditions to make sure g_socket_is_connected returns the
    correct result, otherwise we end up closing valid connections
  * Bind to a local random port for tcp-bsd
  * Change argument names for tcp-bsd
  * Set local address of TCP-BSD socket
  * nice_tcp_bsd_socket_new: rename addr -> remote_addr
  * Add a bytestream-tcp property that is read-only for now
  * Only enable ice-tcp for RFC and OC2007 compatibility modes
  * Add documentation for ice-udp and ice-tcp properties
  * Only generate ms-turn candidates for ice-tcp base host addresses

    The issue here was that there would be a new turn discovery for UDP
    and for TCP-ACTIVE host candidates and we'd get 2 relayed addresses
    with the same base_addr causing two relayed candidates to have the
    same foundation. This causes farstream to duplicate candidates
    since we only expose the foundation when we signal new-candidate.
    This will also help later for adding turn-tcp support.
  * Move the rfc4571 handling for OC2007 into udp-turn

    In the case of OC2007, we must consider that the turn control messages
    are framed with rfc4571 and udp-turn-over-tcp only adds a single guint16
    to represent turn-control or end-to-end indication. Otherwise, we will
    have issues with double-framing when we do the allocate directly on
    the udp-turn-over-tcp but we'd have no framing once we add the udp-turn
    socket layer on top of udp-turn-over-tcp
  * Do not parse turn data more than once if we have multiple relays
  * Do the recv on relayed socket

    With OC2007 compat, doing a recv on the attached socket (udp-turn-over-tcp)
    will cause the RFC4571 to be unframed before doing the parse_recv on the
    udp-turn socket, which will fail. And even if that didn't fail, it
    would still cause the resulting data to be rfc4571 since the unframing
    in the agent happens before the parse_recv
  * Error tcp socket when it fails to connect
  * Return the right value in agent_socket_send when framing
  * Allocate request is sent on UDP-TURN-OVER-TCP socket and is also framed

    The UDP-TURN socket layer is only added at the end after we discover
    the relay candidate with Allocate, but until then, we use the
    UDP-TURN-OVER-TCP socket layer directly, so we need to do the rfc
    framing for that as well, otherwise, it won't work.
  * Only create one relay/upnp request for ice-tcp depending on active or passive type
  * Only use pseudossl for OC2007 if turn type is TLS
  * Wrap socket_send in udp-turn to avoid if/else on reliable everywhere
  * Check real received size for pseuddossl handshake
  * Send reliable-transport-writable on reliable ice-tcp and drop bogus 'ice-tcp unsupported'
  * Add some informative debug messaging
  * Add support for ICE-TCP

    This is a massive commit that can't be split. We add ice-tcp support
    into the agent by creating local host tcp-active/tcp-passive candidates.
    We also need to find the local and remote candidates whenever we discover
    a peer-reflexive because their data is important to setup the peer-reflexive
    so a few changes were added to look for the local or remote candidate.
    For TCP-ACTIVE remote peer-reflexive candidates, we can't add conncheck
    pairs normally because TCP-PASSIVE (local) do not generate candidate pairs,
    and we also can't have a connection from any local host, so we can only create
    a single candidatepair with the local/remote that are connected.
    The pair->socket of a candidate check pair will hold the connected tcp socket
    (through connect for ACT or accept for PASS) and we will either have a
    remote or a local peer-reflexive which will create a new candidate pair,
    we cannot trigger checks on the initial candidate pair, we must only do it
    on the new check pairs. but in the case of a tcp-passive, we don't get a new
    local peer-reflexive candidate, so there is no new candidate with a new NiceSocket, so
    when we get a triggered check, we need to match it to the candidate check pair
    or when we select a pair, it will still use the original TCP-PASS socket.
    We must store the new connected tcp socket in the peer reflexive candidates
    since they represent that unique peer-reflx candidate's connection
  * Do not retransmit triggered checks if reliable transport
  * Small refactor for conncheck add_pair function
  * Print info on selected pair
  * Store connections in tcp-passive to allow sending

    In the case of TCP-ACTIVE, we don't have a problem, because the new
    socket will generate a  peer-reflexive candidate with the right
    sockptr, and all sends will go through it, but for TCP-PASSIVE, there
    is no peer reflexive candidates, so once the pair is selected, the local
    candidate will point to the TCP-PASSIVE candidate with the TCP_PASSIVE
    socket type which will cause all sends to fail, so we need to proxy
    them to the child connections
  * Fix RFC4571 n_buffers when reading and frame outgoing STUN messages
  * Fix SDP generation for TCP candidates
  * Do not create a socket_source if fileno is NULL
  * Add support for RFC4571 framing (packetized mode) for ICE-TCP candidates
  * Disable reliable mode for test-fullmode, we already have pseudotcp unit tests
  * Add RFC4571 framing to ice-tcp for MS-TURN

    Data and STUN messages sent over TCP MUST follow the framing method
    specified in [RFC4571] section 2. We will frame every outgoing packet
    and split it into 62KB frames when sending, and on reception, we will
    unframe the rfc4571. For now, we only unframe for udp-turn tcp-act/pass
    candidates, which means only for MS-TURN over TCP.
    We still need to do the unframing for real ice-tcp candidates, then add
    support for reading the data in a serialized way.
  * Set pair->sockptr when discovering peer-reflexive candidates

    Fixes Issue #1
  * Add tcp-passive and tcp-active socket layers with unit test
  * Add a nice_socket_recv convenience function similar to nice_socket_send
  * Refactor tcp-bsd to ease integration of tcp-act/tcp-passive
  * Make socket reliable in case of tcp-act/tcp-pass and move logic for ms-turn
  * Factor out the add_to_be_sent into a helper API for sockets

    The add_to_be_sent was duplicated in http/socks5/pseudossl/tcp-bsd and
    had some small differences. It's better to factor it out so bug fixes
    get applied to all of them and code is cleaner.
  * Do not allow message_offset to become negative when queuing messages
  * Use reliable TCP for ms-turn since it generates tcp candidates
  * Do not return the socket to the app if we use ice-tcp, even in unreliable case
  * Add support for MS-ICE2 candidate priorization for OC2007R2 compatibility
  * Rename turn files and API to be UDP specific

    The TURN-TCP RFC is very different from TURN-UDP, the current turn and tcp-turn
    files were only for UDP TURN RFC and UDP TURN using TCP transport.
    When we implement TCP-TURN, we'll need a different algorithm, so I
    renamed the files and API to avoid any confusion.
  * Fix crash when discovering peer reflexive candidates in RFC compat
  * test-fullmode: protect against ready->connected->ready state change and accept data reception on connected state
  * Make OC2007 relay candidates use TCP_ACTIVE and TCP_PASSIVE candidate types when using TCP TURN
  * Do not add server-reflexive from TURN if using a TCP connection
  * Remove priority functions from public header file and move to agent-priv.h
  * Change priority algorithm for better values

    Now we will always give a handicap to UDP candidates, but still give
    relays the lower priority. We have the following priorities now :
    In reliable mode :
    TCP Host : 120
    TCP peer-refl : 110
    TCP nat-assist : 105
    TCP srv-refl : 100
    UDP Host : 60
    UDP peer-refl : 55
    UDP nat-assist : 52
    UDP srv-refl : 50
    TCP relay : 10
    UDP relay : 5

    In unreliable mode :
    UDP Host : 120
    UDP peer-refl : 110
    UDP nat-assist : 105
    UDP srv-refl : 100
    TCP Host : 60
    TCP peer-refl : 55
    TCP nat-assist : 52
    TCP srv-refl : 50
    UDP relay : 10
    TCP relay : 5
  * test-priority: Unit test various configurations of candidate priorities
  * Fix peer reflexive priority depending on transport and compatibility
  * Add support for ice-tcp priorities, udp-tunneled and nat-assisted priorities
  * Use nice_candidate_ice_priority instead of _full variant when possible
  * Add support for MS-TURN in OC2007 compatibility turn usage
  * Do not enable keepalives for tcp candidates
  * do not set socket tos if fileno == NULL
  * Add support for tcp candidates in sdp generation
  * Add candidate type to debug
  * Add a sockptr to CandidateCheckPair, will be required for tcp-active
  * Do not attach to sockets with fileno == NULL (requires for tcp-active)
  * Only check selected pair for writability in gio outputstream
  * Do not retransmit connection checks on reliable transport
  * Use local candidate foundation as CANDIDATE-IDENTIFIER when creating
    STUN_BINDING requests.

    Candidate check pair foundation was used - a combination of local
    and remote candidates' foundation, which does not correspond with
    [MS-ICE2] 2.2.2.1 0x8054 CANDIDATE-IDENTIFIER
  * Disable TURN refresh in MSOC compatibility mode

    At least temporary, maybe it is not used at all. TURN refresh messages
    were not seen in the packet capture.
  * If allow_partial, then allow a return 0 from the socket
  * Once a ice-tcp connection is established, it should work like any other, so just send to it
  * Generate valid TCP connection check pairs
  * Refactor discovery/agent to add support for non-udp candidates
  * Fix indentation for _set_remote_candidates_locked
  * Small refactoring of agent, loop on component id from 1
  * Add support for MS-TURN in tcp-turn
  * Add support for MS Office Communicator pseudossl compatibility
  * Factor out pseudotcp so it's not used if the transport is already reliable
  * Add a nice_socket_send_reliable API for internal use.

    One issue with tcp-bsd is that it will queue messages when the tcp socket
    is not writable, but it will also drop messages when the queue is full.
    If we want to do proper reliable ice-tcp, we need to make sure that
    messages don't get dropped, also, this would affect http/socks5/pseudossl
    if their messages get dropped. For ice-tcp, when the socket is not writable
    we want to return 0, not queue the message.
    The change here is to allow connchecks and other important protocol messages
    to be sent as 'reliable' on tcp transports by queuing them and in the various
    socket layers and to never drop them, but all user messages will be dropped.

    if the tcp socket is not writable.
  * turn: In case of error, don't just pass through the data, return an error
  * Return number of sent messages in socket_send_messages when an error happens part-way
  * Fix return value of send_messages in socks5
  * Allow tcp-bsd to act as reliable or non reliable transport and fix is_reliable on other sockets
  * Add a socket type for socket layer
  * Some refactoring to allow for ice-tcp (non pseudotcp reliable)
  * Fix documentation in preparation for ice-tcp support
  * Add ICE-TCP candidate transport types
  * Small documentation fix
  * agent: Use 1280 instead of 65536 buffer size to send STUN Message

    RFC 5389 says:
    All STUN messages sent over UDP SHOULD be less than the path MTU, if
    known.  If the path MTU is unknown, messages SHOULD be the smaller of
    576 bytes and the first-hop MTU for IPv4 [RFC1122] and 1280 bytes for
    IPv6 [RFC2460].

    So sending 65536 bytes is always wrong
  * Version 0.1.7.1

-- Olivier Crête <olivier.crete@collabora.com>  Thu, 09 Oct 2014 17:05:32 -0400


 (0.1.7)

  * Version 0.1.7
  * stunmessage: Revert another function to use sockaddr

    The farstream unit tests were using it.
  * threaded-example: Make sure the foundation string is NULL terminated
  * Version 0.1.6.1

-- Olivier Crête <olivier.crete@collabora.com>  Mon, 05 May 2014 14:58:12 -0400


 (0.1.6)

  * Version 0.1.6
  * Fix udp-turn returning wrong message length in socket_recv_messages.

    When using optimal path where recv message has only one buffer, the
    buffer length was set to the size of the buffer, not its length, which was
    causing the wrong message length to be returned causing the agent to
    discard STUN messages because their size doesn't match received data
    length.
  * agent: Add a missing forward declaration
  * agent: Simplify gathering-done stage of UPnP handling

    This introduces no functional changes, but consolidates and documents
    the code a bit more.
  * agent: Tidy up upnp_mapping handling

    Use a NULL check to determine if upnp_mapping is an empty list (rather
    than counting every element). Use g_slist_free_full() where appropriate.

    This introduces no functional changes.
  * agent: Document units for NiceAgent::upnp-timeout property

    It’s in milliseconds.
  * stunagent: Only declare the long term key valid if the username/realm coudl be read
  * example: Prevent possible non-NULL terminated string
  * address: Correctly identify ipv6 link local

    The test for fe80::/10 always returned FALSE.
  * add nice_agent_forget_relays()
  * component: Clear turn local candidates when clearing turn servers

    But keep the turn connection that's currently being used if it is
    the selected candidate. Also clear the TURN candidate refresh.
  * agent: Make the TurnServer structure refcounted

    Instead of just blindling assuming that all of the pointers are valid
    until the end.
  * discovery: Use g_slist_free_full for candidate refresh list
  * discovery: Use g_slist_free_full for discovery list
  * discovery: Remove never used and leaked msn_turn_* fields in CandidateDiscovery
  * discovery: Remove never used and leaked msn_turn_* fields in CandidateRefresh
  * agent: Factor out creating the TurnServer structure
  * discovery: Remove duplicated element between CandidateRefresh and NiceCandidate
  * discovery: Store NiceCandidate in CandidateRefresh
  * component: Make detach_source close the socket
  * component: Make is possible to remove a socket

    Change the SocketSource handling to make it possible
    to remove a source, not only to add one.
  * factor out: component_clean_turn_servers()
  * stream: No need to pass RNG to stream_restart()

    It can now take it from the agent.
  * conncheck: Only print debug message if actually freeing something
  * conncheck: Don't fail a stream that has on-going discovery
  * agent: Add nice_agent_restart_stream() to restart a single stream
  * stream: Clear connchecks on restart inside stream
  * conncheck: Use g_slist_free_full() for conncheck list

    Skips one iterator over g_slist_foreach() + g_slist_free(). It is also easier
    to read.
  * conncheck: Make conn_check_free_item() static

    It is never used outside of this file.
  * conncheck: Only stop conncheck timer if no stream has pending conn checks
  * conncheck: Remove useless return value on conn_check_prune_stream
  * conncheck: Factor out stopping connectivity checks
  * component: Remove return value from *_restart() functions, they can't fail
  * component: socket has been renamed nicesock
  * Add more debug info when adding relays
  * Protect test-dribble against read->connected->ready state changes
  * Return the correct originating IP on TURN

    If doing a recv on UDP-TURN, the 'from' address was kept set to
    the turn server which causes connchecks to fail with "mismatched address"
    error. This fixes it
  * add nice_component_state_to_string()

    Nice to make debug logs more friendly to read.
  * pseudotcp: Fix partial acknowledgement of segments

    If an incoming ACK acknowledges part of a pending SSegment, correctly
    increment the base offset of that SSegment before attempting to transmit
    it. Otherwise, the wrong data will be transmitted and the offset passed
    to packet() will be incorrect.
  * pseudotcp: Fix an assertion on an invalid calculated RTT

    If a packet has an invalid tsecr field, invalid (e.g. negative) RTTs may
    be calculated from it. If so, discard the packet as invalid.
  * tests: Add a test-pseudotcp-fuzzy test for fuzzing PseudoTcpSocket

    As documented at the top of the file, this creates two PseudoTcpSockets
    in a loopback configuration, and mutates the raw packets which are sent
    between them, hoping to cause assertion failures and illegal memory
    accesses in the pseudotcp code.

    Best run under Valgrind or GDB.
  * agent: Fix leaks if a component is removed during a recv() call

    If the error handling block in the middle of the recv() loop is hit,
    various things were previously leaked (context, cancellable_source) and
    the return values were potentially incorrect.

    Fix the break out of the error handling block to clean up correctly.
  * stun: Restore argument type to stun_usage_bind_process(), it's used outside libnice
  * agent: Factor out a tiny bit of common code
  * agent: Limit printed length of uname and password in debug output

    At this point in the code, neither the username nor password are
    nul-terminated, so printing them in the debug output as nul-terminated
    strings can easily result in rubbish being printed after them.

    Fix this by specifying the string length in the printf() format string.
    Finally my terminal will no longer ask me to install N’Ko fonts when
    running the libnice tests.
  * agent: Fix a leak in nice_output_stream_write() with a NULL cancellable

    If @cancellable is NULL in a call to nice_output_stream_write(), the
    WriteData struct is created with a reference count of 4, but only two
    operations are scheduled which will result in its reference count being
    decremented. The third operation is only scheduled if @cancellable is
    non-NULL (and the final reference is dropped unconditionally at the end
    of the function).

    Fix this by properly implementing reference counting for WriteData,
    rather than hard-coding the expected number of references in a fragile
    and unmaintainable way.
  * tcp-bsd: Don't clear error that hasn't been set
  * agent: Don't return the socket to the app in any reliable case
  * No need to strdup foundation in new_selected_pair since we queue signal
  * pseudotcp: Also cause Writable callback to be emitted if can_send() says no

    The GOutputStream based systems can sometimes call this, decide the stream is
    not writable and then poll for it. We have to make sure that poll is woken up.
  * Fix TCP TURN for Google compatibility. Message length was sent uninitialized
  * Small cleaning of tcp-bsd.c
  * Fix possible segfault in stun_message_validate_buffer_length()
  * build: Check for [s]size_t before redefining them on MinGW

    MinGW defines size_t and ssize_t for us, so we should not
    unconditionally redefine them in stun/win32_common.h. Add an
    AC_CHECK_TYPES configure check to avoid this.
  * agent: Define IN6_ARE_ADDR_EQUAL macro when building under MinGW

    Older versions of MinGW don’t define IN6_ARE_ADDR_EQUAL, as normally
    defined in netinet/in.h. Conditionally define it in address.c to fix the
    build on MinGW.

    MinGW has added support for the macro here:
    https://github.com/mirror/mingw-w64/commit/0f4899473c4ba2e34fa447b1931a04e38c1f105e

    Based on a patch originally by Luciana Fujii Pontello
    <luciana@fujii.eti.br>.
  * pseudotcp: Validate option lengths
  * Remove all traces of compile time marshallers
  * agent: Use generic marshaller
  * Initialize variables to reduce unexpected behavior in case something goes wrong
  * Rename variables that shadow global definitions
  * stun: Use struct sockaddr_storage * for any pointer that we write to

    Some platforms have a larger alignment requirement for struct sockaddr_* than
    for plain struct sockaddr, in that case, we need to make sure that the incoming pointer
    has the right alignement before taking it in.
  * stun tests: Fix a bunch of issues found by more aggressive GCC warnings
  * Don't mix gsize vs size_t, seems like they're not always the same size
  * candidate: Use explicit 64-bit constants to make 32-bit gcc happy
  * pseudotcp: Don't mix "long" and guint, one is signed, the other is unsigned

    So use guint64 everywhere, this is never supposed to be negative.
  * tcp-turn: Don't access output message after freeing it
  * turn: Don't overwrite source, destroy it first
  * turn: Don't access list node after freeing it
  * component: Set dummy callback from cancellable GSource
  * agent: Make it possible to set the relays after gathering

    This allows finding the relays asynchronously while trying to connect
    with other methods.
  * agent: Prevent nice_agent_set_port_range() from being called after a gather

    The port range is only used when gathering, print a critical if it is
    called afterwards as it will have no effect.
  * agent: Prevent gather from being called multiple times

    This can cause odd behaviors as it is not a idempotent function.
  * agent: Refactor nice_agent_set_relay_info()

    No behavior change is introduced
  * turn: Put timeouts on the specific main context
  * turn: Don't try to process empty messages
  * agent: Bail out early on empty message

    This can happen if a lower layer has consumed the message, bail out earlier in
    that case.
  * agent: Don't overwrite the size of the GInputBuffer, only set the global size
  * pseudotcp: Also accept NiceInputMessage array with a single message
  * test-fullmode: Don't use gmainloop when not required

    There are more than one callback that could stop it
  * test-fullmode: Do #if instead of #ifdef as we set it to 0
  * test-fullmode: Only wait for data on component 1
  * tcp-bsd: Use default main context if none specified
  * turn-tcp: Don't corrupt messages
  * agent: Free every parameter

    Fixes off-by-one error
  * agent: Create a custom pointer GType to recognize the stream ids
  * agent: Improve documentation for NiceAgent::new-candidate

    Note that it’s a new _local_ candidate.
  * NEWS: Remove superfluous empty lines
  * Version 0.1.5.1

-- Olivier Crête <olivier.crete@collabora.com>  Mon, 28 Apr 2014 20:39:31 -0400


 (0.1.5)

  * Version 0.1.5
  * configure: Remove -Wunsafe-loop-optimizations, it causes false warnings
  * tests: Add private header to tarball
  * tests: Don't verify the message content with not in reliable mode, because its unreliable
  * agent: Enforce limits on the size buffers, because the retval is signed
  * doc: Update doc generation
  * iostream: De-gtkdoc the comments, as it's not public API
  * agent: Remove unused #include

    net/if_arp.h doesn’t exist on OS X, and hence causes cross-compilation
    to fail. It doesn’t appear to be needed for any of the functions
    currently used in interfaces.c anyway.
  * agent: Ensure the pending signal queue is cleared on dispose
  * agent: Fix a potential re-entrancy situation

    If we emit signals from component_io_cb() in the middle of a read, it’s
    possible that one of those signals will be picked up by the client to
    perform another read. A likely candidate (and what was triggering the
    re-entrancy here) would be component-state-changed. Since signals are
    emitted synchronously, the second read would being inside the first, and
    trigger the anti-re-entrancy assertion.
  * tests: Use dynamically allocated port for test-new-dribble
  * tests: Fix horribly raciness in test-new-dribble
  * tests: Split racy "closing" into a test for stopping while reading or writing

    We wan't to make sure not to have a race where a thread blocks in a blocking
    receive or send while nice_agent_remove_stream() is called
  * test: Use a less racy way to know if the test is ready to start

    Also, keep a pointer to the other structure for tests to use
  * outputstream: Add a cancellable to get out of blocking write if the stream is removed
  * component: Add a GCancellable to get of out blocking nice_agent_recv()

    Otherwise, it may be stuck iterating the context forever if all of the
    other sources are gone.
  * component: Keep its own context at all times

    Don't re-create it.
  * Ignore .trs and .log file from newer automake
  * agent: Delay signal emission after the lock has been released

    This way, there can be no annoying re-entrancy in our code.
  * agent: Replace recursive mutex with non-recursive

    This should prevent us from re-adding re-entrancy in the future
  * agent: Delay signal emission after the lock has been released

    This way, there can be no annoying re-entrancy in our code.
  * iostream: remove re-entrant call into NiceAgent
  * outputstream: If tcp, only check for space in the PseudoTCP queue
  * agent: Expand documentation for a couple of NiceAgent functions

    Expand documentation for nice_agent_gather_candidates() and
    nice_agent_set_remote_credentials().
  * agent: Fix inlining of nice_debug() if NDEBUG is defined
  * agent: Assert on re-entrant reads

    Ensure the agent’s context doesn’t get iterated while in the middle of
    reading a message, as that will corrupt the component->recv_messages
    state.
  * agent: Improve debug output
  * agent: Add nice_input_message_iter_compare()

    Use it instead of memcmp() to avoid comparing padding bytes.
  * docs: Remove NiceIOStream, nothing specific to document
  * agent: returning 0 valid messages is valid, it means EOF
  * iostream: iostreams are only for reliable streams, no need to check
  * agent: Use locally allocated memory if the application buffer is not big enough for one STUN packet
  * outputstream: Trigger the pollable source on error or removal
  * agent: Fix compiler warnings
  * configure: Add newline ignoring

    Otherwise it ran the "yes" command
  * configure: Move -Werror=unsafe-loop-optimizations to the maximum level

    It tends to cause false warnings
  * pseudotcp: Remove one duplicated call to g_get_monotonic_time()
  * agent: Remove weak pointers, they aren't thread safe anyway

    And we get close to 10% perf boost
  * pseudotcp: Add list of unsent segment

    Looping through the list of send segment was the only thing from libnice
    showing up in my profiler. Keeping a list of segment that were never sent
    has made it disappear.
  * agent: Avoid calling nice_address_to_string() when debugging is disabled
  * pseudotcp: Use GQueue for list that has stuff inserted in the end
  * pseudotcp: Don't change the receive buffer size if it hasnt changed
  * agent: Restore the ability nice_agent_send() to send partial buffers

    This is very important for reliable mode.

    Also use it in the GOutputStream so as to not get into the case where
    there is still some space in the TCP buffer, but not enough for one message.
    Also warn against this problem.
  * agent: Replace nice_agent_build_io_stream() with nice_agent_get_io_stream()

    Also made the GIOStream into a singleton, it always returns the same one.
    Also make it impossible to create a GIOStream for a non-existing stream/component
  * Remove the "length" parameter from NiceOutputMessage

    It was used correctly only half the time anyway
  * Remove the "to" parameter from NiceOutputMessage

    We never send multiple messages to separate targets in practice, so
    this will simplify the code
  * agent: Attaching to a NULL context should attach to the default one

    Otherwise it would have attached to a newly created context
  * socket: Add note that the packet dropping in tcp-bsd is broken behavior
  * tests: Fix test-restart to only quit on state changes

    Previously, there was a race between receiving the data packets and
    changing state to READY, which would cause one of the final assertions
    to fail.
  * agent: Add support for vectored I/O for sends

    Add one new public function, nice_agent_send_messages_nonblocking(),
    which replaces nice_agent_send_full(). This isn’t an API break, because
    nice_agent_send_full() hasn’t been in a release yet. The new API allows
    sending multiple messages in a single call, and supports vectors of
    buffers to transmit the messages from.

    The existing nice_agent_send() API has been left untouched, although
    it’s a bit of a bugbear because it’s non-blocking and doesn’t fit with
    the new *_nonblocking() naming scheme. Oh well.

    This doesn’t bring any notable changes to the number of memcpy()s on the
    critical path: it remains at zero for the common cases and common socket
    types. It introduces the possibility for future work to eliminate some
    memcpy()s in more complex socket types, like tcp-turn and tcp-bsd, but
    these optimisations have not been made yet. FIXME comments have been
    added.

    This includes modifications to the test-send-recv unit test to cover the
    new API.
  * socket: Add vectored I/O support for sending on sockets

    Replace the send() API with a send_messages() API, which supports
    sending multiple messages, each with multiple buffers rather than a
    single monolithic buffer.

    This doesn’t break API, as the socket API is not exposed outside
    libnice. It does introduce a new struct: NiceOutputMessage, which is
    analogous to struct mmsghdr and NiceInputMessage.

    This includes updates to the test-bsd test to cover the changed API.

    The existing nice_socket_send() API has been retained as a thin wrapper
    around nice_socket_send_messages(), for convenience only. It’s hoped
    that internal usage of this API will decline to the point where it can
    be removed.
  * agent: Move gtk-doc comments from agent.c to agent.h for new API

    I completely disagree with this, and believe the C file is a much better
    place for them, as then they’re:
    • easier to read while hacking on the functions, and
    • easier to modify once finished hacking on the functions.

    I think the argument for putting them in the header files (so that the
    documentation is available by the function declarations) is weak, as the
    generated gtk-doc manual should be installed on the system alongside the
    header files in any case.
  * tests: Update test-send-recv to support vectored I/O
  * agent: Add support for vectored I/O for receives

    Add two new public functions:
    • nice_agent_recv_messages()
    • nice_agent_recv_messages_nonblocking()
    which allow receiving multiple messages in a single call, and support
    vectors of buffers to receive the messages into.

    The existing nice_agent_recv[_nonblocking]() APIs have been left
    untouched.

    This tidies up a lot of the message handling code internally, and
    eliminates a couple of memcpy()s. There are still a few more memcpy()s
    on the critical path, which could be eliminated with further work.

    In the reliable agent case, every message is memcpy()ed twice: once into
    the pseudo-TCP receive buffer, and once out of it. The copy on input
    could be eliminated (in the case of in-order delivery of packets) by
    receiving directly into the receive buffer. The copy on output can’t be
    eliminated except in the I/O callback case (when
    nice_agent_attach_recv() has been used), in which case the callback
    could be invoked with a pointer directly into the pseudo-TCP receive
    buffer.

    In the non-reliable agent case, zero memcpy()s are used.

    A couple of the more complex socket implementations (TURN and HTTP) have
    slow paths during setup, and partially also during normal use. These
    could be optimised further, and FIXME comments have been added.
  * tests: Fix a shadowed function name in test-pseudotcp

    The write() function already exists; we can’t re-define it as a
    callback.
  * stun: Add a fast version of stun_message_validate_buffer_length()

    stun_message_validate_buffer_length() is already fast, but requires the
    entire message to be in a single monolithic buffer. For introducing
    vectored I/O, this becomes impossible to guarantee.

    Rather than rewriting the STUN code to natively support vectors of
    buffers (which would be a huge undertaking, and would probably slow
    the code down considerably), implement a fast check of whether a message
    is likely to be a STUN packet which *does* support vectored I/O. This
    can then be used to determine whether to compact the vector of buffers
    to a single monolithic one in order to validate the message more
    thoroughly.
  * socket: Fix the formal parameter types of nice_turn_socket_parse_recv()

    gsize and guint8 are more obviously for binary data than gint and gchar.

    Note the signedness of the return type has changed: the function never
    returns negative values.
  * socket: Add vectored I/O support for receiving on sockets

    Replace the recv() API with a recv_messages() API, which supports
    receiving multiple messages, each with multiple buffers rather than a
    single monolithic buffer.

    This doesn’t break API, as the socket API is not exposed outside
    libnice. It does introduce a new struct: NiceInputMessage, which is
    analogous to struct mmsghdr.

    This includes updates to the test-bsd test to cover the changed API.
  * agent: Simplify control flow in agent_recv_locked()

    This introduces no functional changes.
  * stun: Use SHA1 iteration functions directly in HMAC calculation

    Rather than using an intermediate method which takes a vector of
    buffers, just use the SHA1 iteration functions directly in the HMAC
    calculations. This eliminates several cases where the vector of buffers
    was of fixed length, and it was actually taking more code to set up and
    pass the vector than it would have to call the iteration functions
    directly.
  * outputstream: Put GError in the right GError**
  * component: Don't free the nice socket before detaching it
  * agent: Make sure there is no integer overflow if the timeout is now

    Make sure that if the timeout is now, no negative number is passed as
    an unsigned
  * pseudotcp: Don't fail when sending over 4GiB of data

    Integer comparisons need to take care of rollovers
  * outputstream: Fix race between writable callback and GCond wait
  * inputstream: Make the GSource hold a weak ref on the agent

    This also means that it can't have the component ref. Also make the
    cancellable a child source of this GPollableInputStream one
  * outputstream: Don't wake up on every input buffer

    So instead of actually blocking on the FD, block on a GCancellable
    which is triggered when the writable callback is called. Also set the
    application's GCancellable as a child of this source.
  * agent: Only change pseudotcp clock if the new timeout is sooner

    Destroying and creating GSources is expensive, so also don't destroy and
    re-create if possible, instead lets use the new g_source_set_ready_time()
  * pseudotcp: Switch to using monotonic time
  * outputstream: Release blocking send lock while sending

    Otherwise it produces a deadlock
  * outputstream: Make the blocking send thread safe

    There was a possible race between disconnection and freeing of the WriteDatas
    structure, now it's ref-counted so it can never happen. Also set the len to -1
    if the cancellable was cancelled.
  * agent: Return G_IO_ERROR_WOULD_BLOCK for non-connected pseudoTCP
  * agent: Return cancelled if sending is cancelled
  * nice: Add nice_agent_build_io_stream to exported symbols
  * agent: Queue incoming pseudo-TCP messages until ACKs can be sent

    If pseudo-TCP messages are received before a socket has been selected
    from all the STUN candidates, they would previously be immediately
    passed to the pseudo-TCP state machine, which would attempt to send ACKs
    for them. This would fail (due to a lack of an outbound UDP socket), and
    would incur a retransmit timeout in the TCP state machine. This slowed
    down the tests enormously if one agent in a test completed candidate
    selection before the other (which is an entirely reasonable scenario).

    This never occurred before because the existing tests artificially run
    both agents in lock-step, and never send data packets from one to the
    other until both have completed candidate selection. This is basically
    cheating.

    Fix the problem by queuing incoming pseudo-TCP messages until an
    outbound UDP socket is available to send the ACKs or SYNACKs on.
  * agent: Correct maximum UDP data length

    The maximum number of bytes in a UDP packet (ignoring problems like
    fragmentation and MTUs) is 65535 = 2^16-1 bytes, as the length field
    in the packet header is 16b wide.
  * tests: Remove redundant GLIB_CHECK_VERSION checks

    Since we define GLIB_VERSION_MIN_REQUIRED, GLib will not emit deprecated
    function call warnings for functions like g_type_init() or
    g_thread_init().
  * agent: Slightly improve debugging output
  * agent: Document correctness of io_mutex locking
  * agent: Combine nice_agent_recv() and nice_agent_recv_nonblocking()

    Sharing is caring.
  * agent: Add a couple of comments to the pseudo-TCP implementation
  * agent: Hold a reference to pseudotcp while calling its callbacks

    This prevents the pseudotcp socket from being destroyed from within a
    callback.
  * socket: Ensure variables are nullified correctly in UDP sockets

    When closing a socket, ensure its private data structure is set to NULL.
    When sending a message fails to construct a new socket address, ensure
    the pointer to the old address (which has just been unreffed) is removed.

    This makes debugging problems with sockets being freed early much
    easier.
  * tests: Add tests for the I/O stream classes
  * agent: Always emit a readable callback when pseudo-TCP data arrives

    Previously, the pseudo-TCP implementation’s readable() callback would
    only be invoked when new data was received if it was enabled. The
    callback is enabled by reading all data from the TCP input buffer until
    EWOULDBLOCK is returned.

    Reading all that data is not possible if the client buffer is of a
    limited size, and can lead to livelocks if the client reads exactly the
    number of bytes in the TCP input buffer (i.e. its buffer size matches
    the TCP buffer fill level).

    Instead, always invoke the readable() callback. This might be slightly
    less performant, but the whole pseudo-TCP implementation is a shambles
    anyway, and the callbacks need removing, so why not?
  * agent: Add GPollableOutputStream support to NiceOutputStream
  * agent: Add GPollableInputStream support to NiceInputStream
  * agent: Add a nice_agent_recv_nonblocking() function

    This is a non-blocking variant of nice_agent_recv(), and will be used
    internally by the GPollableInputStream implementation. External
    implementations may use it as well.

    It reserves the right to iterate the main context, but doesn’t currently
    do so.
  * agent: Add nice_agent_build_io_stream() API

    This allows creation of a NiceIOStream from an existing NiceAgent
    instance.
  * agent: Add support for GIO-style I/O streams

    This adds three new classes:
    • NiceIOStream
    • NiceInputStream
    • NiceOutputStream
    which allow wrapping a single stream/component pair in an I/O stream
    which can be used with the standard GIO functions.

    The streams are constructed as wrappers around a NiceAgent, with changes
    to the NiceAgent’s properties affecting all instantiated streams.
    Streams are only supported for reliable connections.

    If the NiceAgent stream which underlies a NiceInputStream,
    NiceOutputStream or NiceIOStream is removed, the I/O stream is marked as
    closed.

    This is based on work originally done by Youness Alaoui
    <youness.alaoui@collabora.co.uk>.
  * agent: Add a ComponentSource to Component

    This is a type of GSource which proxies all poll events from the sockets
    in a Component. It’s necessary for the implementation of
    GPollableInputStream and GPollableOutputStream.

    This adds no new external API, but does add ComponentSource and
    component_source_new() as new internal API.
  * agent: Add a nice_agent_send_full() API exposing error information

    This adds GError and GCancellable parameters to the existing
    nice_agent_send() API, and is identical in all other respects (notably,
    it is non-blocking).

    The GCancellable is currently unused, but could be used in future if the
    API grows to support blocking writes.

    The GError is used to return more interesting error codes than just
    ‘-1’.
  * agent: Add nice_agent_recv() allowing blocking receives on sockets

    This is a blocking receive function, designed to be called from a worker
    thread. It cannot be used in conjunction with the existing
    nice_agent_attach_recv() API, as the blocking receive and the GSource
    would compete over access to the single copy of the data in the kernel’s
    receive buffer.
  * agent: Move GSource handling into Component

    Rather than handle GSource creation, attachment and removal in
    NiceAgent, handle it inside Component. This brings it closer to the
    networking code, and improves encapsulation of the state of each
    Component.
  * agent: Fix format specifiers in debug messages

    Mostly problems with the specifier for gsize.
  * agent: Support invoking I/O callbacks in non-default contexts

    If the Component’s I/O receiver machinery is invoked from a thread which
    can’t acquire the main context specified for the I/O callbacks, the
    callbacks need to be queued as idle handlers in that main context.

    This is needed for the case where blocking reads are being performed in
    one thread, with their callbacks needing to be delivered in another
    thread.

    This introduces a new fine-grained lock to Component: io_mutex. This
    protects accesses to Component->io_callback, Component->io_user_data and
    Component->pending_io_callbacks. If being locked at the same time as the
    main agent lock, it must always be locked afterwards, but the agent lock
    does not *have* to be held in order to lock io_mutex.
  * agent: Eliminate redundant arguments from component_emit_io_callback()
  * agent: Integrate TcpUserData into Component

    It was allocated separately and always set, which is a wasted
    allocation. Instead, pull the NiceAgent and Stream pointers into the
    Component directly, and eliminate the redundant allocation.

    This also means the NiceAgent and Stream are available for use elsewhere
    in the Component code (not just with TCP stuff).
  * agent: Clarify naming of internal recv function

    Add ‘_locked’ to the name to clarify that it must be called with the
    agent’s lock already held.
  * agent: Use guint8* as the type for internal buffers

    …rather than gchar*. This differentiates binary buffers from strings a
    little better, although the two types are functionally equivalent.

    Also use gsize for buffer sizes, rather than guint.
  * agent: Move I/O callback handling from NiceAgent into Component

    Compartmentalise the handling of setting and clearing the user-provided
    per-Component I/O callbacks.

    Data flows from the socket, through nice_agent_g_source_cb(), to
    component_emit_io_callback() which calls the callback provided by the
    user when originally attaching to the stream/component.
  * agent: Move socket/source handling from NiceAgent into Component

    This compartmentalises it a little more, reducing the spread of
    state-changing code from three files down to one.

    The key change is the switch from using two GSLists of NiceSockets and
    GSources in Component, to using a single GSList of a struct {
    NiceSocket, GSource }. This is possible because there is at most one
    GSource per NiceSocket. This change reduces memory overhead (from the
    GSList structures) slightly, and makes the relationship between sockets
    and sources much clearer.
  * agent: Refactor nice_agent_g_source_cb()

    Move all functionality which is unrelated to the GSource into
    _nice_agent_recv().
  * agent: Add a NiceAgent::streams-removed signal

    This is emitted when one or more streams are removed from the agent
    due to a call to nice_agent_remove_stream().
  * tests: Remove a potential race from test-thread

    A g_usleep() was introduced in commit
    e22ecb19662970a42def6df74db6359e58084727 to fix a potential race where
    the non-main threads would finish all their work before the error_loop
    was started, leaving the error_loop to run for 30s then abort the test.

    A better fix, instead of doing a racy sleep, is to have the non-main
    threads spin until the error_loop is running. GLib takes care of all the
    locking for us, and since we don’t care about efficiency for test cases,
    spinning is fine (the wait is also going to be quite short).
  * build: Add various compiler warnings to --enable-compile-warnings

    Add various compiler warnings to the different levels of
    --enable-compile-warnings. No particular scheme has been used to assign
    different warnings to different levels, other than that more critical
    ones are typically enabled at lower levels upwards.

    All code in libnice except the tests currently compiles with
    --enable-compile-warnings=error.
  * stun: Add missing switch cases

    This appeases GCC’s -Wswitch-enum warning, and makes it more obvious
    that those enum cases have been explicitly considered, rather than just
    forgotten about.

    This introduces no functional changes.
  * socket: Add missing switch cases

    This appeases GCC’s -Wswitch-enum warning, and makes it more obvious
    that those enum cases have been explicitly considered, rather than just
    forgotten about.

    This introduces no functional changes.
  * gst: Add missing switch cases

    This appeases GCC’s -Wswitch-enum warning, and makes it more obvious
    that those enum cases have been explicitly considered, rather than just
    forgotten about.

    This introduces no functional changes.
  * stun: Fix potential zero-length memset() call

    GCC warns about this. Might as well prevent the warning.
  * tests: Add missing switch cases

    This appeases GCC’s -Wswitch-enum warning, and makes it more obvious
    that those enum cases have been explicitly considered, rather than just
    forgotten about.

    This introduces no functional changes.
  * tests: Fix strict aliasing of sockaddr structures

    Casting from one struct sockaddr type to another breaks C’s strict
    aliasing rules (variables of different types cannot alias). Fix this
    cleanly by using unions of struct sockaddrs to convert between the
    types (i.e. type-punning).

    I wish sockaddr didn’t have to be this painful.

    See:
    http://gcc.gnu.org/onlinedocs/gcc-4.4.1/gcc/Optimize-Options.html#Type_002dpunning
  * stun: Make the MD5 code strict-aliasing correct
  * build: Update .gitignore file
  * pseudotcp: Add methods to query the state of the send and recv buffers
  * pseudotcp: Implement window scaling for PseudoTCP.

    Syncs with libjingle SVN rev 77
  * tests: Add more asserts to pseudotcp test
  * tests: Use right type when taking to stdio f*()  C APIs
  * tests: Close pseudosocket as soon as it's done sending
  * tests: Fix racy destruction of pseudotcp object
  * tests: No need to call adjust_clock in readable

    This can only be called after we received a packet, where we already
    adjust the clock
  * tests: Use one struct for data and buffer
  * pseudotcp: Only consolidate recv buffer if it's getting buffer

    Should improve receive performance a bit.

    Syncs with libjingle SVN rev 76
  * pseudotcp: Make it possible to disable the Nagle Algorithm

    Syncs with libjingle SVN rev 56
  * agent: Don't make relayed sockets available in nice_agent_get_selected_socket()

    Also document that fact.
  * agent: Note that nice_agent_set_relay_info() can be called many times

    Add to the documentation to note that it can be called several times to
    set details for several relay servers during discovery.
  * build: Don’t unconditionally enable -Werror for non-release builds

    Do not unconditionally enable -Werror, since that breaks the build for
    people who have stricter compilation warnings enabled.

    Instead, add an --enable-compile-warnings configure flag which enables
    -Werror when passed as --enable-compile-warnings=error. This mimics the
    flag in gnome-common, for consistency. But we enable errors by default
    on non-released versions.
  * agent: Read all socket data in nice_agent_g_source_cb
  * stun: Add printf function attribute

    This shuts a compiler warning up and allows for format string checking
    of debug messages.
  * stun: Fix format specifier for a size_t variable

    This fix may not be entirely cross-platform, and I have been unable to
    test whether it is; making it cross-platform is made more difficult by
    the fact that the STUN code doesn’t use GLib.

    The PRIuPTR macro was defined in POSIX:2004, and later in C99.
    http://pubs.opengroup.org/onlinepubs/009696799/basedefs/inttypes.h.html
  * build: Update .gitignore file
  * build: Remove auto-generated INSTALL file

    It gets automatically generated by autotools, so just gets in the way if
    checked into git.
  * configure: Verify that the compiler understands warning cflags

    Older compilers don't understand all of the flags
  * agent: Add warning on incorrect API usage
  * stun: Indications are never authentication when using long term auth
  * turn: Send queued TURN messages to the turn server

    It was trying to send queued messages to the final destination instead
    of going through the TURN server
  * conncheck: Avoid reading null username
  * examples: Remove g_type_init() call for recent GLib versions
  * stun: Fix a use of a function with an aggregate return value

    div() has an aggregate return, which GCC doesn’t like, although this
    seems like a pretty pointless warning because div_t is the same size as
    a pointer on 64-bit platforms (probably) and hardly going to cause
    performance problems by passing it by value.

    Anyway, it seems easier to simplify the code by using explicit / and %
    operators inline, than it does to add pragmas and shut the warning up.
  * stun: Explicitly avoid a memcpy() from NULL

    If stun_message_append_bytes() is called through
    stun_message_append_flag(), data will be NULL and len will be 0. This
    will result in a memcpy(ptr, NULL, 0) call. This probably won’t do any
    harm (since any reasonable memcpy() implementation will immediately
    return if (len == 0)), but the standard allows for memcpy() to explode
    if (data == NULL), regardless of the value of len.

    In order to be conformant, and to shut up the scan-build static analysis
    warning about it, only do the memcpy() if (len > 0).
  * stun: Remove unused variables
  * agent: Avoid memcpy()ing garbage between username strings

    If (username_len > uname_len), memcpy() would fall off the end of the
    uname string and copy (username_len - uname_len) bytes of garbage into
    username.

    Theoretical bug: not actually attempted to be demonstrated in the wild.
  * agent: Fix an old-style function declaration
  * agent: Avoid a potential NULL pointer dereference

    password could be NULL (priv_get_password() can return NULL), but
    g_base64_decode() aborts if it receives NULL for the encoded text.
  * agent: Fix format specifiers in debug messages

    Mostly problems with the specifier for gsize.
  * agent: Add missing format specifiers to debug messages
  * agent: Add printf function attribute

    This shuts a compiler warning up and allows for format string checking
    of debug messages. (See future commits for the fixes this has resulted
    in.)
  * Fix strict aliasing of sockaddr structures

    Casting from one struct sockaddr type to another breaks C’s strict
    aliasing rules (variables of different types cannot alias). Fix this
    cleanly by using unions of struct sockaddrs to convert between the
    types (i.e. type-punning).

    I wish sockaddr didn’t have to be this painful.

    See:
    http://gcc.gnu.org/onlinedocs/gcc-4.4.1/gcc/Optimize-Options.html#Type_002dpunning
  * Add missing ‘default’ cases to switches

    This shuts GCC’s -Wswitch-default warning, and makes the code flow a
    little more explicit.

    This introduces no functional changes.
  * examples: Remove redundant non-NULL checks

    The return value of g_strsplit() can never be NULL.
  * Fix variable shadowing
  * build: Update .gitignore file
  * build: Delete ar-lib in maintainer-clean build target
  * build: Update AC_CONFIG_HEADERS instead of AC_CONFIG_HEADER

    The latter is deprecated.
  * agent: Clarify valid range of stream and component IDs

    Valid IDs will never be 0, which is convenient.
  * agent: Add API to retrieve the selected GSocket

    This should be used only when the protocol has it's own keepalive mechanism
  * agent: Getting the local candidates returns a copy, fix the doc
  * Add special case to make it compile on Solaris
  * Silence aclocal warning by changing the order of the macros
  * build: Add GUPnP libraries to Libs.private in pkg-config file

    They’re private dependencies which are needed on the linker command line when
    linking statically against libnice.

    https://bugs.freedesktop.org/show_bug.cgi?id=70965
  * build: Update configure.ac according to autoupdate

    https://bugs.freedesktop.org/show_bug.cgi?id=70965
  * build: Add AM_PROG_AR to configure.ac

    This shuts up an automake warning about needing it when using a non-POSIX
    archiver.

    https://bugs.freedesktop.org/show_bug.cgi?id=70965
  * build: Add ‘-I m4’ to ACLOCAL_AMFLAGS

    This shuts up an automake warning and ensures that in-tree m4 macros are found
    by aclocal.

    https://bugs.freedesktop.org/show_bug.cgi?id=70965
  * autogen.sh: Honor NOCONFIGURE=1

    This is adapted from telepathy-logger's autogen.sh.  See
    http://people.gnome.org/~walters/docs/build-api.txt
    for rationale behind NOCONFIGURE=1.
  * Fix unitialized variable in nice_agent_parse_remote_candidate_sdp
  * Refresh TURN CreatePermission at receiving data in case TURN path is asymetrical.
  * Set the minimum GLib version to 2.30 to disable deprecated warnings on newer GLib versions and make sure the maximum allowed GLib version is 2.32

    Also actually require 2.30
  * Open socket with random port. Use random port to avoid TURN error 437 Allocation Mismatch
  * win32: Add new 0.1.4 symbols to the win32 .def file as well
  * version 0.1.4.1

-- Olivier Crête <olivier.crete@collabora.com>  Thu, 06 Mar 2014 21:21:37 -0500


 (0.1.4)

  * Version 0.1.4
  * Fix documentation
  * Add build instructions to the README
  * Remove debugging print
  * examples: Make input non blocking to allow exit when remote hangs up
  * Do not unref the mainloop until the thread has joined since it could be still using it
  * Export the new nice_agent_get_selected_pair API
  * Do not unref the GThread since g_thread_join takes the reference. Also rename the variable.
  * Change the m= line in the SDP to use ICE/SDP dummy type instead of RTP/AVP
  * Add new parsing API, for stream and candidates
  * Add example that uses the new SDP parsing API
  * Adding new SDP parsing and generation API.
    This adds nice_agent_set_stream_name, nice_agent_get_stream_name,
    nice_agent_generate_local_sdp, nice_agent_parse_remote_sdp.
  * Fix/clean threaded-example
  * Refactor nice_agent_set_stream_tos to use agent_find_stream internal API
  * Add a similar simple example using threads
  * example: Exit on Ctrl-D and send EOS signal to the other end
  * Change license for simple-example
  * Add a simple example to showcase the API thanks to Bryce Allen
  * Cleanup documentation
  * Add nice_agent_get_selected_pair API to NiceAgent
  * Add nice_address_ip_version API to NiceAddress
  * Fix username validation in OC2007 mode

    Wrong 'inbound' argument was passed into priv_validate_username()
  * Add win32 directory to EXTRA_DIST
  * Add nice_agent_set_port_range to the list of exported API functions
  * Manage multiple TURN CreatePermission in parallel
  * agent: display NiceComponentState as strings in debug message

    https://bugs.freedesktop.org/show_bug.cgi?id=49219
  * Fix C preprocessor bug
  * Fix a minor bug in the dribble mode test

    If for some reason the opening of the socket is delayed, or simply takes
    too much time, the test will fail. This patch ensures that the test will
    only proceed once the socket is open.
  * version 0.1.3.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Fri, 22 Feb 2013 19:28:44 -0500


 (0.1.3)

  * version 0.1.3
  * Compile the plugin for both GStreamer 0.10 and 1.0

    Revert this patch to drop GStreamer 0.10 support
  * nicesrc: Use gst_buffer_fill
  * The plugin name is not a string anymore
  * Check gstreamer 1.0 not 0.11
  * GST_FLOW_WRONG_STATE -> GST_FLOW_FLUSHING
  * Use GstPushSrc as a base class
  * Port GStreamer src/sink to 0.11
  * Fix gaddr initialization
  * Only define _FORTIFY_SOURCE if optimisation is enabled
  * Merge remote-tracking branch 'shadeslayer/dribble_mode'
  * Also free the GCond and the GMutex
  * Allocate memory to stun_mutex_ptr and stun_signal_ptr
  * Cache GSocketAddress in UdpBsdSocket

    Creating a GSocketAddress takes a measurable amount of time, so let's cache it
    as it doesn't change once a socket is created.
  * Multiple fixes for new test

    * Make STUN thread drop STUN packets using a global variable
    * Completely refactor the way the STUN thread exits
    - Now exit by setting exit_stun_thread as TRUE and sending
    dummy data
    - Remove the old signal mechanism
    * Don't set unnecessary socket options
    * Lock stun_mutex_ptr before signalling STUN response
  * Fixes to dribble mode test as per suggestions

    - Use LEFT_AGENT and RIGHT_AGENT instead of calling GINT_TO_POINTER everytime
    - Add padding (0's in our case) before the actual payload and make sure the
    reciever checks for this padding. This ensures no STUN packets got through
    - Free GSList's properly in cb_agent_new_candidate
    - Use proper calls to g_signal_handlers_disconnect_by_func
  * Minor bug fixes and enhancements to the test
  * Update .gitignore for new test
  * Use %lu for long unsigned int when calling printf
  * Fix test-dribble

    The ragent state can be either NICE_COMPONENT_CONNECTED or NICE_COMPONENT_READY
  * Update documentation to reflect the dribble mode feature
  * Added new tests for dribble mode in libnice

    4 tests in total :

    * Common to all :
    - Gather lagent and ragent candidates
    - Delay STUN response for lagent
    - Make sure connchecks succeed and data is sent across
    to lagent

    * standard_test :
    - Set remote candidates for lagent while lagent is still
    gathering it's own candidates

    * bad_credentials_test :
    - Set incorrect credentials for both lagent and ragent
    - Make sure connchecks fail
    - Signal STUN response and set correct credentials

    * bad_candidate_test :
    - Set a bad remote candidate for lagent
    - Make sure connchecks fail
    - Signal STUN response and set correct remote candidates

    * new_candidate_test :
    - As soon as a new local candidate is found set it as
    the remote candidate for the other agent
  * Add conn_check_add_for_local_candidate to add the newly found local candidate to the conncheck list

    conn_check_add_for_local_candidate works exactly like conn_check_add_for_candidate
    except that it starts connchecks for newly found local candidates with existing
    remote candidates

    Refactor priv_add_local_candidate_pruned to accept a NiceAgent and a stream_id
    in order to call conn_check_add_for_local_candidate for newly gathered local candidate
  * Dribble Mode : Do not check whether we are still gathering our own candidates
  * version 0.1.2.1

-- Olivier Crête <olivier.crete@collabora.com>  Thu, 13 Sep 2012 21:31:18 -0400


 (0.1.2)

  * version 0.1.2
  * Recognize a matching check if it's an INVALID message (error with no error-code)
  * Reinitiate a FAILED conncheck pair on a triggered check
  * Use len instead of buf_len to check whether or not data was received properly
  * Properly ifdef windows headers in order to get compiles working on linux again
  * Added more tests on Visual Studio platform
  * Fixed size of memcpy
  * unistd.h is not present on Visual Studio. Replaced usleep with g_usleep to support win32 platform as well. Added WSAStartup/WSACleanup on win32
  * Fixed mingw/msys compilation. Definition for intptr_t was missing. Added WSAStartup/WSACleanup on win32
  * Fixed mingw/msys compilation. Definition for intptr_t was missing. Added WSAStartup/WSACleanup on win32
  * Added WSAStartup/WSACleanup on win32
  * Fixed mingw/msys compilation. Definition for intptr_t was missing
  * Fixed compiling on Visual Studio and removed getsockname before bind. Added WSAStartup/WSACleanup on win32
  * Fixed compile on mingw/msys platform
  * Added win32 section to .gitignore
  * Added support for compiling when gtk-doc is not installed
  * Added gio dependency
  * Fix test-bsd by calling g_type_init
  * Fix tcp-bsd/udp-bsd coding style, add robustness and remove use of name_len
  * Fix memory leak with udp-bsd
  * Callback now takes a GSocket * as argument
  * Fix coding style
  * Replace sockets with GSocket

    Use GSocket for better Windows compatibility
  * set nonblocking mode for socket on Windows
  * Changed EOL to libnice.sln and added config.h
  * Added Microsoft Visual Studio 2008 (v9.0) support
  * Remove redundant code from tests
  * WSAStartup/WSACleanup added on WIN32 platform
  * Fixed warnings on Visual Studio platform
  * Added fix for Visual Studio platform
  * Replaced __func__ macro with G_STRFUNC in the unit tests
  * Fix peer reflexive valid pair priority.
    Should use the remote priority rather than the priority of the parent pair
    Thanks to Filippo Della Betta
  * fixed warning guint32/guint64
  * Error definitions moved to pseudotcp.h on WIN32 platform
  * Fix declaration after statement error on VS
    Since Visual Studio compiler does not support C99 I put some declarations
    at the beginning of the statement.
  * Added typedef on size_t and ssize_t that are not defined on Visual Studio platform
  * Included the replacement header win32_common.h instead of the missing header stdint.h on WIN32 platform
  * Use g_io_channel_win32_new_socket for windows
    As glib documentation suggests (http://developer.gnome.org/glib/2.28/glib-IO-Channels.html),
    g_io_channel_unix_new should be avoided on WIN32 platform.
    Replaced with g_io_channel_win32_new_socket function
  * Use size of the MD5Context, not size of the pointer
  * Use the correct enum
  * Return real origin when using a proxy (fixes detecting TURN sockets)
    If using a proxy, the 'from' of all packets were of the proxy server
    instead of the turn server, causing the check for turn to fail.
    Thanks to Madaro Livio.
  * udp-bsd: Do not return an error for CONNRESET errors from ICMP
    I have a use case where len < 0 but the socket is still working.
    It is when the stun server is not listening and the client receives
    ICMP messages. I think it is a Windows specific problem.
    Calling WSAGetLastError() returns WSAECONNRESET.
    The MSDN documentation sais:
    "On a UDP-datagram socket, this error would indicate that a previous
    send operation resulted in an ICMP "Port Unreachable" message."
    http://msdn.microsoft.com/en-us/library/windows/desktop/ms740121(v=vs.85).aspx
  * Do not crash if the TURN server is invalid or not listening
    If TURN server is not listening then nice_tcp_bsd_socket_new
    returns socket=NULL and libnice crashes.
  * oups, version should be 0.1.1.1
  * stund: Use recvfrom/sendto instead of recvmsg/sendmsg
  * stund: Set message length (fixes infinite loop) when receiving unknown attributes
  * Merge branch 'master' of ssh://dhansak/srv/git.collabora.co.uk/git/libnice

    Conflicts:
    configure.ac
  * Keep TURN credentials (realm/nonce) from allocation for the refresh request.
    Calling nice_agent_remove_stream will try to release the TURN allocation (lifetime=0)
    but it won't work because the CandidateRefresh doesn't contain credentials
    for user authentication (if it happens right after the allocation).
    The server replies with an authentication error but the client closed the socket
    and does not reply to it.
  * The server reflexive candidate gathered from the turn server is
    not valid if the socket is reliable (TCP).
    The patch does not add the candidate to the local candidate list
    if the socket is reliable.
  * Disable retransmission of turn messages for reliable socket.
    If a client connects to a TURN server using a reliable socket (TCP)
    then retransmission of TURN messages (allocation request) is not needed.
    Libnice 0.1.1 retransmit the TURN messages (allocation request) in the
    same way for reliable (TCP) and not reliable (UDP) socket.
  * Fix sending data padding for TURN TCP draft 9 and RFC 5766
    Data padding is required for interoperability with standard TURN server.
  * only create the unknown-attributes error if we are going to send it
  * some debug message
  * Mark pair as nominated when it's a remote peer-reflexive candidate discovered through an early incoming check which has use-candidate
  * Refuse remote candidates on a stream only if that specific stream is gathering.
    This should fix the use case of creating a stream 1, gather until finished
    then creating another stream, gather its candidates, then setting the
    remotes on stream 1 (which is already gathered) while stream 2 is still gathering.
  * Fix missing semicolon from previous commit in test-restart
  * Fix builds for systems using glib 2.3.81 and above
  * Do not check for upnp_mapping if UPnP is disabled at compile time
  * test-fullmode: if upnp is disabled, then disable it in both agents
  * Fix typo: Cancel the UPnP timeout if all scheduled upnp requests are done
  * Do not signal gathering-done if UPnP is still waiting for an answer
  * Add -no-undefined to ldflags

    This ensures that all the symbols are defined during link time, and also
    without this option .dll files for windows are not produced.
  * Fixes the linker errors we get under mingw32

    When we link agaist libnice under ming32, the client applications
    fails to link. this patch fixes that
  * Changes windows specific headers to lower case

    This helps us when cross compiling libnice for Windows from Linux
  * Set HAVE_GETIFADDRS only if ifaddrs.h is found, not if any of arpa/inet.h net/in.h and ifaddrs.h are found
  * Add support for windows's compilation through MinGW
  * Update TODO
  * Change glib dependency to >= 2.13 because of G_PARAM_STATIC_STRINGS
  * Update .gitignore
  * Remove warnings on stun/tests
  * Use only POSIX statements in nice/Makefile.am
  * Don't pass the agent to the socket layer
  * Keep a ref on the GMainContext that are attached to
  * Use the agent's main main-context for the tcp-bsd callback as it's for sending
  * Version 0.1.1.1
  * version 0.1.1.0

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Tue, 03 Apr 2012 16:37:38 -0400


 (0.1.1)

  * version 0.1.1
  * Fix support for solaris
  * Google puts the STUN cookie, but doesn't follow RFC 5389

    Google puts the stun cookie, but it doesn'T follow RFC 5389 at all,
    so ignore the STUN cookie in Google mode.
  * Fix check-symbols test for PPC64
  * Merge remote-tracking branch 'main/master'
  * Use a Queue in gstnicesrc to avoid multiple read_callbacks overwriting the out buffer
  * Updating README file
  * Updated to the TURN RFC
    Don't mention TURN and UPnP IDG in the "future" section
  * Remove useless conncheck_state

    Member variable of struct _Stream is assigned to but never read.
  * Rename the internally used librandom into libnice-random to avoid any possible conflict
  * Updating TODO file
  * Fix a (possible) memory leak in nice_turn_socket_new and in a test
  * Use IN6_IS_ADDR_LINKLOCAL in a more portable way
  * Use #!/bin/sh instead of #!/bin/bash
  * Use only POSIX statements in Makefile.am
  * Remove some "set but not used" variables since GCC 4.6 emit a warning about that
  * Avoid a possible coverity false positive
  * Change variable buffer_len into attribute_len: variable already exists in different scope
  * Add some new APIs to sha1 module, unused for now
  * coverity: fix possible buffer overrun with turn and IPv6. Use sockaddr_storage
  * Fix coverity issues, remove possibly NULL dereferencing
  * test-fullmode: add some debug output to track down a weird bug..
  * Add some debug output when errors happen and the conncheck is cancelled
  * Version 0.1.0.1
  * Print size_t with the right argument
  * Only restart the timer once
  * Remove some dead code
  * Reset the connectivity check timer when we get triggered checks

    Current nice has a race where if the remote site only punches their side
    of the NAT after we have done the maximum number of retransmissions,
    we'll never send a new connectivity check (which would be successful).
    Causing the connectiviy check to fail eventually, even though it
    shouldn't have.

    By resetting the conncheck timer nice will always send new stun packets
    for connectivity checks afterwards, but also sent connectivity checks
    quicker so we can establish the connection quicker.
  * Also initialize the number of timer retransmissions
  * Only restart the timer once
  * Remove some dead code
  * Reset the connectivity check timer when we get triggered checks

    Current nice has a race where if the remote site only punches their side
    of the NAT after we have done the maximum number of retransmissions,
    we'll never send a new connectivity check (which would be successful).
    Causing the connectiviy check to fail eventually, even though it
    shouldn't have.

    By resetting the conncheck timer nice will always send new stun packets
    for connectivity checks afterwards, but also sent connectivity checks
    quicker so we can establish the connection quicker.
  * Also initialize the number of timer retransmissions
  * Version 0.1.0.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Wed, 07 Sep 2011 20:59:03 -0400


 (0.1.0)

  * Version 0.1.0
  * Send new-candidate signals for host cands only if the gathering was successful
  * Add some testing for the nice_agent_set_port_range API
  * Clear the sockets when removing the candidates
  * Fix doc for nice_agent_gather_candidates
  * Make sure that we revert/free the candidates gathered before an error occured if we can't gather
  * Add a nice_agent_set_port_range API to allow forcing the listening port on local host candidates
  * Do not gather candidates if we can't listen to the host interface
  * Fix a crash (Broken pipe) if we send to a TCP socket that had an error
  * define SOL_IPV6 to IPPROTO_IPV6 if not defined
  * Add support for RFC TURN TCP
  * test-fullmode: disable checking for the expected selected-pair signal when using TURN because that value is unpredictable
  * test-fullmode: better support for TURN testing, some tests can't work with turn by nature
  * Merge branch 'master' into rfc5766
  * only remove sources that are valid
  * handle the permission response instead of having the code handled in the error case
  * test-fullmode: Add a USE_RELIABLE option to enable/disable reliable mode
  * turn: Do not access the response's attributes if there is no response
  * Do not destroy the object until we're done using it..
  * test-fullmode: Clean the credentials exchange by using a single function
  * test-fullmode: remove the old code that sets candidates from one agent to another and do it properly
  * Add a USE_UPNP option to test-fullmode
  * Add a USE_PROXY option to test-fullmode
  * Fix a typo, use the proper enum comparison for NiceRelayType
  * Do not destroy the retransmission timer that just got created by priv_schedule_tick
  * Do not loop forever if we keep getting unauthorized error on create_permission
  * Add the expired binding to the pending list before destroying it
  * If a channel bind couldn't be renewed when it expired, then renew it after we finish the current binding
  * Make sure we don't free a currently being-refreshed binding
  * Make the binding timeout unique per channel binding. And refactor code.
    The binding renewal must be sent 60 seconds before it expires, but also add
    a second timer to destroy the binding if the renewal fails.
    Also refactored to make sure the binding is correctly handled when we receive a success response.
  * Refuse to create a permission without a peer instead of not sending the XOR_PEER_ADDRESS
  * Destroy sent_permissions and remove tick_source_create_permission and binding_timeout_source in socket_close
  * Some minor changes, code cleaning
  * Remove trailing spaces
  * Fix lines that are > 80 chars
  * Fix compilation errors as a result of the rebase
  * fix indentation issues
  * Removed trailing whitespaces that had appeared..
  * Fixed some whitespace before function calls (nice_debug)
    Removed a couple of more debug outputs
  * Remove a couple of unnessesary debug outputs
  * Remove unnessesary changes
  * Re-arrange the code when obtaining a permission and enqueueing data
  * Use a flag for active bindings in the ChannelBinding struct instead of keeping track of that
    in the TurnPriv struct.
    Removed a debug printout and an unused variable
  * Move code handling lists of installed and pending permissions into separate functions.
    Removed a couple of unnessesary calls to nice_address_new
  * Remove some debug outputs and an exit call that I had accidentally left in for debug...
  * Don't log pending permission messages more than once (when resending the message with
    message integrity)
    Added some debug output that shall be removed...
  * OK, so nice_address_equal does not fullfill GCompareFunc, use custom lookup functions
  * Fix a couple of whitespace-before param list issues
  * Removed unused variable
  * Fix indentation
    Remove sent_binding boolean, use current_binding_msg instead
  * Revert value for test TURN server
  * Fixing tabs, trailing whitespaces and indentation
  * Use a string hash on the string representation of a NiceAddress as a the hash value
  * Use a GList instead of a GHashTable to store peers for which there is a pending CreatePermission
  * Store permissions in a GList instead of a GHashTable
  * Use g_queue_is_empty instead of g_queue_get_length
  * Removed unused field in SendData struct
  * These line-breaks where not nessesary...
  * Added comments on new fields and a new struct
  * What was I thinking... this should ofcourse be freed like a SendData, not a SendRequest... copy paste... :)
  * Forgot to initialise the sent permissions hash table
  * Fix, make the nice address hash function actually work correctly
  * Fix a double-free bug
  * These actually needs to be copied for the hash table here...
  * Woops, missed a few changes...
  * Track permission per peer, take one (untested so far...)
  * Removed some debug messages that might be a little unnessesary
  * Don't schedule refresh of permission if we got an error response on the first CreatePermission
    message.
  * Dispatch enqued data when a TURN server returns an error on CreatePermission or
    if the request times out (assume the server doesn't support it)
  * Revert changes to fullmode test
  * Remaining changes for RFC 5766
  * Changes in agent/agent.c
  * Rename tick_source into tick_source_channel_bind to make it more clear on what it does
  * Allow nice_debug_enable and nice_debug_disable to be called before the first NiceAgent is instanciated
  * oups, fix candidate gathering when there is no nice_agent_set_address being called
  * Free strings in property setters and dispose
  * MS-TURN: comments and fixes

    Added comment explaining need of nice_turn_socket_set_ms_... functions
    in priv_map_reply_to_relay_request().

    Fixed bug in nice_turn_socket_new() where by accident I put both  STUN_AGENT_USAGE_SHORT_TERM_CREDENTIALS
    and STUN_AGENT_USAGE_LONG_TERM_CREDENTIALS as usage flags to
    stun_agent_init().
  * MS-TURN support for Microsoft Office Communicator
  * Compatibility with MSOC 2007
  * Compatibility with MSOC 2007 R2
  * Remove possibly unused variables if NDEBUG is set
  * Make stun_timer timeouts configurable (breaks API)
  * Document error cases of nice_agent_send
  * Cleaner compilation with AM_SILENT_RULES
  * remove unused variable
  * Do not modify agent->local_addresses in the nice_agent_gather_candidates.
    The agent->local_addresses should not change when we gather_candidates, let
    the user set it with nice_agent_add_local_address, if he does not, then we
    should auto-discover interface *during* the gathering process, and not save it.
    Currently, when we call gather_candidates, we discover interfaces and save it to
    agent->local_addresses as if someone called the _add_local_address API... problem
    is that if we have 2/3 interfaces, we do an audio call.. an interface disappears
    (vmware closed/whatever) then we upgrade to a video call, then libnice will reuse
    the old interface list instead of the current ones..
  * Update gtk-doc to reflect change to gather_candidates
  * Return FALSE from gather_candidates if the stream was invalid
  * Do not error out forever if an interface/ip is invalid when gathering candidates.
  * Make it clear that the stun-server property takes an IP address and not a port
  * Add nice_candidate_copy to the public API
  * Fix typo in gtk-doc s/GList/GSList/
  * fix typos
  * Version 0.0.13.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Thu, 20 Jan 2011 20:16:49 -0500


 (0.0.13)

  * Version 0.0.13
  * Merge remote branch 'tester/misc-fixes' into nice-kakaroto

    Conflicts:
    agent/agent.c
  * Merge remote branch 'tester/ipv6' into nice-kakaroto
  * agent: Creating TURN TCP socket can not fail
  * agent: Return an error instead of aborting if there was no host candidate
  * wtf.. should not set added to -1 since we continue adding other candidates and e want to schedule_next if one succeeded
  * Make sure the address of the remote candidate is valid when we add it
  * Please coverity : check if data is not NULL before dereferencing it
  * Verify the content of an array, not if it is there
  * Rename function crc32 to stun_crc32 to avoid conflict with existing crc32 function in libz.so
  * no need for ntohs when we do nice_address_get_port
  * interfaces: With IPV6, we can have more than one loopback address
  * interfaces: Also return IPv6 addresses
  * tcp-bsd: Create IPv6 socket if it such an address
  * udp-bsd: Create IPv6 socket if it such an address
  * g_free is NULL-safe
  * discovery: Simplify slist freeing
  * agent: Remove useless checks and simplify error handling in priv_add_remote_candidate
  * discovery: Clean up error handling in discovery_add_relay_candidate
  * discovery: Clean up error handling in discovery_add_local_host_candidate
  * udp-bsd: Remove useless check from nice_udp_bsd_socket_new
  * tcp-bsd: Fix possible leak
  * conncheck: Remove useless checks from priv_store_pending_check
  * conncheck: Remove useless return value from priv_add_new_check_pair
  * conncheck: Remove useless checks from priv_add_new_turn_refresh
  * conncheck: Remove useless checks from priv_add_peer_reflexive_pair
  * conncheck: Remove useless checks from priv_add_new_check_pair
  * discovery: Remove useless checks from discovery_learn_remote_peer_reflexive_candidate
  * discovery: Remove useless checks from discovery_add_peer_reflexive_candidate
  * discovery: Remove useless checks from discovery_add_reflexive_candidate
  * discovery: Remove useless checks from discovery_add_relay_candidate
  * discovery: Remove useless checks from discovery_add_local_host_candidate
  * discovery: Remove useless checks from priv_add_local_candidate_pruned
  * agent: Remove useless checks in io_ctx_new
  * component: Remove useless checks in component_set_selected_remote_candidate
  * agent: stream_new can't fail
  * stream: Remove useless checks from stream_new
  * agent: Remove useless checks from priv_add_remote_candidate
  * agent: Remove useless checks from nice_agent_add_local_address
  * agent: Remove useless checks from nice_agent_add_stream
  * agent: Remove useless checks from priv_add_new_candidate_discovery_turn
  * agent: Remove useless checks from priv_add_new_candidate_discovery_stun
  * Version 0.0.12.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Tue, 20 Jul 2010 17:57:08 -0400


 (0.0.12)

  * Version 0.0.12
  * Change the compatibility modes from DRAFT19 to RFC5245
  * Check for username/password lenght of socks5 proxy to avoid a buffer overflow
  * Merge remote branch 'sjoerd/master' into nice-kakaroto
  * Keep our GMainContext referenced

    We need to keep the GMainContext referenced so we can be sure it's
    still alive when we remove the sources we've attached to it.
  * oups, we need to free the incoming checks only after we process them, not inside the loop processing them...
  * version 0.0.11.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Wed, 19 May 2010 16:31:47 -0400


 (0.0.11)

  * version 0.0.11
  * Add 'since 0.0.11' to the docs for pseudotcp methods
  * Fix build on FreeBSD.

    POSIX (http://www.opengroup.org/onlinepubs/009695399/basedefs/netinet/in.h.html) specifies that sockaddr_in is defined in netinet/in.h. Include the header where this struct is used.
  * Fix typo and cast nice_address_free
  * TURN: pending_bindings is of type NiceAddress not ChannelBinding.
    Thanks to Olivier for spotting this.
  * Adding pseudotcp API to the exported symbol list
  * After 5 hours of debugging... finally! remember to always remove the weak pointers when not needed anymore!
  * Ouch, that doesn't unlock our mutex, fix it
  * Use a bigger buffer size in the readable callback
  * Use weak pointers to make sure that the recv callback does not destroy our object, and if it does, make sure not to use the agent or PseudoTcpSocket to avoid a crash
  * Fix a attach/detach recv bug where if we detach our recv callback from the nice agent during the callback of the tcp_readable, we would end up having the loop consume all data from PseudoTcpSocket without notifying anyone of it. This now only consumes data if the callback is available, and calls the readable callback when we attach a new recv callback if the pseudo tcp socket was still readable and all its data wasn't consumed yet
  * remove some warnings from test-thread
  * return FALSE on g_error timers because new gcc refuses to compile without a return value from these functions
  * Get rid of NiceSocket from the candidate, and make it into an obscure gpointer.. then cast it (only twice) inside the code. This allows us to get rid of all those socket layer .h files from installation which were not needed to be public
  * Fix various gtk-doc warnings/errors and typos
  * Add pseudotcp and pseudotcp-verbose flags to the NICE_DEBUG env var to enable debug messages from pseudotcp socket too. And update the docs
  * enable debug message for test-pseudotcp
  * Add an API to enable/disable debug messages for pseudotcp
  * oups, always detach the stream component if we try to attach a new one
  * add G_BEGIN_DECLS and G_END_DECLS to debug.h as reported by Tom Kaminski on the mailing list
  * new INSTALL file generated by the latest version of libtool...
  * Disable strict aliasing.. since gcc 4.4.3, there are many warnings/errors caused by strict aliasing.. and it's hard to get the code clean without using unions everywhere especially when dealing with sockaddr_storage and sockaddr_in* structures. Since this is a socket library mainly, and sockaddr was designed for aliasing, it's best to just disable strict aliasing for the lib
  * remove the use of sockaddr and the memcopy, and use nice_address_get_port directly
  * Always start the conn check timer and the keepalive timer, even if initially there are no freezed check
  * we should accept NULL as a context for attaching the recv callback
  * make the nice_agent_new_reliable API part of the exported symbols
  * oups, correctly free the tcp clock/data when the component is freed, not only when the stream is manually removed through the API
  * Some comment/doc fixes
  * Fix copyright headers for all files
  * Properly free memory in pseudotcp, and do it in finalize, not in dispose
  * Adding 'Since' gtk-doc tags to specify since which version each function has become available (for non 0.0.1 ones)
  * Add error support for the pseudo tcp socket
  * Fix signals documentation
  * nice.fdo was never put up, revert the doc link to the correct domain
  * Fix test-pseudotcp to not fail randomly, use strncmp instead of strcmp
  * Make test-fullmode do the test over the pseudotcp reliable transport
  * Set the MTU to 1400 for pseudotcp
  * Add nice_agent_new_reliable to the libnice API which uses pseudotcp
  * Add pseudotcp docs and fix a bit the API and test
  * Adding test suite for pseudotcp
  * Adding pseudotcp implementation, copied from libjingle 0.4
  * do not try to connect a tcp socket with no destination address to connect to. Fixes coverity check when dereferencing addr
  * Keep the upnp and upnp-timeout properties available even if upnp is disabled during build. This is to prevent a break of the API from one build to another
  * Use GPOINTER_TO_UINT and GUINT_TO_POINTER to avoid an error when casting on kfreebsd
  * do not cast time_t and clock_t into unsigned long, on some systems (kfreebsd), it can lead to an error because of strict-aliasing
  * use sizeof struct sockaddr_in instead of sizeof struct sockaddr to hopefully fix the bug with sendmsg on BSD systems
  * in order to please coverity, do not have the return at the end of the function never reachable
  * Replace all sockaddr instances with sockaddr_storage to be ipv6 safe
  * always check return value of stun_agent_init_error
  * oups, possible bug here. reference priv->current_binding_msg before freeing it
  * do not call memcpy if there is no copying to be done.. avoid a warning with coverity
  * avoid warning by using fd argument when MSG_ERRQUEUE is undefined
  * check return value of agent_find_component
  * Make sure not to dereference the password if it's NULL
  * there's no need to use a memcpy for checking the username's validity in an incoming connectivity check
  * use g_strlcpy instead of strncpy for nice_interfaces_get_ip_for_interface too
  * use g_strlcpy instead of strncpy and memcpy for the candidate foundation, because it makes sure we have a trailing null char in our string.
  * do not dereference addr if it's NULL
  * add BSD support to the TODO
  * Increase test-bind timeout to 20 seconds since it was 10 and it took more than 9 seconds for the test.. so it would fail on some slower systems
  * removing unused variable ret in nice_address_to_string
  * Even for UDP sockets, we should handle EAGAIN errors because it can happen.. Apparently recvfrom can return EAGAIN on udp sockets if for example there's a bad checksum in the packet or some other similar error
  * Add a debug showing errno in case a socket gets an error
  * INSTALL file updated by autogen
  * Version 0.0.10.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Thu, 18 Mar 2010 16:55:56 -0400


 (0.0.10)

  * Version 0.0.10
  * Updating NEWS file for 0.0.10
  * Export the symbols for nice_agent_set_software and stun_agent_set_software
  * Add nice_agent_set_software and stun_agent_set_software documentation
  * Free the strduped software attribute when the nice agent gets disposed
  * Add a SOFTWARE attribute in test-fullmode test
  * stun_agent_set_software must also take a const char *, not just a char *
  * nice_agent_set_software must take a const gchar *, not just a gchar *
  * Adding a nice_agent_set_software API
  * add SOFTWARE attribute only if we're in the right compatibility mode
  * Add a stun_agent_set_software API and correctly append only the first 128 utf-8 characters
  * Fix obivous/stupid bug.. do not use variable i for looping inside the 'i' loop
  * Oups, fix bad copy/paste
  * Fix a crash in case a relay candidate could not be added (because of an error or because it's a redundant candidate), do not try to refresh it
  * Once we process the pending checks, we should free them to avoid reprocessing them again if a dribble-mode set_remote_candidates is called
  * avoid a memory leak in case of a restart
  * Properly cleanup the idle source in the gst src

    Also, do not re-create it if it already exists
  * use sizeof struct sockaddr instead of sizeof sockadddr_storage for doing the bind.. this fixes stund on BSD systems. Thanks to Tom Murphy for the fix
  * Do not use connect on UDP sockets and use sendto/recvfrom instead of send/recv because apparently on BSD a connect will fail on UDP sockets
  * Only prune pending checks once if there's a nominated pair, not 100 times for no reason
  * Correctly show the priority as a guint64
  * Only keep the srv-reflexive candidates alive by resending our initial STUN discovery during keepalive phase... this should fix the sending of over 300 completely useless connchecks that just spammed the network and filled our max saved ids for the stun agent requests, thus rendering future connchecks useless
  * Use candidate->type instead of candidate->turn to check if a candidate is of type RELAY
  * do not change the username/foundation for google TURN candidates
  * nicesrc: Don't leak a ref to the main context
  * version 0.0.9.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Wed, 04 Nov 2009 17:30:51 -0500


 (0.0.9)

  * version 0.0.9
  * Update doc
  * add the doc for nice_agent_set_stream_tos
  * Change new API to nice_agent_set_stream_tos, save the tos and apply it to new sockets
  * Add ToS support for libnice
  * include sys/time.h in timer.h instead of timer.c since we need it for the struct timeval
  * if MSG_ERRQUEUE is not defined, then make recv_err return something since it's not a void function
  * Add the AC_DEFINE for HAVE_GETIFADDRS
  * include sys/socket even if HAVE_GETIFADDRS isn't defined
  * oups, agent undefined
  * Do not limit the size of the conncheck list if we're not using DRAFT19.. google mode may require more than 100 connchecks and only latter candidates may succeed. Also show a debug message in case we drop conncheck elements
  * Add correct conncheck pairs for discovered remote peer reflexive candidates. This fixes a bug with gtalk
  * Fix SHA1 algorithm when strict aliasing is used : http://bugs.archlinux.org/task/15189
  * fix up a little the test program in the docs
  * Correctly find the username of a peer-reflexive candidate in google mode when it's received as an early icheck
  * version 0.0.8.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Fri, 31 Jul 2009 17:07:49 -0400


 (0.0.8)

  * version 0.0.8
  * Update TODO
  * force autoreconf so libtoolize can renew its files
  * Initialize the length to 0 to avoid a compiler warning
  * no more need for refcounting the request since we use g_source_is_destroyed
  * unlock the mutex before calling the recv callback
  * Use a global mutex for all nice agents and use g_source_is_destroyed to avoid the race condition of a source being destroyed while we wait for the mutex
  * Remove deprecated g_strcasecmp
  * Use addr instead of base_addr for assigning remote foundation for remote peer-reflexive candidates. addr will always be defined but base_addr won't always be
  * Version 0.0.7.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Fri, 19 Jun 2009 18:37:52 -0400


 (0.0.7)

  * version 0.0.7
  * Add support for droping packets when using TCP and the bandwidth is too slow for the data output. The queue now has a limit of 20 packets and the tcp-turn now has to call send in a single shot to avoid dropping parts of the packet (dropping the length but send the data, or dropping only the padding at the end, etc..)
  * Updating TODO
  * Fix foundation generation for remote peer reflexive candidates
  * by Olivier Crete : Really return the next available foundation
  * fix keepalive issue when there is network/cpu bottleneck
  * fix peer reflexive candidate's priorities for msn/google
  * Keep in progress checks running if their priority is higher than the nominated pair...
  * update TODO list
  * properly set remote candidates for delayed answer test, also include the delayed answer test in the google mode testing
  * should avoid a race condition where a remote candidate is taken as a peer reflexive and we loose its user/pass settings
  * Use thread-safe version of GUPnP Simple IGD
  * Attempt to work around binding responses with no mapped address to have interop with gtalk2voip.com ICE implementation. Thanks to wahjava for reporting the issue
  * unse the timer's source if they return FALSE
  * Adding a TODO file
  * use localaddr before testing if externaddr is valid
  * oups, arguments given in the wrong order...
  * no need to set the request timeout
  * fix a possible crash if the address is invalid
  * Make the upnp timeout 200ms so that it doesn't lag too much and so that it works correctly once gupnp-igd 0.1.3 is released
  * Link the lib against gupnp too
  * Link manual building with GUPNP if available
  * Make libnice dependent on gupnp-igd >= 0.1.2 since the error-mapping signal API changed
  * Fix compilation when gupnp-igd is not found
  * if USE_LOOPBACK=0 do not add a fixed ip in test-fullmode
  * Hopefully fix a race condition when disposing of the turn socket and the timer to forget the sent request transaction ids
  * Add UPnP support to libnice
  * Fix confusing docs, addr_len is an IN and OUT variable...
  * Add -n to stunbdc usage string
  * version 0.0.6.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Thu, 11 Jun 2009 14:42:05 -0400


 (0.0.6)

  * version 0.0.6
  * Fix documentation
  * Updating NEWS file
  * Updating docs
  * Improve test-turn to test for turnserver locally too
  * Disable test-turn as its dependent on internet and on an external server
  * Set test-turn to use turnserver locally instead of numb.viagenie.ca
  * Return 0 in stun_agent_finish_message if there is no more slots for saved ids
  * MSN calls do not support keepalive connchecks, so enable keepalive connchecks for google only and not for != DRAFT19
  * oups, this caused non-msn calls to fail
  * Don't answer to MSN if you don't know from which remote the request came
  * Change send_requests GList into a GQueue to allow a faster push_tail
  * Fix refcounting correctly. Don't forget to decrement the reference kept by the GList
  * Add some kind of refcounting to avoid race conditions
  * Destroy the keepalive retransmission timer if the component is destroyed
  * Correctly forget turn send request transactions if they time out
  * fix an if/else correctly
  * Set libnice specific debug domains
  * If underlying socket errors out, do not parse_recv for turn
  * Verify the return value of stun_agent_finish_message and similar functions
  * Call stun_agent_forget_transaction when a transaction times out to avoid using all the saved id slots in the stun agent
  * Adding new stun API stun_agent_forget_transaction to forget a saved transaction id when the transaction times out
  * useless unit test.. it doesn't test libstun, it only tests the behavior of sendto.. which btw, seems to be different on my pc since my last apt-get ugrade, which causes the unit test to fail
  * 10x larger saved transaction ids array. In a 2 stream setup with 4 candidates (host, srv, relay, peer) and with keepalives, we can easily reach the previous limit
  * Fix a race condition crash with retransmission ticks (read comment)
  * Refuse invalid relay informations
  * Send a keepalive/conncheck as soon as we establish connectivity.. this should help with a race condition we get with gtalk
  * no more need for media_after_tick, useless and doesn't help much
  * Merge commit 'tester/gst-fix' into nice-kakaroto
  * version 0.0.5.1
  * version 0.0.5
  * make distcheck doesn't work without this...
  * Change the top_srcdir and ../ directories from Makefile.am to use top_builddir where needed
  * Updating NEWS with the latest changes
  * Set a title for the STUN usages
  * Install the headers to the appropriate directory and specify how to include the files from the docs
  * Move functions and prototypes from one file to another to avoid having to install non public headers
  * Change includes to minimize non public API from being included
  * Fix the stupid wlm2009 crc32 typo without using a global variable
  * Fix TURN MSN for WLM2009 compat
  * Updating gitignore to ignore the stund/stunbdc tools
  * Match the response correctly and stop the retransmissions when we get the response
  * Add stream id and component id and set the agent properly to avoid a segfault
  * some code cleaning
  * clear the retranmission timer and free the keepalive stuff if we ever update the selected pair
  * Add support for conncheck keepalives with retransmissions and timeout
  * Update docs, finish formatting the gtk-doc and add the STUN API to the exported symbols list
  * Add docs for WLM2009 compat
  * gtk trick to recognize a typedef + struct, use an underscore... allows the content of the struct to appear in the gtk-doc
  * stun_validater_data renamed to StunDefaultValidaterData for consistent naming convention
  * Add documentation for libstun and fix some docs elsewhere
  * fix some warnings by removing gtk-doc comment where not needed
  * Stun agent usage flags are now into an enum too
  * Remove some turn defines and use an enum instead (StunUsageTurnRequestPorts) and document a little
  * Clean up utils.[ch] and document the exported functions
  * Rename STUN_USAGE_TURN_RETURN_RETRY into STUN_USAGE_TURN_RETURN_INVALID
  * Rename STUN_USAGE_ICE_RETURN_RETRY into STUN_USAGE_ICE_RETURN_INVALID
  * Rename STUN_USAGE_BIND_RETURN_RETRY into STUN_USAGE_BIND_RETURN_INVALID
  * Rename stun_has_cookie into stun_message_has_cookie
  * Remove compilation of stun trans
  * Move the trans stuff into the bind usage as it's the only place it's needed is for the synchronous binding
  * Removing the stun trans usage as it is not really a stun usage... but just helper functions around socket
  * Add gtk-doc for stunmessage API
  * Removing unused function
  * Clean the files from unwanted gtk-doc tags
  * Cleaning gitignore
  * Change all stun_XXX_t enums/structs into StunXxx to have a common naming convention
  * Find and document every message attribute/error code and from which RFC/Draft they come from.. Also updated the error-codes strings
  * No more need to ignore the fingerprint now that we know what was wrong with M$ crc32 algo
  * stupid WLM 2009 CRC32 typo workaround (ugly, I know...)
  * Lock src when modifying idle_source
  * yeayyy, stupid WLM2009 seems to generate wrong fingerprints from time to time (not always) so we just skip fingerprint checks...
  * hacky trick to copy the user/pass from a candidate if we learn a peer-reflexive candidate, that we're not in msn compat, and that the user didn't use the set_remote_credentials API
  * do not search for local/remote candidates using the username if we are not in google/msn mode because for draft19, the username is global, not per candidate
  * Correctly generate WLM2009 username
  * Allow specifying the fakelen for stun_sha1 and make the WLM2009 compatibility mode use the fakelen including the fingerprint length
  * add WLM2009 compatibility mode to libnice and libstun
  * Check for endianness at runtime instead of relying on defines that might not be defined everywhere...
  * Fix bug where a discovered peer-reflexive pair does not get nominated
  * Port libnice agent to the StunUsageIceReturn API for stun_usage_ice_conncheck_create_reply
  * Port libnice agent to the StunMessageReturn API
  * Port libnice agent to the StunUsageTimerReturn API
  * Porting the unit tests to use the new stun API
  * removing useless include of errno in stunbdc
  * Porting the stun agent to use the new StunMessageReturn API
  * Porting stun usage bind to use the new StunUsageTransReturn API
  * Porting stun usage bind to use the new StunUsageTimerReturn API
  * Porting stun usage bind to use the new StunMessageReturn API
  * Porting stun usage ice to use the new StunMessageReturn API
  * Porting stun usage turn to use the new StunMessageReturn API
  * some code cleaning and removing dead code from stun usage ice
  * Port stun usage ice in stun_usage_ice_conncheck_create_reply to use a StunUsageIceReturn enum instead of errno values to communicate errors
  * Port stun_xor_address to use StunMessageReturn and removed stun_memcp and stun_strcmp which are unused and useless
  * Port stun usage trans to use a StunUsageTransReturn enum instead of errno values to communicate errors
  * Port stun usage timer to use a StunUsageTimerReturn enum
  * Making the stun_message API use a StunMessageReturn enum instead of errno values to communicate errors
  * Fix the prvious bug.. the SHA1 algorithms should be in HANDSOFF mode so it doesn't modify our data
  * Adding a unit test that fails because of a bug somewhere...
  * http.h needs to be installed too
  * Fix include files getting installed to /usr/include/libnice after the name change... it should be kept as /usr/include/nice to not break the API
  * install interfaces.h and add it as include to nice.h
  * Fix dribble mode for libnice.. adding a new remote candidate after one was nominated doesn't break anymore
  * Forgot to add Makefile.am and adding unit test for dribble mode
  * use TRUE/FALSE instead of true/false
  * remove unused COMMON_LDADD
  * Move tests from agent and socket, into its own tests directory.. fixes issue when doing make check before doing make all
  * Fix the generation of docs for nice_interfaces
  * make the NiceAgent automatically search for all the interfaces if none was set manually
  * Add nice_interfaces API
  * no declarations after code.. this way it will build on windows
  * Adding HTTP proxy support
  * Changing library name 'nice' to 'libnice'
  * version 0.0.4.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Tue, 31 Mar 2009 16:14:59 -0400


 (0.0.4)

  * version 0.0.4
  * remove useless agent in socks5 proxy, fix copyright and return FALSE in send, if we're in an error
  * do not assign the same foundation for candidates from different streams
  * test TURN_TLS for google, it's better...
  * Add proxy settings to test-fullmode and test the setter/getters on them
  * Add support for SOCKS5 proxy servers
  * add proxy properties to NiceAgent
  * return an error if we couldn't negociate the ssl handshake
  * free the to_be_sent queue if we get closed and the queue is not empty
  * use g_slice_new0 instead of g_slice_new
  * recv returns 0 if the socket was shutdown, so we must return -1 so the agent stops the source
  * remove the source once the socket reports an error
  * test tcp turn for turnserver.org
  * typo fix #ifdef/#if
  * Socket layer refactorising and adding of tcp-bsd, pseudossl, and moved the tcp stuff from tcp-turn and made udp-turn into turn since it's generic
  * correctly find the component when checking for which component to fail
  * Change the priv_agent_to_turn_* functions into non static functions instead of duplicating them
  * set a component to FAILED only if it had remote candidates set
  * Merge commit 'tester/revert-netbuffer' into nice-kakaroto
  * change int/pointer conversion using GUINT_TO_POINTER and GPOINTER_TO_UINT macros, otherwise it won't compile on 64bits machines
  * version 0.0.3.1
  * Revert "Create a netbuffer directly instead of using gst_pad_buffer_alloc"

    This reverts commit c8cd93a9a92d579f2a7090acea65e72180b358a4.
  * Revert "Save the to/from addresses and put them in newly created buffers"

    This reverts commit cbe7189aaa53093a593e5b07cc8de5050e95ee98.



-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Wed, 17 Dec 2008 17:42:11 -0500


 (0.0.3)

  * version 0.0.3
  * do not unref if it's NULL.
  * __BYTE_ORDER is not defined in windows, so we assume we're little endian whenever we're building on windows...
  * fix random number generation for windows
  * also add the tcp socket to the list of sockets so it gets freed and also gets attached if the context is added after the gahter is made
  * do not use the same variable name for two different things... with one being inside a smaller scope of the same function... this could lead to confusion...
  * just run one google test, others won't work anyways because they are draft19 specific
  * add some debug
  * set gathering to FALSE before signaling the candidate-gathering-done, so we can set_remote_candidates in the signal handler
  * fix crash with tcp turn, we should get our local binding address
  * fix udp-turn closesocket for windows. use sockfd since sock->fileno is not yet set
  * do not send an error response in case the username check failed for gtalk compatibility. we should just drop it like libjingle does.. if the remote candidates weren't added yet, then we'd send the error response which would make the other client match the id, but also fail with integrity check (since the error response has no username in it), and all retransmissions will fail with unmatched_response.
  * Remove openssl dependency by adding a random number generator implementation into libstun
  * use the correct len for tcp-turn and memset the sockaddr to 0
  * Use the correct size for sockaddr_storage, otherwise it won't work on mac os x. Also use some cleaner code
  * adding unit test for sha1/md5 implementations
  * Adding sha1 and md5 implementation and remove the openssl use of them
  * refuse set remote candidates if we are still gathering
  * typo fix
  * fix doc
  * do not do a strdup for nothing, which may lead to memleaks too
  * Adding some more debug
  * remove the version line from the docs
  * version 0.0.2.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Tue, 25 Nov 2008 18:56:02 -0500


 (0.0.2)

  * version 0.0.2
  * remove the traffic_after_tick check because it caused problems with jingle. we need a tick every 25 seconds, but with that, the conncheck happens at 0s, and when the keepalive gets called @25s, it gets skipped and we only send our first keepalive after 50seconds... which means that jingle which stops processing if it doesn't receive a ping after 30 seconds, will stop playing our audio from 30 seconds to 50 seconds...
  * use a different port for the relay to make sure we don't confuse the google relay server between an internal and external connection
  * initialize the sockaddr correctly.. with this commit, libnice now passes valgrind checks
  * free addrinfo on the numb server
  * free ufrag and password returned by get_local_credentials
  * free candidates returned by nice_agent_get_local_candidates
  * use nice_address_new and nice_address_free instead of g_new0 and g_free
  * fix stund against strict aliasing issues
  * store the udp_turn relay socket into component->sockets so it gets freed at the end too
  * use memmove instead of memcpy to avoid overlaps
  * get_local_credentials strdups the credentials so it shouldn't be a const
  * race condition where the whole thing finishes up before g_main_loop_run(error_loop) gets called, so it gets stuck.. so we need to delay all threads by a little...
  * use a dedicated stun agent for stun binding discovery because we'll need to be compatible with rfc 3489
  * use stun_agent instead of turn_agent in order to be more generic
  * no need for aclocal.m4 in EXTRA_DIST, make dist already copies it
  * add all necessary files to EXTRA_DIST
  * do not do turn in test-fullmode for the delayed SDP answer
  * correctly pass -Wall and -Werror dependending on whether we are in a release or not
  * test-fullmode ported to use NICE_RELAY_TYPE_TURN_UDP
  * a peer reflexive candidate must store the username and password from its parent candidate when in google mode
  * do not reset a connectivity check to 'in progress' when we get a triggered check on it and we're already done
  * Add debugging info on every state change for a pair
  * correctly count nominated pairs (just for debug)
  * some google testing modes for test-fullmode
  * Merge commit 'ffc0146' into nice-kakaroto
  * Adding wspiapi.h include for windows since versions prior to windows XP
    do not have the getaddrinfo/freeaddrinfo/getnameinfo functions in
    ws2_32.dll.
    As described in :
    http://msdn.microsoft.com/en-us/library/ms738532(VS.85).aspx
    <quote>The getnameinfo function was added to the Ws2_32.dll on Windows
    XP and later. If you want to execute an application using this function
    on earlier versions of Windows (Windows 2000, Windows NT, and Windows
    Me/98/95), then you need to include the Ws2tcpip.h file and also include
    the Wspiapi.h file. When the Wspiapi.h include file is added, the
    getnameinfo function is defined to the WspiapiGetNameInfo inline
    function in the Wspiapi.h file. At runtime, the WspiapiGetNameInfo
    function is implemented in such a way that if the Ws2_32.dll or the
    Wship6.dll (the file containing getnameinfo in the IPv6 Technology
    Preview for Windows 2000) does not include getnameinfo, then a version
    of getnameinfo is implemented inline based on code in the Wspiapi.h
    header file. This inline code will be used on older Windows platforms
    that do not natively support the getnameinfo function.</quote>

    Thanks to BW from aMSN forums for helping me find this!
  * version 0.0.1.1

-- Youness Alaoui <youness.alaoui@collabora.co.uk>  Wed, 12 Nov 2008 20:54:59 -0500


 (0.0.1)

  * update design document... maybe should be removed
  * Multiple relays can be set per component, so we need to make sure we validate the right one
  * use g_return_val_if_reached whenever possible
  * Correctly choose a non-existing foundation for remote peer reflexive candidates
  * Change msn/jingle priority into a guint32 instead of a float that we * 1000 later
  * lock the mutex before accessing agent->discovery_unsched_items
  * Enhance/fix documentation
  * remove stream_find_component_by_fd and component_find_socket_by_fd since they are unused
  * make nice_socket_send return a boolean so we can know whether or not the send worked
  * Remove nice_agent_add_remote_candidate since it's useless
  * change priv_attach_stream_component_socket to agent_attach_stream_component_socket
  * Fix inet_ntop_win32 to correctly fill in the in_addr and to return the correct value upon success/failure
  * WSAAddressToString and WSAStringToAddress are not the same as inet_pton and inet_ntop. This is much better. Taken from http://www.mail-archive.com/users@ipv6.org/msg02107.html
  * use g_strdup instead of strdup
  * removing the DETAILED flag on signals with no detail
  * Merge commit 'tester/src-netbuffer' into nice-kakaroto
  * Merge commit 'tester/nice-stund' into nice-kakaroto

    Conflicts:

    stun/tools/stund.c
  * Replace all references to 3489BIS into RFC 5389 as it has just been released
  * Add a win32 version of the stun_gettime function that does not use gettimeofday, but uses GetSystemTimeAsFileTime. Code copied from glib's implementation of g_get_current_time
  * Fix inclusion of openssl/rand.h on windows which does not need winsock.h to be included with it
  * add stdint.h and stdbool.h replacement for windows
  * replace close by closesocket for windows
  * Fix includes for win32 compilation
  * only define variables at the start of blocks
  * fix error with 'not all code paths return a value'
  * Add an else to HAVE_CONFIG_H in order to define NICEAPI_EXPORT. Also removed that define from not public functions and removed them from libnice.sym
  * Remove all 'restrict' keywords as they are not supported by MSVC
  * remove libstun reference docs for now.. its API will be stabilized in the next version
  * no need to make check gtkdoc
  * Update the docs to include everything
  * make nice_address_init part of the API
  * fix unit tests for the gathering-candidates API change
  * Add gtkdoc files to ignore to .gitignore
  * create the m4 directory before gtkdocize
  * Add documentation
  * add gcda/gcno lcov coverage files to gitignore
  * we must return the local credentials by strduping the ufrag/pwd
  * no need to check for local_addresses when adding new streams
  * rename NICE_RELAY_TYPE_* into NICE_RELAY_TYPE_TURN_*
  * signal candidates-gathering-done for each stream that had a gather_candidates call
  * do not generate address/Makefile
  * Move address into the agent's dir
  * in tcp-turn, change all write/read into proper send/recv calls
  * use WSAGetLastError instead of errno
  * add correct includes and define close as closesocket for windows
  * Make the stund try first the new draft before the old stun RFC
  * Merge branch 'nice-kakaroto' of /home/kakaroto/coding/nice-refactor/ into nice-kakaroto
  * distcheck should check for gstreamer too
  * remove empty test directory and fix some automake warnings
  * port tests to windows
  * correctly do the allocate, and not a deallocate in the test-turn
  * remove interface symbols
  * Fix address unit test to avoid assert because of sin6_flowinfo
  * Readding necessary socket includes
  * Remove local stuff from the configure.ac
  * add win32 defines for trans.h and add missing includes for stdint
  * cast the buffer for send/sendto/recv/recvfrom into a void* as it may not always be an unsigned char in the prototype
  * disable stund and stunbdc code because they need non portable function calls
  * workaround for non existing errno macros
  * EINPROGRESS is called WSAEINPROGRESS on windows...
  * include ws2tcpip.h where needed
  * Use timeval instead of the unix-only timespec
  * No more need for linking with liblocal
  * Fix crc code
  * use socklen_t where needed, and cast it to size_t as it defined as an int in mingw and as an uint on linux systems
  * remove unnecessary inclusion of socket files in some files, and make glib included before stdlib.h because it redefines atexit
  * we should use guint32 for candidate priority instead of uint32_t
  * correctly ifdef/else/endif the includes for winsock and sys/socket
  * a bit more win32 cmpat
  * Remove iovec dependency for crc32. Use a custom simple structure to do that
  * fix win32 compat for stun utils
  * Removing useless and unused NiceInterface stuff... maybe we should later at some point copy fs2's interface detection in there
  * Fix address.[ch] with its test for working and behaving correctly on windows
  * Make address.[ch] windows compatible
  * pthread is not needed for stun
  * Remove IP_PKTINFO sockopt which is not portable to mac
  * Fix for make distcheck to work
  * Fix the libtool -version-info into the configure.ac
  * if we have EAGAIN when sending the buffer, also add the padding to the list of buffers to be sent
  * implement automatically resending messages when the data can't be sent
  * tcp-turn.h is now needed as an installable include file
  * attach the tcp socket too
  * don't forget to unref the g_io_channel
  * correctly unref the source for an io socket when attaching to the mainloop
  * Correctly set the inbound address of the socket to the server address for tcp relay
  * Remove the nice_agent_recv/recv_sock/poll_read APIs because they are useless now. We want to enforce using the gmainloop as it is necessary for a lot of other stuff
  * Update test-fullmode to work with the new set_relay_info API
  * Add support for tcp turn in the agent's code. Thanks to Olivier Crete
  * add tcp-turn to the socket.h include
  * move includes and add include of the agent because tcp-turn needs the NiceAgent and the NiceUdpTurnSocketCompatibility
  * stunbdc and stund should use 3489bis to allow the unit tests to run
  * Port tcp-turn to the new NiceSocket API
  * Add tcp-turn by Olivier Crete
  * Only copy the valid data from the generated non-null terminated username buffer
  * fix typo. Use cand->agent, instead of agent
  * Send a Refresh with lifetime 0 to deallocate a port in the turn server whenever a component with an existing allocated port is freed
  * Add full support for refreshs as well as retransmissions of those turn refresh requests
  * Add a CandidateRefresh type and its associated freeing functions for adding support of turn allocations refresh
  * do not send bandwidth or lifetime during the turn allocate
  * stupid pseudo-typo made us always go through the handle_inbound_stun
  * make udp relay socket modify the agent's socketptr. Also make sure we try to parse with the socket from the same stream and component
  * port test turn to the new refresh API
  * Correctly process LIFETIME and BANDWIDTH attributes
  * Correctly implement the TURN Refresh usage and add its processing function
  * do not send BANDWIDTH and LIFETIME when value is -1, not 0 since 0 is valid
  * the LIFETIME attribute should also be sent to msn/gtalk servers
  * Correctly check if the method of the stun response is correct in the stun usages process functions
  * stund and stunbdc should be rfc3489 compatible
  * Remove some NDEBUGs and add some to let NDEBUG be used for the outputting of sending/inbound messages... this is temporary until I implement a correct debugging system with categories
  * Change the struct/typedef lines into a single combo
  * turn 9 agent needs the SOFTWARE attribute
  * Remove interface and socket from CandidateDiscovery as they are not used
  * when the turn channel is locked for gtalk or msn, send to the server address, not to the destination address
  * Correctly add a relay candidate
  * Add support for NICE_DEBUG environment variable
  * Correctly support stale nonce, and unauthorized errors, for the channel bind turn requests too
  * Correctly support stale nonce, and unauthorized errors
  * check that we don't infinitely loop on authentication when channel bind error is received. Before resending the second request of the long term credentials, make sure we received a different nonce this time
  * Correctly free whatever we created
  * Correct support timing out for tcp sockets too
  * Add multiple bindings to a list and process them once we're done with the current binding
  * implement retransmissions and timeout for msn set-active-destination
  * Remove unused includes and files from pkginclude
  * No need to include random.h from agent.h
  * a little cleaning, don't put the sanity check inside the function
  * fix POSIX_MONOTIC_CLOCK check in stun timer
  * fix 80char limit and remove an implemented TODO
  * Add support for UDP retransmissions and timeouts for channel bindings in turn
  * Add nice_socket_is_reliable to the API
  * udp-turn should also handle error responses for send requests and set-active-destination
  * remove NiceSocket API from the exported symbols
  * Port agent tests to the new NiceSocket API
  * port test-bsd to the new API
  * Fix gst makefile
  * Remove useless files
  * Remove useless test files
  * Port nice agent to the new API of NiceSocket
  * Much better NiceSocket API now, no more need for a socket factory
  * Clean discovery_add_local_host_candidate to avoid memleaks if an error occurs
  * Rename component_find_udp_socket_by_fd into component_find_socket_by_fd
  * Port libnice to the new NiceSocket API
  * Fix hmac calculation. If a multiple of 64, do not pad with 64 bytes. It's fine as it is
  * Update makefiles and configure to the new changes in file structure for the NiceSocket
  * Port test-bsd to the new API
  * Fix udp-turn to compile
  * Update udp socket layers to new NiceSocket API
  * new NiceSocket API
  * Renamed udp-generic into socket.c
  * Removing useless socket files
  * Renaming udp directory to socket
  * the alternate server must be set to the component's turn_server so an inbound packet can be correctly sent to the appropriate udp_socket
  * Add support for the alternate-server error
  * gtalk relay candidate must use the turn server's username, not a random one
  * generate proper gtalk user/pass per candidate
  * google does not use any password in requests
  * gtalk allocate/send does not need the message-integrity
  * gtalk allocate response doesn't have the username field
  * port test-fullmode to the new turn API
  * ignore credentials for gtalk
  * TURN specs says it must be long term credentials. So the short term/long term credentials can be removed from the API, and we'll only use the compatibility to decide what method of authentication to use
  * Save the to/from addresses and put them in newly created buffers
  * Create a netbuffer directly instead of using gst_pad_buffer_alloc
  * Remove timeout sources from the right context
  * Install plugins in $(libdir) not the system plugin path
  * remove useless g_warn_if_fail which forces a glib 2.16 dependency... that line was also weird...
  * use the NO_INDICATION_AUTH flag for msn turn support
  * Channel binding fix for TURN-09. The channel and length are in network byte order
  * show the source of the inbound packet after it's been processed by the TURN socket
  * remove useless debug
  * New STUN agent flag : NO_INDICATION_AUTH, to tell the agent that indication messages may not use authentication. Some turn servers will send data indications without username/message-integrity
  * Correctly order the symbols so make check works
  * tests should not depend on an interface on 192.168.0.x. Use 127.0.0.1 instead
  * add support for receiving an answer to our channel bindings/lock and correctly handle such messages
  * Add support sending the correct channelbind/set-active-candidate/options when we want to get a lock on a peer
  * Add udp-turn set_peer API to set the active candidate
  * Give the turn agent the long term credentials flag it needs
  * Add the jingle and turn-09 methods and comprehension attributes
  * some formating and comment changes
  * export the nice_debug_en/disable API and add a boolean to access the stun debug
  * utils.h needs sys/types.h and sys/socket.h
  * Don't forget to free the username/password
  * This is a VERY UGLY HACK!
    A google/msn data indication is 0x0115 which is contrary to the rfc3489bis which states that 8th and 12th bits are for the class and that 0x01 is for indications...
    So 0x0115 is reported as a "connect error response", while it should be a data indication, which message type should actually be 0x0017
    This should fix the issue, and it's considered safe since the "connect" method doesn't exist anymore
  * The MSN mapped address is not XOR-ed
  * We should not free the username/password used for authenticating until the candidate discovery is also freed, otherwise we can't authenticate the response
  * the google destination address is not xored
  * base64 decode the msn user/pass for TURN too
  * no need to show a warning if we unfreeze a triggered check
  * Receiving a message from the turn server should set the udp_socket to the relayed one so answers can be wrapped too
  * Fixing TURN support. correctly send the send indication/request and parse the data indication
  * Updating test-fullmode to have support for testing TURN
  * Correctly pass the stun message to the TURN stun agent when it comes from the turn server
  * Make sure key len is set to 0 if key is NULL
  * Correctly check for errors when processing TURN response and support long term credentials unauthorized message correctly
  * If we want to nominate a new triggered check, then we must create it before we nominate it
  * fix trailing spaces and comments
  * more clarity : COMPATIBILITY_TD9 becomes COMPATIBILITY_DRAFT9 for TURN compat
  * Do not step down to CONNECTED if we're already at state READY
  * Change ICE_COMPATIBILITY_ID19 into ICE_COMPATIBILITY_DRAFT19 for more clarity
  * Correctly check for the username/password. Only check the start for our own username and do not check for the semicolon. Also makes the code cleaner and fixes possible compat issue with msn for peer reflexive candidates
  * When we unfreeze a conncheck, we must make sure the timer will keep running. The conncheck gets unfrozen from state FROZEN to WAITING. If there are no other IN_PROGRESS connchecks, then the timer will stop and the WAITING conncheck will never go into IN_PROGRESS state. This can cause a lock because the state of the stream will be never be READY/FAILED as there will be one conncheck in WAITING state remaining
  * Fix checking for the remote candidate using the username, and correctly create the remote peer reflexive candidate
  * Fix verification of username/password, as specified in the RFC. This should fix problems with delayed SDP responses
  * group declarations together
  * there is no pair pruning on non id19 compatibility
  * We should validate correctly all local/remote candidate combinations
  * (WIP)  Add TURN support to libnice
  * remove alternate server for ICE and add turn compatibility function
  * add a long term credential flag for relay information
  * testing turn should not be done with ignore credentials flag
  * Adapt test-turn to new api change
  * Ice usage should not check for alternate server
  * Let the turn usage tell us if a mapped address was also found
  * Fix long term credentials validation/creation of responses and error saying unauthorized on 401/400 error responses
  * Fix typo that caused bad authentication validation
  * nice_agent_set_relay_info must be an exported symbol
  * Enable debug by default
  * Add some debug output on the case where the conncheck fails for mismatch of source address
  * Fix the generation of the transaction id
  * Removed g_debug messages and replaced with nice_debug, en/disable-able with nice_debug_en/disable API
  * Clean the stun_make_transid to avoid heart attacks
  * Fix indentation of closing bracket
  * Updated doc to match code
  * Make if/else serie a bit clearer
  * Make the length of ufrag/passwd clear in doc
  * Add warning on adding stream before local addresses
  * Make the if/else-ness clear
  * Don't declare vars in the middle of blocks, do it c89 style
  * Add space
  * Remove boolean return value, its always true ans always ignored
  * Remove useless check on g_slist_remove (it doesnt allocate anything!)
  * Remove useless set to null
  * Remove useless nice_address_init
  * Add Youness to contributors
  * Add Nokia copyright
  * Use replace unclear STUN_USAGE_TURN_REQUEST_PORT_BOTH with EVEN_AND_RESERVE
  * Remove useless variable setting
  * make indentation consistent
  * Replace the SERVER attribute with the SOFTWARE attribute per draft 17
  * document sockaddrcmp's return value
  * udp turn socket factory now exports functions that would allow libnice to override the default socket factory API. This is used because we need to parse a TURN message received on a local candidate
  * stun daemon now needs the USE_FINGERPRINT flag
  * adding support for relay candidate discovery
  * Adding support for turn settings per component
  * Removing turn properties from nice agent
  * Finish the test-turn to finally work correctly with the numb server
  * Added a new test for the long term hash credentials
  * Port test-bind to not fail without the fingerprint
  * Add mandatory requested-transport attribute for turn draft 9, and correctly parse the relay-address received
  * Do not fail, but do not send message integrity if no realm/username in the current request
  * Fix long term credentials hmac generation
  * Add proper long term credentials support
  * Completed TURN usage in libstun
  * Adapt libnice to new turn usage API
  * Adding useless turn test file
  * Adding TURN specific enums and constants
  * Add full TURN support for the turn usage allocate request
  * Completing turn support in udp socket factory
  * Do a proper turn allocate for relayed candidates during the discovery
  * Port libnice tests to match new API
  * Free used variables
  * Adding udp turn socket factory
  * Adding turn support to libnice
  * Adding initial TURN usage to libstun
  * Clean files a little
  * Remove the socket factory from nice_agent_new
  * Correctly free memory from the validater
  * Added autogen.sh
  * Should fix authentication issues.. server reflexive candidates have the same udp socket as their base host candidate.. we need to match all local candidates during stun agent validation
  * Fix MSN username for peer reflexive candidates
  * Peer reflexive candidates should hold the same user/pass as their base candidate
  * cast buf_len from size_t to int, as it might cause compilation issues with some versions of gcc, reported by dave_p_b from amsn's forums
  * Missing limits.h for gcc 4.3, reported by muratasenel from amsn's forums
  * Add API to enable/disable debug from libstun
  * Porting conncheck test to the new API
  * Adding missing include
  * Responses must be sent with the username and password, as if it was a new request we are sending. Do not use the username/password of the request we received
  * verify the username outside libstun only if we are in google compatibility mode
  * with msn compat, do not send error responses
  * base64 decode the passwords to use with msn compat
  * Adapt to the usages API and use a priv function to transform a niceAgent compatibility enum into a stun_usage_ice compatibility enum
  * Correctly set the priority for jingle and for msn compatibility (multiplied by 1000 so it can fit as an uint)
  * the usernames generated for msn compatibility must be the same per foundation
  * Use the proper magic cookie for ICE in msn compatibility mode and process the ice message without relying on stun/usages/bind.c
  * Adding the ability to change the XOR value for the XOR-MAPPED-ADDRESS
  * Adding a 'force validater' usage flag for the stun agent and made libnice use it for msn support
  * Fix username copying if no username is available
  * Fix stun conncheck timeout
  * Fix stun discovery timeout
  * Merge commit 'remotes/tester/force-candidate-kakaroto' into tester-force-candidates
  * Remove assert that forces all local candidates to have a username/password set to NULL
  * MSN also needs the use_candidate flag enabled
  * Fix username padding for MSN compatibility
  * Add msn agent support
  * Add RFC 3489 support for stun by having padding in the message integrity generation
  * Add support for generating msn usernames
  * Simpler method for generating the username. also fix a typo, and add support for msn usernames
  * Export symbol for nice_agent_set_selected_remote_candidate
  * Add check to make sure no stun packet is passed through
  * Add test for new set_selecte_remote_candidate function
  * Add method in agent to force the selection of a remote candidate
  * Add function to component to force the selection of a remote candidate
  * Check that the buffers are our fake data before counting them (so that refused stun packages dont trigger it)
  * Exit with error when the timeout is reached
  * Init variable to 0 before going further
  * Porting libnice to the new stun usage API. I know it's a big commit, but it can't be divided into smaller ones, it's all one big chunk
  * A much better way of generating the username and getting the password. This allows for msn compat username generation too.
  * No need to have those as const.. as it forces the user to fill the structure at creation
  * Check if the alternate_server is given in the bind_process, so it can now be set to NULL if you don't want it.
  * Cleaner way to handle inbound stun messages from the nice agent
  * Fix default stun port define in nice agent
  * Renamed stun-ice.[ch] usages into ice.[ch]
    Added a stun_usage_ice_conncheck_process in order to correctly process a connectivity check (same as bind process but adds role conflict checking)
  * Updated API for the transport utility functions
  * Updated stunbdc tool for new API of stun bind usage
  * Updated unit tests for new API of stun usages
  * Refactored stun ICE usage
  * Refactored stun bind usage
  * Update the integrity to send the correct username and no password for the google interop
  * validating the error response will give us a success since now the agent checks if it's an unauthorized error, it won't check the integrity
  * check the username in case the IGNORE_CREDENTIALS flag was set on the agent
  * Do not force the password on error responses, let the agent take care of that, so 'unauthorized' responses won't get a message-integrity
  * Avoid segfaulting if no message integrity attribute is found. Also make sure that if it happens, it's only accepted on error responses with codes bad-request and unauthorized.
  * Re-enable test-thread which now works correctly
  * Don't forget to set the remote credentials on both agents in test-fullmode
  * Correctly send the whole username that we are expecting
  * update path to stun daemon
  * correctly handle the IGNORE_CREDENTIALS usage flag. And add the optionial fingerprint whenever we're in 3489bis mode. The USE_FINGERPRINT usage flag is only used to discard received messages without that flag
  * bind usage now uses the google compatibility mode when creating the stun agent
  * (WIP) Ported libnice to the new API...
  * Move bind and stun-ice back into a usages/ directory and update the includes and makefiles everywhere
  * need to include stunagent.h in stun-ice.h and bind.h
  * add the ice usage and the corresponding test
  * Forgot to add the tests
    Revert "add the ice usage and the corresponding test"

    This reverts commit b6153207ccb8d970f272b08355a6bb08f05bb6de.
  * add the ice usage and the corresponding test
  * A response or error message should not have a username attribute
  * Add a test for the agent's unmatched response error, and fix test-parse after the change to the agent that automatically uses the right key for the message integrity
  * A bit cleaner code
  * Make a difference between an unauthorized validation because username/password do not exist and with the unauthorized when the key doesn't match. Also commented the validation return values
  * Save the key for a received request and use that key when finishing its response
  * Add a default validater function
  * fixed check-bind.sh and removed test-conncheck from the makefile..
  * Revert "If the key len is -1, then do an strlen on the key"

    This reverts commit 0a4f25e8a06ce857da765517ba1c3692c38c2bf8.

    The commit did not compile.. the key_len is size_t so it's an unsigned...
  * If the key len is -1, then do an strlen on the key
  * add a static const for all the known atttributes.. fixes stunbdc with stunserver.org
  * Ported the test-bind unit test
  * Make the max message size the same as before since not everyone will follow the limit
  * Make the bind transport correctly refuse non response or errors with no ERROR_CODE attribute
  * Restore stun_bind_keepalive function
  * Fix known attributes for the bind usage
  * Ported test-format to the new API
  * Fix a possible bug with buffer overflows
  * small change to allow an empty username even if it's not valid to have a message integrity without username
  * The integrity must be done on the message up to the integrity value, skip the attributes that come after it
  * the fingerprint is now being lton so we need to ntol it before comparing
  * a STUN_ERROR is valid even if it has no error code
  * fix bad usage flag value
  * Ported test-parse to the new API
  * Removing useless usages
  * Fixed tools and binding usage to work with new API
  * Fix return into a break
  * If a validation is necessary and no validater is given, return VALIDATION_UNAUTHORIZED
  * Removing unused files
  * Updating stun to include an agent
  * (WIP) Huge refactoring of functions... first step towards the agent
  * Fix configure for s/utils/tools/ and Makefile for the trans and timer move
  * Moved timer and trans to usages since they are not part of the lib itself, but part of bind and relay usages
  * Removing last inline from timer.c
  * Removing inlines from trans
  * removing inline from stun_setw and stun_set_type
  * Removing duplicate+outdated and unused test files
  * Removing crc32 tests (both the same) that are unused, and outdated
  * Removing unused file stun-server.c
  * removing nonce.c which is also unused
  * bindserv.c was unused
  * nice include changes to adapt to stun changes
  * Moving functions and organizing files
  * A bit of file shuffling
  * Remove extra tab
  * Restore plen setting in the same place
  * Pass compat flag everywhere to not put stun-server into packets in gtalk mode
  * Put the fingerprint only when not in google compat mode
  * Add more files to gitignore
  * For now remove the optional SERVER attribute in the response.. bad for gtalk compatibility and useless
  * in gtalk compat, send the attribute MAPPED_ADDRESS instead of XOR_MAPPED_ADDRESS
  * Add username in compat gtalk and remove password
  * Don't demux the stun packet twice
  * Merge commit 'origin/nice-tester-2' into nice-kakaroto
  * Fix gtalk compat (partially) by not sending non-username attributes
  * Don't try new stun demux in gtalk mode
  * Add nice_address_is_valid function
  * Should fix username generation issues
  * Merge branch 'nice-kakaroto' of git+ssh://dhansak.collabora.co.uk/home/kakaroto/git/nice into nice-tester-2
  * Should fix key checking for gtalk compat
  * Merge commit 'kakaroto/nice-kakaroto' into nice-tester-2
  * Don't leak mainloop from gstsrc
  * Add some magic hackiness to avoid a race condition where the g_thread_join could hang forever and make the test-thread use 2 components
  * Typo, get_remote_candidates actually returns the local_candidates
  * Do not unlock the mutex when emitting the signal because it might unlock another thread which could cause a race condition.
    To avoid a deadlock when a signal callback calls an API function that does a g_mutex_lock while the lock is already taken. Change the mutex into a recursive mutex
  * Fix possible race condition with the test where a state change READY->CONNECTED->READY might make the test segfault.
  * Fix typo
  * Make sure that candidate pairs are created correctly when the remote candidates were added before the local candidates were gathered. This is a threading race condition fix.
  * Using the same variable for two separate lists in nested loops, is, afaik, a bad idea...
  * Adding Agent pointer info in the g_debug calls...
  * Fix compilation error.. uninitialized var in test-thread
  * Added output of agent pointer in g_debug messages
  * Don't test role conflict in thread test yet
  * Add more tets to gitignore
  * Add threaded test
  * Unlock agent when emitting state-changed signal
  * Return deep copy of candidate lists
  * Add function to copy candidates
  * Transform _boring into .gitignore
  * Use stun_demux to demux stun so that zero-filled buffers are passed out

    darcs-hash:20080426042635-3e2dc-7f782b585b7a2c3df49ec8ef34a38062bc1a7a52.gz
  * Make the test script executable because darcs doesnt remember that bit

    darcs-hash:20080426042448-3e2dc-d6c2ba564118a28f0220e8209b1dcc7001d5a71a.gz
  * Make the tests use the gather_candidates() api and make them pass.

    darcs-hash:20080426010239-3e2dc-2439c01282eb42a9c545d22bdda11220eac655fe.gz
  * Port test to use NiceCandidate

    darcs-hash:20080426004621-3e2dc-1866ce52eb9ba0e2fb3c5560034e289d6b024e3e.gz
  * Attach new sockets when they are created.

    darcs-hash:20080426002910-3e2dc-36ef20ecb418dc080bd2f187fbf3ccb4122a5b14.gz
  * Make the socket attach function available to other files

    darcs-hash:20080426002714-3e2dc-0c7ae499ea4c1128be98a2ac863c6553a94edfab.gz
  * Store the main context for io callbacks in the component too

    darcs-hash:20080426002304-3e2dc-8d4c50ebb32da09af48c07e26a3a19c568731daa.gz
  * Warn on failure to find a component

    darcs-hash:20080426001836-3e2dc-27f6f8a7efa720b3645aaf9c810b8304251e5f33.gz
  * Add function specifically to hook up the io_src to a socket

    darcs-hash:20080426001748-3e2dc-e243944bbd3ef193acdecbcf423856bcbc06ca94.gz
  * Save gio callback function in the Component

    darcs-hash:20080426001405-3e2dc-620a44caf56023c4fe32e438ba0d6ee540ec0a79.gz
  * Use larger buffer so as not to truncate udp packets

    darcs-hash:20080425230501-3e2dc-68e95654e1a3f299bd5b5ccb6f79215e22c42226.gz
  * Separate stream creating from candidate gathering

    darcs-hash:20080425220943-3e2dc-6de15f6302cd5e71f34c22f9fcb75f2971f32363.gz
  * Add debug categories to gst elements

    darcs-hash:20080425204718-3e2dc-4e47de417c1f22dc2b7c3c4c3de0259d64ea3524.gz
  * Add some debugging messages to the gst elements

    darcs-hash:20080425204105-3e2dc-275f3d4f39042cdda9bdb58a647db4386b059b2b.gz
  * Don't try to destroy NULL idle source

    darcs-hash:20080425200200-3e2dc-8fe73880fa4b42e25ebbac1ea43c6fb8fd3a84f5.gz
  * Can't have construct-time properties on gst elements

    darcs-hash:20080425200047-3e2dc-9d92ca18766d133a17b2053b4debeae272746d5e.gz
  * Unlock mutex on the locks that matter

    darcs-hash:20080425200042-3e2dc-84d2a1ba9a2ebec18d8700a15647a586957f4ce4.gz
  * Add compatiblity to gtalk on inbound username checking

    darcs-hash:20080423205841-4f0f6-9e93de5c579e6c0d5fbfc983e7db790d863e3608.gz
  * return WRONG_STATE if unlocked and do not modify flow_ret from outside the streaming thread

    darcs-hash:20080423001715-4f0f6-aedb50231ebdb4f1296d4e98e91fd675453c97a7.gz
  * Adding an idler to quit the mainloop so we avoid a rare race condition

    darcs-hash:20080422235156-4f0f6-5f33f7b4f4bcc8a39b5ad2cdf474a99cf1ebae89.gz
  * Make the gst element unlock itself when requested by basesrc

    darcs-hash:20080422214225-4f0f6-c0af607186626ef802acf8824089f41c30fcf53b.gz
  * NICE_COMPATIBILITY_LAST = NICE_COMPATIBILITY_MSN .. better this way

    darcs-hash:20080422211225-4f0f6-0c57b5ee3e5cc4e2af669a4a3f24f3dc4da552dc.gz
  * main-context changed into a construct time property

    darcs-hash:20080422205938-4f0f6-f2829d40b33ed72022836cc0466e8d15fa362638.gz
  * Make the g_timeout_add use agent_timeout_add_with_context instead...

    darcs-hash:20080422205137-4f0f6-8911d8cc165b0298a3e009834fe2dbed68cc1ca1.gz
  * Typo fix dettach -> detach

    darcs-hash:20080422193400-4f0f6-f7502c281b33309eab343bb8ca43f2f94beba636.gz
  * Added a NICE_COMPATIBILITY_LAST enum

    darcs-hash:20080422193256-4f0f6-e5dd7affd0463719f11dd81d23fd6dda1b2afb31.gz
  * Make the agent_find_component return NULL if you search for a component that doesn't exist (but the stream exists). also check the return value of agent_find_component from one call that didn't..

    darcs-hash:20080422193155-4f0f6-dc5a4ad39c7c5124779e1605545da4f5647a79ef.gz
  * Fixes to trailing spaces

    darcs-hash:20080422192524-4f0f6-e16e7dddec8c9ecdfa196536e6cc940bad934b32.gz
  * Made the mutex lock/unlock at start/end of functions, and use a goto end; instead of returns in the middle of a function

    darcs-hash:20080422192334-4f0f6-8db2108d6266e80e1c1d94bc05166682f24ea7bb.gz
  * Gstreamer element using mainloop

    darcs-hash:20080422163806-4f0f6-347a05842219dbf47903a1813c3a46df01a6b4af.gz
  * Adapt the tests to the new API

    darcs-hash:20080422163406-4f0f6-f7918de91cf672838ed1b700ea2507d62e898b54.gz
  * Fix a logic bug

    darcs-hash:20080422163047-4f0f6-734497a855a7070b2bdb5e856c79b374455f6caf.gz
  * fix some trailing spaces

    darcs-hash:20080422162808-4f0f6-84a59e52bc8309765d32b543b6596b70216d09f1.gz
  * Adding compatibility mode and improvements on the main loop integration.

    darcs-hash:20080422161414-4f0f6-388208b2ac7bb2a7ab06e48151e2152fc0621331.gz
  * Make the agent properties into object properties

    darcs-hash:20080403234841-3e2dc-3241e35b6475c8da7f9061fee1ffbfdf3e80e399.gz
  * Have the base src class do the timestamping for us

    darcs-hash:20080403234417-3e2dc-f5eb66b2dd505f0b6427ae4cd12b1299d6a45664.gz
  * Error if the elements try to go to ready without an agent set

    darcs-hash:20080403231722-3e2dc-bded4a5e1db4984708083e3d94ce58471de156d1.gz
  * Disable gst tests because they haven't been updated

    darcs-hash:20080403231716-3e2dc-e4f5d9891312c2d83f39c44328abd030c1b2a61c.gz
  * Try to port part of the tests

    darcs-hash:20080403231650-3e2dc-89b97d0ae63757c342e98ac68f5afa864ac0ebc2.gz
  * Print warning on invalid property

    darcs-hash:20080403225624-3e2dc-2c1e69eef8f2c620b654ee519e737b63047c55ce.gz
  * Install gst plugins in right directory

    darcs-hash:20080403225336-3e2dc-c0a42f57d184e3785057e41b043d4129ccd8dc88.gz
  * Make gst element use larger buffer size of 64k (max udp packet size)

    darcs-hash:20080403221435-3e2dc-042b2046cd0e46bcaeebf81321db3eae7add4f4a.gz
  * Make libnice thread-safe

    darcs-hash:20080402185805-4f0f6-d575bacdd796be98b42597605baf21b24a331047.gz
  * Update XXX comments related to set_remote_candidates() API.

    darcs-hash:20080312084128-77cd4-44164756cf8dae27f34f570edd0b937b78fdd89b.gz
  * Changed semantics and implementation of set_remote_candidates(). Candidates given as argument are used to update, but not replace, the list of remote candidates.

    darcs-hash:20080311152130-77cd4-a48cc0b77634773da56693880feec4394e0983a8.gz
  * Implement delayed processing of early incoming connectivity checks.

    darcs-hash:20071126103228-77cd4-6cbe09665aa050c1b5b577c20886f98203d0ce4e.gz
  * Explicitly cast char pointers. Fixes build errors.

    darcs-hash:20071119155432-77cd4-a3bce8695444e2a2bf96d139da66060f95e3cf95.gz
  * Added a unit test case for delayed SDP answer. This creates the special case discussed in ICE spec sect 7.2.

    darcs-hash:20071119131556-77cd4-0f735d16aa94369c7eeeb15b5ff566974a83384e.gz
  * Updated connectivity checks to ID-19 and to use the new stun_conncheck_reply() API. Refactored the code by splitting a few big functions. Added a workaround for one major protocol issues (marked with XXX).

    darcs-hash:20071119131455-77cd4-45a067510f8d63473635727902f628edfd1136cd.gz
  * Modified the stun_conncheck_reply() API to take local username fragment as a parameter instead of the full username.

    darcs-hash:20071119131402-77cd4-ff96d90081976df145d57a5d564f3afffe65e6f2.gz
  * Updated references to ICE ID-19, part 3.

    darcs-hash:20071119131247-77cd4-ec8ba55d5ba1cec101612fa4b40cb2d725efc228.gz
  * Updated references to ICE ID-19.

    darcs-hash:20071116154328-77cd4-c2438891dd541b57b8b892eb86cc5573dcfc8708.gz
  * Added utils.c which contains implementation of sockaddrcmp().

    darcs-hash:20071115170335-77cd4-2f3136a4552933d30050b9bb3f68f2fe71ee24ab.gz
  * Enforce USERNAME size limit.

    darcs-hash:20071115165530-77cd4-9641cd7ced5df007fa71b85f0c24237c06222d22.gz
  * Changes to how stun_strcmp is compiled.

    darcs-hash:20071115165428-77cd4-dd6e8c94feeaf26d104f06c79763056d163bf5e9.gz
  * Remove broken UTF8 validation.

    darcs-hash:20071115165409-77cd4-1534f47241d0f3f016a52ce07906b9bc0d48a1b0.gz
  * Preparation for adding STUN control support.

    darcs-hash:20071115164921-77cd4-51a973a5d5ce4fb45e3419418e165d90e70fe0b2.gz
  * Fixed checking of USERNAME in connectivity checks.

    darcs-hash:20071115164703-77cd4-fd6f9722c4cef782fdff98efbb2bd96250119d7b.gz
  * Fixed warnings.

    darcs-hash:20071115164513-77cd4-a71168e05f0e654ae9c9fe7d320357b40fad35bc.gz
  * Added documentation to public stun helper functions.

    darcs-hash:20071115164425-77cd4-e0c13c5750308d1aa1008a9fdf7dd1f33498045d.gz
  * Update known numbers to rfc3489bis-11 and ice-18.

    darcs-hash:20071115164336-77cd4-02e697edb150aa090a27e79370cae5d5e41a99f1.gz
  * Added IPv6 test cases to STUN.

    darcs-hash:20071010134931-77cd4-c721000fcd8cfdc445b9567f6050d08f151fc34b.gz
  * Added --numeric option to stunbdc.

    darcs-hash:20071010134913-77cd4-a811942bb5f1e79f81f4d85d90cd4ed2ad75112f.gz
  * Added an assert to test-bsd unit test.

    darcs-hash:20071010134753-77cd4-b8b10ab32c5723fb2c21a2ea81780b075824ac96.gz
  * Added unit test for the new max-connectivity-checks property.

    darcs-hash:20071010134702-77cd4-c2cac0f499d0602aaaa79cd8d5397b475d90e6fe.gz
  * Warn about a rare corner case that could be triggered by clients.

    darcs-hash:20071010134647-77cd4-12e36861ccd861ea2ab46691375ec3082c4bca4f.gz
  * Fixed bugs related to cases where checks produce different results for components of the same stream. Updated connectivity check functionality to ICE ID-18.

    darcs-hash:20071010134533-77cd4-a48041c85c7525261658d74c94401041065be62d.gz
  * Fixed bash scripting bug in unit test suite.

    darcs-hash:20071010114657-77cd4-cd0854adf97ec14d4853d7a31cb0e8202fa4ef67.gz
  * Updated stack timer defaults to ICE ID-18.

    darcs-hash:20071010114632-77cd4-6a3b0e34cfba851a2eedf074197ab4f25073e944.gz
  * Added max-connectivity-checks property to NiceAgent.

    darcs-hash:20071010114557-77cd4-07e66376fc8cffff8d2cb1eb50434f8c2a07d0b8.gz
  * Updated ufrag/pwd max sizes to conform with ICE ID-18.

    darcs-hash:20071010114447-77cd4-a75b1d77922163802e3fb95a1ed87da0dc62e67d.gz
  * Updated test code to use the modified NiceAddress API.

    darcs-hash:20071010114409-77cd4-8a466e5c4a5456ee3a19ec09e489eac71b5b046b.gz
  * Removed if-zeroed code.

    darcs-hash:20071010114339-77cd4-80f23cfefdab8995c3132f32b095c5517ab6c93e.gz
  * Updated documentation to match ICE ID-18.

    darcs-hash:20071010114010-77cd4-5aba24bc8c7d56e01596b824c6d6d7c5a37a1d05.gz
  * Remove doxygen make rules, part 2.

    darcs-hash:20070919155457-77cd4-e7b65a4b8aa3608aeb7b7512b9a15d5fb26a28de.gz
  * Remove automatically generated libnice.symbols file.

    darcs-hash:20070919150603-77cd4-b0318fe8efd6b0d578f99231a4de4777ab69946e.gz
  * Fixed a compiler warning due to a unused label.

    darcs-hash:20070919145709-77cd4-72f47118d180bdad54598f005599ce9bdd1bae14.gz
  * Fixed test-bsd unit test: port number is now zeroed by nice_address_set_from_string so the unit test had to be modified.

    darcs-hash:20070919145659-77cd4-b8787d679b44e9d2dba9789f4f5ab55c91c4d8b5.gz
  * Remove checks and rules related to doxygen.

    darcs-hash:20070919075233-77cd4-747ea6b1c67c7d845c3f69b0497e2c9d488c1712.gz
  * Fixed build time dependencies from nice towards submodules agent and local.

    darcs-hash:20070918151504-77cd4-48129431acc07e2b938c52907cbc215183bd63b4.gz
  * Properly initialize the address structs.

    darcs-hash:20070918151422-77cd4-826dcabbd2161b390b5e42e4bd5bd4a8c805d851.gz
  * Make sure the created sockets are in nonblocking mode. Fixes to IP_RECVERR code.

    darcs-hash:20070918151342-77cd4-a3035d95de20044e86cf82b9cabe27278efaa95e.gz
  * Changed local iface struct to include an embedded NiceAddress.

    darcs-hash:20070918151032-77cd4-b2bed5f70964c43537790b3d911eab268fab3f4c.gz
  * Fixed build time dependency from agent to other submodules.

    darcs-hash:20070918150956-77cd4-083a4b6215a86478d4f6443bfc82f6dab78c867d.gz
  * Convert indentation from tabs to spaces.

    darcs-hash:20070918150713-77cd4-7bdd3f21524c846c1bf0c2c8cb96eb6104c96ad8.gz
  * Fixed a bug in adding peer-reflexive candidates to the list of local candidates.

    darcs-hash:20070911172243-77cd4-ad1407a763afe2d14d3b7d41c09a8bc4d65c5f9c.gz
  * Added new functions nice_address_get_port() and nice_address_set_port() to the public API.

    darcs-hash:20070911172208-77cd4-33dd6f707de37e7776be52cb6cf9a0a84779d29e.gz
  * Fixed a bug in UDP-BSD unit test.

    darcs-hash:20070911172140-77cd4-c70e51f14d5cd840aca7e402dde9409c0c5ece71.gz
  * Make sure sockets are in nonblocking mode. Use FD_CLOEXEC to make sure sockets are closed upon exec().

    darcs-hash:20070911172120-77cd4-458cd813975e5f23b6ff6d14860350c069836584.gz
  * Refactored design for managing connectivity checks: now separate check lists are maintained for each stream.

    darcs-hash:20070911172014-77cd4-e39fb7b348b357df65781630179111f42eb87efd.gz
  * Fixed bugs STUN fingerprint creation and verification. Major update to the STUN internal APIs.

    darcs-hash:20070830144220-77cd4-cc8ab8b16405964ab42ed1d6560ae5a2e770890b.gz
  * Fixed the valgrind target.

    darcs-hash:20070830072835-77cd4-3fca3ba61df3dfe6868626ecac8296ebca7bc126.gz
  * Added -Wno-portability to default compiler flags.

    darcs-hash:20070830072823-77cd4-30e1dec567d93d783adaf64444fdc9278a057a1d.gz
  * Fixed 64bit compiler warnings in test apps.

    darcs-hash:20070830072747-77cd4-1fea7ef37685860489d9624c74b22942ee44e65d.gz
  * Added nice_agent_set_selected_pair to public library API.

    darcs-hash:20070830072735-77cd4-3052ee5af34e4a4e552350c35d570d0f7bf1ab5a.gz
  * Added design documentation for ICE fallback functionality and its public interface.

    darcs-hash:20070830072715-77cd4-44d25a361efc2be5d0582d025081fb5143d9c5f8.gz
  * Update rest of the libnice modules to match the new address API.

    darcs-hash:20070830072636-77cd4-8dea06bd2f0f952f7229eacd7c81d49208f1468f.gz
  * Update of stun build files, part 2.

    darcs-hash:20070830072441-77cd4-d6a2f7d8189f6cea1234326287224ab5771eb194.gz
  * Update of stun build files.

    darcs-hash:20070830072324-77cd4-6141c98bfa68aa94abaf3429b57e05b2dbb47535.gz
  * Updated udp module to use the new address API.

    darcs-hash:20070830071158-77cd4-dca758b5e555e052afffd618ce830179a85ce9ab.gz
  * Updated to build rules. Removed unused agent unit tests.

    darcs-hash:20070830071016-77cd4-26af9646bf973b60f617d4956c84c2bea9d9b158.gz
  * Added support for forcing selection of a candidate pair. This allows to interoperate with clients that do not support ICE. Added a unit test for fallback functionality. Some 64bit compilation fixes included.

    darcs-hash:20070830070718-77cd4-02e9764b213673506df7d71ec768e42a29bb09dd.gz
  * Fixed a severe bug where an ICMP error response would cause glib mainloop go into busyloop state.

    darcs-hash:20070830070543-77cd4-2fc520043e837a9ed044717564573bf613cf7c6c.gz
  * Updated agent to use the new address API.

    darcs-hash:20070830070237-77cd4-19e867ed64911e10f6931efff7d787f8048f2eb1.gz
  * Updated local module to use the new address API.

    darcs-hash:20070830070156-77cd4-c9cc192a0d40577c5d19af56bd22b479a0c6033e.gz
  * Modified address module API to use standard berkeley socket API defines and data structs.

    darcs-hash:20070829131320-77cd4-03f2b1b4246f8fac33d5f1573ef77cf23a2465d6.gz
  * Fixed agent code bugs: correct handling of restarts and role conflict corner cases.

    darcs-hash:20070720213534-77cd4-d76a3872d2d9b2a56b28eee31d8bc747513ac14b.gz
  * Fix issues generating compiler warnings from gcc-3.4 in fullmode unit test.

    darcs-hash:20070720213445-77cd4-695f9286da686d398220be84e3fc0c2533e1ca93.gz
  * Improved the unit test for ICE restarts.

    darcs-hash:20070720213403-77cd4-471f8aac4b6611da6c0d8ed82cc8b0fe963dcd0e.gz
  * Add ICMP error handling to UDP abstraction.

    darcs-hash:20070720213317-77cd4-d8bc1ffcc6752beba3ac2db0cc9cc2692540f9a9.gz
  * Updated section on ICE restarts in the design document.

    darcs-hash:20070720213254-77cd4-7b845b8a05e5ba45ed78006196515d1634dd830b.gz
  * Add prefix directory to the pkg-config header path.

    darcs-hash:20070720213230-77cd4-e03a9a59471d76c8c7c7e9e0d8b29062096a33a2.gz
  * Improve error handling in STUN test server.

    darcs-hash:20070720213137-77cd4-b5233e9b34fec1e42c49fa98551c78a3499cf579.gz
  * Removed relay code from the build.

    darcs-hash:20070720213107-77cd4-e5a513fe2281589f622517d6787b9e8fda72de03.gz
  * Modified STUN debugging output.

    darcs-hash:20070720213036-77cd4-ab26e5411537a906f39c739df65a92c38f5602d7.gz
  * Updated STUN unit tests.

    darcs-hash:20070720213005-77cd4-a4e7354cc57b45e01d9e018e831940560c5b67ae.gz
  * Fixes to ICMP error handling. Fixed issues with role conflicts in STUN code.

    darcs-hash:20070720212737-77cd4-8fe19842428b5eee01428a4fa0ab4d1f14f83479.gz
  * Updated constant definitions to match the latest ICE/STUN/TURN drafts, part 2. Modified code to use the new definitions.

    darcs-hash:20070717182227-77cd4-8bbe479ce6c2ed604b7fb6d5d32cfe8e66b2bf64.gz
  * Added nice_agent_restart() to the public API.

    darcs-hash:20070717182053-77cd4-97cb4c1048bd532e37ca0e3fb3a56959922dd7c3.gz
  * Improved code commentary, refactoring of code.

    darcs-hash:20070717182032-77cd4-87e42057b7b2132e60375c2a8e1debcf16e828a6.gz
  * Added unit test for ICE restarts.

    darcs-hash:20070717181953-77cd4-376a8b212d7da87d30edaef7290c9beec004e8c2.gz
  * Cleaned up test-fullmode unit test. Reduced debugging output, removed unused code.

    darcs-hash:20070717181940-77cd4-e3096a7ce1f78f7a1203099ead6462e01d197da3.gz
  * Added API and initial implementation for ICE restarts.

    darcs-hash:20070717181854-77cd4-0794ecc4d25586d2add1f88f083271048f2364b6.gz
  * Fixed a minor bug in unfreeze algorithm. Updated documentation.

    darcs-hash:20070717181707-77cd4-35e220e085c6683fb300ef1489947ae9d97f56a2.gz
  * Correctly emit the GATHERING->CONNECTING state change signal.

    darcs-hash:20070717181645-77cd4-5f7408d75259247989da4a8f4f192d8db463714a.gz
  * Clean up code for inbound STUN packet handling.

    darcs-hash:20070717181619-77cd4-4d391d928e04ea07e26245acff08050346157ac8.gz
  * Reduce debugging output from ICE timers.

    darcs-hash:20070717181447-77cd4-be03d8770774a2319215aad81f3289e346414888.gz
  * Fixed a severe bug in managing resources for candidate discovery processes.

    darcs-hash:20070717181305-77cd4-eea587c41258953ed5f181ec7f69fe9ec3796ae1.gz
  * Update references to ICE ID-17.

    darcs-hash:20070717181000-77cd4-c07e724f0cc8a2f4bdadf179b1bd908f16fb3452.gz
  * Fixed a severe bug in cleaning up component resources.

    darcs-hash:20070717180932-77cd4-49fd0ea025109cbbf81b1b6817f532ad3a26b1de.gz
  * Added support for multiple components (e.g. for RTCP support). Updated to latest ID-17 ICE spec. Reduce the amount of debugging output.

    darcs-hash:20070716095630-77cd4-d955656f1a7bb0cb8ab7b695d76aa91ee5cc7bc5.gz
  * Fixed a bug causing STUN retransmissions to fail.

    darcs-hash:20070716095423-77cd4-6d7ffd81071c550862ec0819ca217cfe9f951840.gz
  * Updated STUN constants to match the latest drafts.

    darcs-hash:20070716095403-77cd4-1d254f95f2a6ebef62ce33816c58d15e53175de5.gz
  * Fixed a bug in fullmode unit test.

    darcs-hash:20070705093754-77cd4-df578b3728c23f2800529e2f7f9f1888bcc8e4c8.gz
  * Cleaned up obsolete pieces of code.

    darcs-hash:20070705093742-77cd4-f54191c1c448456e1ae34cd4486eeb52604d707b.gz
  * Bug fixes to handling and reporting STUN error cases.

    darcs-hash:20070705093712-77cd4-bfa2b067b7264aa83c031c71f88a5c0198375752.gz
  * Remove older, duplicated STUN implementation from the tree.

    darcs-hash:20070705093443-77cd4-fd11bc05143a73e102beafab6c09f33099766fc4.gz
  * Bug fixes to connectivity check state machines.

    darcs-hash:20070705093347-77cd4-fd296d61d0d3321d3d0ddb49e46fbc9fcd6bdac7.gz
  * Added section on handling ICE restarts to design document.

    darcs-hash:20070705093243-77cd4-e71620de121c0c8ca69e221015c7de582e687ef7.gz
  * Updated design documentation with regards to remote candidates.

    darcs-hash:20070619081239-77cd4-4bc6b711fe000bbb54473622d7f6bd2b12892507.gz
  * Added a doxygen configuration file.

    darcs-hash:20070619081155-77cd4-87e41a0309a29b39018a8eee255e6a635c1260c5.gz
  * Top-level makefile update: checks for more system headers, C99 compiler check. Added definition of dummy NICEAPI_EXPORT.

    darcs-hash:20070619081134-77cd4-7deeaa78d59feca05595dd4f7cbd19d94f2e6ccd.gz
  * Added inclusion to config.h to source files in gst submodule.

    darcs-hash:20070619081010-77cd4-c5de17b1e255a3546fefbc0b04ef4df6eb07a1b4.gz
  * Modified the logic for passing list of exported symbols to linker. Fixes to unit test scripts.

    darcs-hash:20070619080928-77cd4-83e1155f6991435190859a29a8c5e2f428072487.gz
  * Major NICE agent update. Added supprt for peer-reflexive candidates, media keepalives, candidate keepalives, role conflict tie-breaking functionality, and for triggered checks. Added NICEAPI_EXPORT attributes to public functions. Includes numerous bugfixes to existing functionality.

    darcs-hash:20070619080609-77cd4-d18bf44fe48a201e59556ae5a9dff2b5a2e7e073.gz
  * Updated test coverage of random submodule. Documented the module public API. Extended the set of generated random strings to match the IETF ICE spec definition of ice-chars. Added NICEAPI_EXPORT attributes.

    darcs-hash:20070619080212-77cd4-3c32e1e428cd59ecd0373a7e6f90ac65b6ae28b6.gz
  * Updated test coverage of udp submodule. Fixed compile errors from anonymous unions. Added NICEAPI_EXPORT attributes.

    darcs-hash:20070619080102-77cd4-53bf984380ed5f56fc89ad57a4750926d0887afb.gz
  * Major STUN update. Completed support for ICE connectivity checks. Added NICEAPI_EXPORT attributes. Added initial code for TURN relay support. The old STUN API is still present but not compiled.

    darcs-hash:20070619075737-77cd4-93e3509da656acdadff0afa36eac3b8569b5ef20.gz
  * Updated test coverage of local submodule. Added NICEAPI_EXPORT attributes. Fixed bugs in handling error cases with getifaddrs()

    darcs-hash:20070619075609-77cd4-b3cd9ca9dc1c41a501d3a9381fea337099101fc9.gz
  * Updated test coverage of address submodule. Fixed compiler bugs with anonymous unions. Added NICEAPI_EXPORT attributes.

    darcs-hash:20070619075439-77cd4-f8c8c9b6fc371da3fb149d11a3d20da0c4d41731.gz
  * Added new symbols to the public API. Fixed the unit tests to compile with the update full-mode enable nice/agent API.

    darcs-hash:20070521153534-77cd4-0b76cc848c25f98c5f1420b479922f1fb24b4d7c.gz
  * Fixed compiler warnings: proper use of const.

    darcs-hash:20070521153502-77cd4-9ba19c606f32af8de37099cbb6935e7a5073d440.gz
  * Fixed issues reported by valgrind - mostly use of uninitialized variables.

    darcs-hash:20070521153414-77cd4-67a6d3f55d74a3fe60da7b3329f633838cc6b84d.gz
  * Updated nice/address interface with better support for passing information to and from sockaddr structs.

    darcs-hash:20070521153312-77cd4-b5363484d77627e8560e2ebd3735bbf68500c0dc.gz
  * Updates to documentation: Updated README, added important design documentation to docs/design.txt.

    darcs-hash:20070521153241-77cd4-f74517554d132df1fbf865ed4fe9ee0ca0f2d073.gz
  * Major update to the nice/agent interface: Added full-mode API and initial implementation using the new nice/stun interface. Added unit test test-fullmode.c to cover the added functionality. Some public APIs of nice/agent/agent.h have been modified, making this change API/ABI incompatible.

    darcs-hash:20070521153033-77cd4-c76ab583d06839e601f46b6734355dd8b66f7494.gz
  * Major update to the new STUN API: support for binding discoveries, fingerprint support, message-integrity support, asynchronous public API without glib dependency. Test cases for most of the functionality. Unit tests moved to a separate folder.

    darcs-hash:20070521152838-77cd4-17a0eed0493917f9125713ebc5d333bd74af5a4f.gz
  * Build system updates: update to Makefile.am rules.

    darcs-hash:20070521152559-77cd4-3d01984a162dfcfada23658039c35901b26e0f88.gz
  * Build system updates: modified lcov rules.

    darcs-hash:20070521152408-77cd4-619e4676d30ff65fb56785f1152b49635e238ea9.gz
  * Added nice_agent_set_remote_candidates to the public API.

    darcs-hash:20070502143214-77cd4-1e69c63420620bc8d55799fa64931ae2ef4f998e.gz
  * Added proper signature to ice-test-server.c callback.

    darcs-hash:20070502143155-77cd4-e4111b5a3df0d677b67c89873015d334b6ed961b.gz
  * Added initial full-mode extensions to the API. Added support for gathering candidates using STUN binding discovery API.

    darcs-hash:20070502142419-77cd4-6e295bdf89c80a6cdab778fe25e26c9e780ce2b5.gz
  * Enabled more compiler warnings

    darcs-hash:20070502142335-77cd4-d6daeb49f463440ca7bfec752382a982913d41ae.gz
  * Added checks for OpenSSL and librt.

    darcs-hash:20070502142305-77cd4-1455a87f80884d1a56d4bbbd739b9e312c1d8ddb.gz
  * Added Kai and Remi to the AUTHORS list.

    darcs-hash:20070502142204-77cd4-689d89c9de753ffa5c55f5cc3b2cc9e6ddb9a96b.gz
  * Fixed distcheck target for environments witout gst build files.

    darcs-hash:20070502142139-77cd4-b8d220d7016ed6a5f374baf57d9d689295475a59.gz
  * Added a new STUN API with full binding discovery functionality. Allows use of both old and new API.

    darcs-hash:20070502142111-77cd4-c6af7764a0fd09c2829c468363671476d56bce29.gz
  * use "nice" rather than "libnice" as pkgconfig identifier

    darcs-hash:20071002141709-c9803-f598f594c0352d3e3e473ba105b7fbd7ff8e6796.gz
  * add copyright/license notice to each Makefile.am

    darcs-hash:20070430010240-c9803-30fe5cce012707a7d474bad73ecad9818aa2e303.gz
  * add copyright/license notice to each .c/.h file

    darcs-hash:20070430010026-c9803-ac9a84b5aedecb6c91a449bb95a9302da3b2cb54.gz
  * relicense under MPL+LGPL

    darcs-hash:20070430005920-c9803-dcf2f4be26a9cf536de1f6e2a4124483881b5725.gz
  * add COPYING.MPL

    darcs-hash:20070430005334-c9803-25926bd24d7580b562608930c32ae8f0f2164174.gz
  * move COPYING -> COPYING.LGPL

    darcs-hash:20070430003711-c9803-1555e136036644e117cb8e4b849df82bcb8a4628.gz
  * nice_candidate_ice_priority () is G_GNUC_CONST / takes const NiceCandidate *

    darcs-hash:20070316135852-c9803-e10cdf407a9a20c2e1eb0f6ec4134ba0e380740f.gz
  * remove dud nice_agent_set_stun_server ()

    darcs-hash:20070316135634-c9803-34d11e28ca5db18fc80bc4ea599dbf4fa5457720.gz
  * remove candidate pair code for now

    darcs-hash:20070316135346-c9803-c6faa44456c9b6410128632fecb99dbe147d02fb.gz
  * fix indent

    darcs-hash:20070316070908-c9803-218a763785856c21717a8ec5a93227f3a8c81756.gz
  * agent: use stun_message_find_attribute ()

    darcs-hash:20070316070638-c9803-2189e68b176266f00b4e51a5a918144c9a6aacfa.gz
  * stun_message_find_attribute ()

    darcs-hash:20070316024908-c9803-904bbc4e085072d1be34c7f131bb769dd838f6fd.gz
  * split out stream/component code into separate files

    darcs-hash:20070315122751-c9803-0ac60fd10fd6af57feb61733abecaca6425acfbb.gz
  * fix fall-through when setting stun-server property

    darcs-hash:20070315121514-c9803-6846436653dea154b70eb5c8bc617d0ad8bd51d7.gz
  * stun-server should be string, not pointer property

    darcs-hash:20070315121434-c9803-8820d6cd83e859650511ce75386b387bb46c1b0d.gz
  * make nice_address_to_string() write result into passed-in buffer; define constant for buffer size

    darcs-hash:20070314144042-c9803-efe6600250d3bad6dd392dda7a3734db99f60cb1.gz
  * local/: use nice_address_set_from_sockaddr_in ()

    darcs-hash:20070314141606-c9803-06daed498ad21212956f0d5806c5ac7845628c09.gz
  * nice_address_set_from_sockaddr_in ()

    darcs-hash:20070314141500-c9803-e5e719ce1a96d9c9a859913ee5554264c1218225.gz
  * use agent RNG for generating STUN message ID

    darcs-hash:20070314133926-c9803-022b21c5df15ad809920e51c11a83b967d383d64.gz
  * use one RNG per agent

    darcs-hash:20070313171803-c9803-70fea1434bb7bf49145812c7d1797c23fd052151.gz
  * make candidate pair hold pointers to candidates

    darcs-hash:20070313170908-c9803-c8da5dab9361248b69dff151e23a4f992b87c4a6.gz
  * add stun-server property

    darcs-hash:20070313143254-c9803-75452c820912593f7304cc0d31a84ea470003d9f.gz
  * don't assert when packet larger than buffer arrives

    darcs-hash:20070313141745-c9803-5ae5a7b2f36201678cab6351e2c13e7c32285740.gz
  * fix comment

    darcs-hash:20070313141312-c9803-5e1c6d42e8bcd10645cb4c8f36e1fcab33d45bf0.gz
  * destroy GSources created when attaching to mainloop

    darcs-hash:20070313135920-c9803-d9cd52124b319f1ad80eab6d18366f333307ad7d.gz
  * only build GStreamer plugin if it's available/requested

    darcs-hash:20070228171552-c9803-44dae9c4f391d34546413c5ddc99c2b08e3a4847.gz
  * add -I${includedir}/nice to libnice.pc.in

    darcs-hash:20070226100038-c9803-ead67a2e08e435f784f24aa22b6cb63089049d68.gz
  * stun_message_unpack (): return NULL rather than aborting when message is invalid

    darcs-hash:20070219122615-c9803-444a79d35558eb0b1183a0645732197bba56bb4f.gz
  * store the candidates in the components rather than in the agent

    darcs-hash:20070217155355-c9803-ec94ff5a0483e801e8a708385bb5fad1c245b59b.gz
  * ice-test-client: concatenate usernames in correct order

    darcs-hash:20070217153936-c9803-cbe0b30443ffbf42a73d1226e4ee3b525e481028.gz
  * ice-test-server: call g_type_init ()

    darcs-hash:20070217153738-c9803-b858bbbdd4c89aaedd5a35db2cc9952c651a1f89.gz
  * fix indentation

    darcs-hash:20070217153655-c9803-f90041d5a19a77cd70d698452f56b9597a18d427.gz
  * fix comparison in component_lookup

    darcs-hash:20070216191825-c9803-9c5974b46b5971380447f662b6776ab1c5c49314.gz
  * add blank line

    darcs-hash:20070216114814-c9803-09d9fbc6fb57b55e6b45b08b99f6aca43b8a29b3.gz
  * update comments

    darcs-hash:20070216111757-c9803-4ac014cfa2374d6a4e1984bfda292240dbe7e634.gz
  * include stream/component ID in debug prints

    darcs-hash:20070216105101-c9803-8ac7ea10458574ce13cdc208d17068e8dd626836.gz
  * component ID is no longer unused by nice_agent_send

    darcs-hash:20070216104740-c9803-260366c779e276d8d19f20085c9b6b17f15eb49b.gz
  * rename lookup functions

    darcs-hash:20070215231050-c9803-285ce7f280023942f837b05dc7965900e8a99a6a.gz
  * nice_agent_main_context_attach (): use struct to move lookups to setup time rather than callback time

    darcs-hash:20070215221125-c9803-ebd2eb69dee014fcc6fde03f1a6ece97b1b7ec93.gz
  * use mapped address of valid remote candidate as peer address, not the candidate's own address

    darcs-hash:20070215191348-c9803-b51ea23c7e4d7826449e7413ccfa9c23c618d78f.gz
  * hoist _stream_lookup; add _candidate_lookup and use it

    darcs-hash:20070215173602-c9803-3222fe82da60e3e2dd324f63402295185387cf84.gz
  * _nice_agent_recv: don't need to look up component; it's passed in

    darcs-hash:20070215154145-c9803-eb301100859547668e0a384155311a4aabac4fcb.gz
  * update prototype of commented out nice_agent_set_stun_server

    darcs-hash:20070215145808-c9803-b94858127257ba9af34cfd9a331daec00bca7af1.gz
  * emit component-state-changed(connected) when we get connectivity check rather than when we get media

    darcs-hash:20070215114702-c9803-0ed4836716ec3741535ac9e82b001045aa93e675.gz
  * ignore 0-length UDP packets

    darcs-hash:20070214165519-c9803-b523f9eb98a701fb20ac8bc33b336bb5ac9f0e9c.gz
  * add test for GStreamer code

    darcs-hash:20070213193023-c9803-249e9c2c5c8b0c677a22f5db633d04606c6c6f93.gz
  * fake UDP sockets: use socket pair instead of pipe for simplicity/pollability

    darcs-hash:20070213192107-c9803-2ae1694e742f669356ea6bf0179712932eaf8429.gz
  * install random-glib.h

    darcs-hash:20070213191956-c9803-44c8836a833f4f597ba2b753fdb90c8ac92abbcd.gz
  * include random-glib.h in nice.h

    darcs-hash:20070213191935-c9803-43425e57da46f20893b961e2bd1392f750e12161.gz
  * nice_agent_recv_sock

    darcs-hash:20070213185958-c9803-6e10b6706377ed58d5475f7d0f1efac386116481.gz
  * make nice_agent_get_local_candidates take stream/component ID and return a new list

    darcs-hash:20070213170047-c9803-265bf06c9e14f97cfbc4f45c21068a0ba267d962.gz
  * emit signal when component becomes connected

    darcs-hash:20070213164350-c9803-c86275d76f9ccffc8dc22beccc57e6783da7cf4d.gz
  * disable warnings about unused parameters

    darcs-hash:20070213164024-c9803-09e613e5f264df49627936d855a119421162999b.gz
  * use "" not <> for local includes

    darcs-hash:20070213151602-c9803-292db64754f2982c8bb4f1baffa738fc7fb110e3.gz
  * fix memory leak in nice_agent_remove_stream

    darcs-hash:20070213150802-c9803-653657281a3ac8ef33f0c38664c400e54e3b0036.gz
  * valgrind.sh: fail if memory was definitely leaked

    darcs-hash:20070213150736-c9803-2332896e51ee0d04d0e0814b568da5e68ea15af8.gz
  * remove nice_agent_free; add/fix calls to nice_udp_socket_factory_close

    darcs-hash:20070213145422-c9803-fbf639e9a7ee7f4e4d24bbd6ae189ced4e84dfe0.gz
  * common.mk: include .gcno and .gcda files in CLEANFILES

    darcs-hash:20070213142907-c9803-39073001a58cede566543b4d56cbdbfc614cb9a7.gz
  * make NiceAgent a GObject

    darcs-hash:20070213142624-c9803-936a3813421658d2fd71e793073a20f7028c2516.gz
  * remove unused event API

    darcs-hash:20070213135600-c9803-b95a4e2aa58beb7e0194da8296c3d9671e5a3f51.gz
  * add some commented-out debug code

    darcs-hash:20070213134623-c9803-12ae1c773582ea05dadb7bd9fbd5fdd59fb216ca.gz
  * update boring patterns

    darcs-hash:20070213134505-c9803-180644009bcf0e5d475452b2a7bc3de63a546dd1.gz
  * improve comment

    darcs-hash:20070213134422-c9803-28884ab7d314bdaf31da6e81cd86ff3aa8b6424a.gz
  * valgrind.sh: use valgrind return code rather than non-emptiness of report to determine pass

    darcs-hash:20070213130110-c9803-fd2a52d01c6fb24570fae988953717c19783418f.gz
  * use ERROR_CFLAGS in subdirectories

    darcs-hash:20070213125426-c9803-8de02269faa93c133a9640776940114835f01457.gz
  * jingle-test-server: echo media back to sender

    darcs-hash:20070213125221-c9803-93e6d5d3e70c3d823102d8edff9454296eab8870.gz
  * fix signed/unsigned comparison with cast

    darcs-hash:20070213124604-c9803-416c7ae383c10919875dfdf3171522e8879e082b.gz
  * mark unused parameters

    darcs-hash:20070213124349-c9803-d240ea5b69b82d2121d092a60ecd814584135a50.gz
  * fix declaration style / mark function static

    darcs-hash:20070213124253-c9803-1bafda69f75cd0175147fe55dccb6c84887020f2.gz
  * nice_agent_main_context_attach ()

    darcs-hash:20070213123531-c9803-142ec605b66a2319b1ad0caee7b5e31426c44186.gz
  * free unused candidates safely

    darcs-hash:20070213122313-c9803-902bedac1524d491e2c071e496a620120ed130f6.gz
  * make test LDADD declarations consistent

    darcs-hash:20070213122037-c9803-b5e24f5fd9cd0b2f56acc422debe14f69b37d77f.gz
  * initialize file descriptor set

    darcs-hash:20070213121424-c9803-251062149e59ee6931d65a7308519b60c445da64.gz
  * fix signed/unsigned comparison with cast

    darcs-hash:20070212205557-c9803-dbe4d7bc9536c526964bb36d229d568ab91b44f1.gz
  * make declarations of private enums consistent in style with public ones

    darcs-hash:20070212192620-c9803-4b373183bad82f8bce4df4c71d3bec6ed375e02f.gz
  * fix declaration style

    darcs-hash:20070212192345-c9803-4c0863606eabd2bba4404a18f57bdeedb96f7138.gz
  * fix declaration style

    darcs-hash:20070212192034-c9803-4fd196138e4e00a618dca3896022eb438b680e4a.gz
  * fix declaration style

    darcs-hash:20070212185501-c9803-6f75305056decf3c06d71230678c037f6da613bf.gz
  * make enum declarations C++-friendly

    darcs-hash:20070212184043-c9803-5b9c875f38650771fe7ea18dc062a0d1a8e8d7eb.gz
  * remove unused typedef of NiceUDPRecvFunc

    darcs-hash:20070212181457-c9803-3fdc17d65ec1b3fccc100fe1970a17fb4450c23b.gz
  * remove unused Stream members

    darcs-hash:20070212164745-c9803-cc459f5102606d033cd1b93630a0a87c28300171.gz
  * put * next to parameter name

    darcs-hash:20070212163126-c9803-f60f59b8e87000d24add23e5bc71f1cb2de4c0ef.gz
  * declare const string as const gchar *

    darcs-hash:20070212162928-c9803-aeac0f45fdfe50a8b0cfb398a42ad191fdb4ec1b.gz
  * declare callback not using its arguments as taking ()

    darcs-hash:20070212162710-c9803-f4ad353f274222783e601ec4d7f03bb4c6111ea9.gz
  * test-readline: include unistd.h for read() prototype, mark unused parameter

    darcs-hash:20070212162501-c9803-9eedd1146db60d5f40a956aa303aa16d296b889c.gz
  * read() returns gint, not guint

    darcs-hash:20070212162044-c9803-5a842ca02a2ebde6d502fb66208bac6677376121.gz
  * declare no-parameter functions as taking (void)

    darcs-hash:20070212161525-c9803-eaaf88f5dcc2dffce6fe6e9081f636bb23838bd4.gz
  * declare main not using arguments as taking (void)

    darcs-hash:20070212160406-c9803-ccdf9881eb074fc505ca4b345d877d2a211cf7f3.gz
  * declare variable holding file descriptor as gint

    darcs-hash:20070212160113-c9803-2f519723017ccb2597ae6e04a18764465ab2254d.gz
  * comment out unused code

    darcs-hash:20070212155915-c9803-ba64ad5e8abdc3b2cec3713e86ffe5fa4f82d261.gz
  * stun-client: rename variable as h_errno is an extern

    darcs-hash:20070212155648-c9803-0d008b316342fbe6f704cb01de70d5a9e4c2871f.gz
  * mark more parameters as const char *

    darcs-hash:20070212155436-c9803-d522e35df577159a413f8bde82bf5807a5cec735.gz
  * test-send: remove unused parameter

    darcs-hash:20070212154815-c9803-71e77f21f2d729d5ff6d82c0ffef89c447f7189a.gz
  * pass in correct data to recv callback

    darcs-hash:20070212154510-c9803-8041a0af0f20f9593ba0d83bd3aee9c25eda7a15.gz
  * remove unused callbacks

    darcs-hash:20070212154110-c9803-b54b3af7f9ffbfcd8e0596a7131c2427738ebfd4.gz
  * hoist NiceAgentRecvFunc declaration

    darcs-hash:20070212153856-c9803-3c4b860fb1dda6fe50cf662ba77054d612026074.gz
  * mark more parameters as const gchar *

    darcs-hash:20070212153359-c9803-1b9267deffbb8b3483d834a1693528941360940d.gz
  * mark more functions as static

    darcs-hash:20070212152526-c9803-971550117da7e1790aeaf569730e7f3070beb1c6.gz
  * mark more parameters as const char *

    darcs-hash:20070212151914-c9803-0ff3d6d6a9a88d216bd685986195aba8e8ab9f84.gz
  * last parameter to select() should be NULL, not 0

    darcs-hash:20070212132227-c9803-6a09dc0c8c81bf1a3689cc21ef619381e10e7f0f.gz
  * agent/: add unused qualifier to various parameters

    darcs-hash:20070212132011-c9803-e17587438c2d56ea96e5f74771abfce0e54da53a.gz
  * fix check of socket() return value

    darcs-hash:20070212131731-c9803-b5102d43f78a84e7809d45c21f9983d975b63d72.gz
  * include udp-fake.h in udp-fake.c

    darcs-hash:20070212131558-c9803-6a718ac50df38f72b3e42b5cf74602aa264e6769.gz
  * udp/: add unused qualifier to various parameters

    darcs-hash:20070212131131-c9803-fd9bfb77f9276310dbc3599271f1763d18c84a08.gz
  * address/: add tests for IPv6 support

    darcs-hash:20070212130517-c9803-579e83785de0df147df7a6f461c50d4f63054a99.gz
  * address/: support converting IPv6 addresses to strings

    darcs-hash:20070212130249-c9803-5c79bc290b79171ffcf062bc59092f900e2c6603.gz
  * random/: add unused qualifier to various parameters

    darcs-hash:20070212124559-c9803-43ea7475794c09ce647c5c414a0ecba6b15977d3.gz
  * use getifaddrs() instead of ioctl() for added portability/IPv6 support

    darcs-hash:20070210180751-c9803-a2df61f48025dec22d5dc10b0fb0228e38f32785.gz
  * nice_address_set_ipv6 ()

    darcs-hash:20070210180122-c9803-a47bf1a09c269ebe3927144db35c8ae8f4347f8d.gz
  * include headers in the files that implement their functions

    darcs-hash:20070210140813-c9803-158d4babd75e2ff29f9e72e0d437d46534ba673e.gz
  * add blank lines to symbol list for readability

    darcs-hash:20070210134403-c9803-824d15cab51ee3db45f793dae8140d306defd359.gz
  * use "" rather than <> for local header files

    darcs-hash:20070210134341-c9803-0a9194dbd1a0b168d0c61314f2dc9033f9b782d9.gz
  * check-symbols.sh: check diff length rather than using cmp exit code

    darcs-hash:20070210134031-c9803-f92c6e72c14ac90ef212cd072dae5974d6239e68.gz
  * define ERROR_CFLAGS with -W* in common.mk

    darcs-hash:20070210132929-c9803-92624737ec43cff874b758d687b1821005882b04.gz
  * add const qualifier to various things

    darcs-hash:20070210124942-c9803-9cf881ad1149d817d155d6ae9948259b41b8950a.gz
  * add test for address code

    darcs-hash:20070209191650-c9803-d69bcbde2e472c1b30e65889ab65a1c3b0aeef3e.gz
  * make _add_stream take number of components but not callback/callback data

    darcs-hash:20070209185348-c9803-ceb078324e8794c152ceb2db09646b723acb3f89.gz
  * give nice_agent_poll_read a callback to call, rather than using the stream's

    darcs-hash:20070209184232-c9803-99a48d5c2e787f3aca466fda3b05a6c272f89fe0.gz
  * wrap long line

    darcs-hash:20070209180914-c9803-5f81c869bac212c47d5e793b358d6af901f0199b.gz
  * add some blank lines

    darcs-hash:20070209180828-c9803-d58d516c58847070282bd70530496e5cf81d29a0.gz
  * wrap long line

    darcs-hash:20070209174553-c9803-cbe4253720dffb074616659cef08f7595dbdc5bc.gz
  * catch case where received packed was smaller than buffer

    darcs-hash:20070209170128-c9803-b28c040ab7493041094cf38dfb95abc03dbb6793.gz
  * nice_agent_remove_stream ()

    darcs-hash:20070209142622-c9803-90f998b0f262523335a9866e669af8abea1b6504.gz
  * add jingle-gst-test-server

    darcs-hash:20070208171558-c9803-0c8fe3ea8f0e3ee91d5cf85f0c660f9671087eff.gz
  * call gst_base_src_set_live (TRUE) in nicesrc _init

    darcs-hash:20070208171346-c9803-d867f2b37a74cc9ef74c5887358a498337186c8d.gz
  * add GStreamer sink

    darcs-hash:20070208171033-c9803-a4c5644aa41618d48c57c65261a72d0b1951a068.gz
  * s/_GSTNICE_H/_GSTNICESRC_H/ in gstnicesrc.h

    darcs-hash:20070208170700-c9803-68c5e47910eb8a7ff7291b2730fb43ffe9743be6.gz
  * s/Automagic/Interactive/ in nicesrc description

    darcs-hash:20070208170514-c9803-e51dadfb9700f65359446488c9147a68097d493e.gz
  * use GST_STATIC_CAPS_ANY rather than GST_STATIC_CAPS (NULL)

    darcs-hash:20070208170213-c9803-e972d18dbc153dfdf209ffcf135ed4f66a152ef8.gz
  * gst plugin should be called "nice", not "nicesrc"

    darcs-hash:20070208170010-c9803-82f6524802e07fed808d866db822feee60eba909.gz
  * split gst plugin init into separate file

    darcs-hash:20070208155650-c9803-0394e95955c04e9f37887dfb61e27ac1c3db0deb.gz
  * rename nice_agent_component_recv -> nice_agent_recv

    darcs-hash:20070208154257-c9803-23bd050ecb8c336e9161e6112170e6c92a758eab.gz
  * remove nice_agent_recv

    darcs-hash:20070208153623-c9803-e44549d1eddb5b5a42695ad2a1130e315a0c372d.gz
  * for clarity, make max_fd the largest fd when select()ing

    darcs-hash:20070208141507-c9803-afabb4dd7ddbafa655b3602e3ee3631ff72b255f.gz
  * add test for nice_agent_poll_read

    darcs-hash:20070208141242-c9803-90539751108f409bc2da2dd2517bdb6cc58f7ff0.gz
  * set port to 0 on local addresses so that unique port is allocated for new candidates

    darcs-hash:20070208132831-c9803-72d9230c52fd9a9b8eec069039535d35e7afd955.gz
  * remove nice_agent_pop_event

    darcs-hash:20070208131326-c9803-3dd07a06f08c1cce484f7e8f663af391eb3df50d.gz
  * add gst/ directory and basic nicesrc element

    darcs-hash:20070207202611-c9803-6f19990a3e9e7bc483f0aa9754567e9d643c6232.gz
  * nice_agent_component_recv ()

    darcs-hash:20070207202421-c9803-463794ea6a58b78e2aaace04618e64d0ac0ec682.gz
  * consistently use "XXX" (rather than "FIXME")

    darcs-hash:20070207104315-c9803-2ed68c54a270d87405b5472c14a73a404f8feda3.gz
  * use NiceAddress for local interfaces

    darcs-hash:20070207104150-c9803-1348829041d406702a91c55a60c0498e08c96a60.gz
  * separate recv callback call from data recv

    darcs-hash:20070206170046-c9803-de303edfeced365986794a61f3922fac722bbdbf.gz
  * improve comments

    darcs-hash:20070206165839-c9803-47676a871a7cab30f1a465146a2ba1aeb48e374a.gz
  * separate STUN message type checking from binding request handling; ignore incoming binding responses

    darcs-hash:20070206122212-c9803-018cf714ab31a5fa8ab1fd5513a0f4d948f35e06.gz
  * split out stream lookup from _nice_agent_recv

    darcs-hash:20070206120957-c9803-bf90664d67d871b8d1b11cd9b4e65aaa5707f6fb.gz
  * add comment

    darcs-hash:20070206120742-c9803-c809a6ae1f5ff1ec1dd101b37f3ed9356522c679.gz
  * explicitly declare stream_new as taking void

    darcs-hash:20070206115326-c9803-5c972d2c06814e5390cef0f80879341d59e01912.gz
  * empty send queue on fake sockets when they're destroyed

    darcs-hash:20070205193435-c9803-93274ca30e66d50500e314e3016480c4d6698c7c.gz
  * initialize addresses in tests

    darcs-hash:20070205193200-c9803-bf1a8f60585945ba70a7083d4882321dcb2cc4ac.gz
  * update boring rules

    darcs-hash:20070205191315-c9803-8aebf462f79f7a8e4bae0b7d62ab77e33f65f89b.gz
  * test nice_rng_generate_bytes

    darcs-hash:20070205191117-c9803-4b3ccb476da684d25f11ab287eb4c0842be61f1b.gz
  * update README with new subdirs

    darcs-hash:20070205191000-c9803-09653c37dec4e31223e515339e21dbb92d55a41e.gz
  * send reciprocal connectivity checks

    darcs-hash:20070205190622-c9803-08ab8f6bffcceceb4cf694427eebd1ce6cf309df.gz
  * add some debug code to _handle_stun

    darcs-hash:20070205173159-c9803-6e4304eebe173626d4e4be411c1cb05dfe25a4c0.gz
  * don't seed new RNGs to 0 by default; allow overriding RNG constructor

    darcs-hash:20070205172439-c9803-1407272fc5941c986205b683b05756d7b52eca9e.gz
  * nice_rng_glib_new_predictable

    darcs-hash:20070205171124-c9803-51fc2431b9eaf7f6b4b61223da4d481f168c9567.gz
  * rename nice_glib_rng_new -> nice_rng_glib_new

    darcs-hash:20070205170843-c9803-3c31b9f0efe39018f5239d0f27725fcbb0a097ba.gz
  * tidy up udp-echo-server

    darcs-hash:20070205163624-c9803-6a9b377e3890e7b038ac52bae6190301dd2c6509.gz
  * add extra test for BSD sockets

    darcs-hash:20070205162552-c9803-ff0b7bcbce6668efaa473afeb0fc4f6882f81397.gz
  * make UDP code use NiceAddress instead of sockaddr_in

    darcs-hash:20070205161016-c9803-f3eefe210e39ebae3dd075409dd83211aeee7148.gz
  * nice_agent_send ()

    darcs-hash:20070205130557-c9803-2d265e14320d3818b35eec91d60132ae25a9a3e2.gz
  * keep track of where incoming valid connectivity checks went from/to

    darcs-hash:20070205125036-c9803-7b57fca93d5c01b8df875381d01c3d54e0b73cec.gz
  * pass stream to _handle_stun

    darcs-hash:20070205124744-c9803-98f1dc826646eff707be8f06157405d1b631133a.gz
  * add blank line

    darcs-hash:20070205123907-c9803-f0503bc94290639183ee703ceef77ac592807b8b.gz
  * include common.mk in each Makefile.am

    darcs-hash:20070205123651-c9803-eb7145b523cfff31f4013265d2e2b71b727ffaf0.gz
  * rename NiceAgentRecvHandler -> NiceAgentRecvFunc

    darcs-hash:20070204190234-c9803-070f17e3dccb628b32870bc35b84067e8ed52eb9.gz
  * improve agent docstrings

    darcs-hash:20070204190024-c9803-8a570bbe8c52516e779f3d0d9a232c39e2d6b09e.gz
  * tidy up event code

    darcs-hash:20070204183000-c9803-a0097fea720448ab40a782a07e9aea6098f8cbcc.gz
  * include udp.h in candidate.h

    darcs-hash:20070204182741-c9803-e09a16577f5586cb9814bb7e92099f0eeb8cc0d1.gz
  * remove unused select stuff from udp/

    darcs-hash:20070204180425-c9803-35809848faefc2ea13d652801986ff5d39d23a0d.gz
  * include username from request in connectivity check binding responses

    darcs-hash:20070203112032-c9803-59fe493bfaa60aaf46e8e836042afcf344054f0e.gz
  * split address code into separate directory

    darcs-hash:20070203111425-c9803-84a9495f7d1c2a27e49857cdfea698209c8efe65.gz
  * add jingle-test-server

    darcs-hash:20070203104503-c9803-5feadbf33d308d15fceff4b2c0307bf6c149df21.gz
  * ice-test-server: convert to using nice_agent_poll_read

    darcs-hash:20070203101159-c9803-36d838ab327fbc5a558baf53d3c6f7f8931654f6.gz
  * ice-test-client: take server address as argument

    darcs-hash:20070203100351-c9803-4cba76151d89c5a12ed4ef5b4e31ea9d6f9d70f2.gz
  * tidy up local/ code and export its functions

    darcs-hash:20070203095751-c9803-2606e0f7ec35e1e4280aaafff2cb0b27287f29bd.gz
  * split top level SUBDIRS onto multiple lines

    darcs-hash:20070202214608-c9803-b95df054cddba1adf9c637d2a25b58cd7526221f.gz
  * fix username checking for inbound connectivity checks to be compatible with libjingle

    darcs-hash:20070202183947-c9803-7a6cb9466d550315143b99f38b2ef730c156a000.gz
  * add G_GNUC_WARN_UNUSED_RESULT to various functions

    darcs-hash:20070202181157-c9803-5a63de6917664fe6855f9da9082d804795bcf536.gz
  * move udp/test.c -> udp/test-fake.c

    darcs-hash:20070202180109-c9803-0b13f556d3a81d40ea3f678b6043bef7bf28cabb.gz
  * update _boring patterns

    darcs-hash:20070202174730-c9803-3b4b49a9e753509f89efb5eae7c9793a7820746d.gz
  * rename overly terse variable

    darcs-hash:20070202174501-c9803-f0a56227a02f22bcf375b25596a7ec74a28b123d.gz
  * split check-valgrind rule into common.mk

    darcs-hash:20070202173958-c9803-ebe4b729c0cca4a24fbf192910f904ff02d4ae80.gz
  * add nice_agent_poll_read

    darcs-hash:20070202172357-c9803-8094202e451896f13265fd9a323b36b2af89bfc9.gz
  * make pkginclude_HEADERS declarations complete

    darcs-hash:20070202120828-c9803-68e6786fee4010d4e23c2edacd47229942126fad.gz
  * remove NiceCandidate.port in favour of using NiceCandidate.addr.port

    darcs-hash:20070202114458-c9803-41d9f70a5684037cf9ecf6a6774cd76c88a6eb4c.gz
  * fix memory leak in test-message-dump-unknown

    darcs-hash:20070202114010-c9803-68d713c3e5fef4701dbc6b989eb3d9b167cc7faf.gz
  * add port to address struct; compare it in address_is_equal

    darcs-hash:20070202111444-c9803-19acc3f2fc3b542af9826a1f42ed23973a8fd941.gz
  * initialize address in test-util

    darcs-hash:20070202111313-c9803-cd61e5cc54dee96d9db1d2d59402f321ab88d0f7.gz
  * split out event code; add "nice" prefix; add _ prefix to nice_event_new

    darcs-hash:20070202105516-c9803-2cba259efc37ed98ecf7f6b946dcc6085e30c972.gz
  * include glib.h in address.h

    darcs-hash:20070202105408-c9803-729ba3e4c93c07ff2f3dcbe329168ed062bb9854.gz
  * update comments to new ICE draft

    darcs-hash:20070202103043-c9803-8f50a79240e602d758bfbdc41a67c7ccf185f4f9.gz
  * check-symbols.sh: check for existence of symbol file

    darcs-hash:20070202093743-c9803-0c17d9eb26d5da68d62e6a98c613c316f9963b12.gz
  * fix dumping of STUN transaction IDs

    darcs-hash:20070202093536-c9803-98c5a5bb6cd662ac89532301fb38473f59088c3b.gz
  * support dumping STUN binding error response messages

    darcs-hash:20070202092858-c9803-5e4dc89d4968db6356c80404f7218cea3cdf73ed.gz
  * remove stun_message_binding_request_new

    darcs-hash:20070202092645-c9803-738bd2844f7171bba65a7c1ec025e4ecbf48ae01.gz
  * better support for dumping unrecognised STUN messages

    darcs-hash:20070202091809-c9803-5335f39c00adb89e42e165cbecfe8d06014914c8.gz
  * close socket when candidate is freed

    darcs-hash:20070202091200-c9803-13a01de3ed6cabb7eed9a025228908cff9778318.gz
  * test client: improve comments/debug messages

    darcs-hash:20070202084356-c9803-d8e64974e5b3ef14199b7d5e2008811afef2f7e4.gz
  * test client: use Jingle-style concatenated password for connectivity checks

    darcs-hash:20070202084255-c9803-fb84de08fc013a3ec8b2c9a170f1119b5446aa05.gz
  * test client: add missing string.h include

    darcs-hash:20070202084241-c9803-6572df0acca0064f870cf7f3218c0c8f14ee5355.gz
  * test client: send local candidate to server

    darcs-hash:20070202083858-c9803-0efe33288abbdb8c9aa773493f512001eb259f0b.gz
  * test client: print out recieved candidate line

    darcs-hash:20070202083641-c9803-bd88b63ae677ba72cadab7494cc64130fc83601f.gz
  * test client: free candidate line

    darcs-hash:20070202083610-c9803-7605130b90251d15169c16954cd39cc6b3878693.gz
  * nice_candidate_{to,from}_string: include username/password in string

    darcs-hash:20070202080905-c9803-643ef6ed43ed78483617800bfaefdab7d5a43d74.gz
  * test server: accept remote candidates and add them to agent

    darcs-hash:20070202075521-c9803-da196de467ed2345df655a3f1fd745e3fa5902f7.gz
  * test server: make connection closed message more distinctive

    darcs-hash:20070202075427-c9803-4757b3ef08a4c90b2ab7aa4006528c3425eabed6.gz
  * test server: free agent when connection closes

    darcs-hash:20070202075404-c9803-dca2414555d03530d399a72778c535c100f0520a.gz
  * valgrind.sh: make it libtool-friendly, and use G_DEBUG=gc-friendly

    darcs-hash:20070201200458-c9803-71afa6a3fd8e6155ef41caace767992b6d3932cd.gz
  * fix memory leak in nice/test-util

    darcs-hash:20070201200015-c9803-7b1c84f3f4649d3a164332288344615e1995d995.gz
  * fix memory leaks in agent/test-stun

    darcs-hash:20070201195710-c9803-a32758e0a7d3d04edb8e26cb9a7270b4d94b5d9f.gz
  * refactor nice_candidate_from_string to use g_strsplit

    darcs-hash:20070201185502-c9803-40dd6b933b895463bb507829ff29a7b528938b95.gz
  * link stuff in nice/ against libnice instead of libagent

    darcs-hash:20070201184746-c9803-d39d73c39b67ca48df88c2a66c102bc01407700f.gz
  * add "nice" prefix to UDP code

    darcs-hash:20070201183830-c9803-6e562ea7405a931c59d56fbf67075fcaf90b1ee9.gz
  * refactor nice_agent_recv

    darcs-hash:20070201180813-c9803-6f9c7991e1f1e0f7a69b69dcb0b59c73f6b31f27.gz
  * add test for symbol changes

    darcs-hash:20070201175407-c9803-73d868f8909ce2e7ff8c0772896ade2ec390bdbe.gz
  * rename udp_socket_manager_bsd_init -> udp_bsd_socket_manager_init for consistency

    darcs-hash:20070201151731-c9803-c7eb85a8630c400fe79057ae755bfd22dbda7c34.gz
  * tidy #includes

    darcs-hash:20070201150929-c9803-a01cbc5dd9666966434c6fb44bdebf43cb55a42c.gz
  * send error response if connectivity check has missing/invalid password

    darcs-hash:20070201133653-c9803-39628825dfcc8f7214109bee908259b1ef0df733.gz
  * add n_attributes paramenter to stun_message_new

    darcs-hash:20070201125530-c9803-b048be80885d9d82f7e1a2fcdd24f1675b85b345.gz
  * don't assume that StunMessage->attributes is not NULL

    darcs-hash:20070201124922-c9803-f957e0dc8d4e479d5dbf2270ac851213fe9e8927.gz
  * ifdef-out unused nice_event_push and make it static

    darcs-hash:20070201124453-c9803-e2086f3210981c8b58492074230eaf1c051aa7ea.gz
  * STUN server: copy transaction ID from request into response

    darcs-hash:20070201123421-c9803-566c1d9d79c8234278e17f3d0a3f65c4889487a8.gz
  * add more spaces to header files

    darcs-hash:20070201115653-c9803-d34ffa19c7f17ddf805890dd598daa3f0b844e63.gz
  * make stun_message_{new,init} take transaction ID

    darcs-hash:20070201114851-c9803-4f8d67c0afcd66fbbf0f961c9c741fdd12ad7285.gz
  * README: update, tidy, cite standards

    darcs-hash:20070201110539-c9803-54f34204ca72aed38a8a645f8f4f9ad6d781c315.gz
  * name the BSD socket implementation of UDP sockets as such; tidy up header files

    darcs-hash:20070201110341-c9803-08173e15f091a90623d648547dfb8e0eca567171.gz
  * update boring patterns

    darcs-hash:20070201110330-c9803-8c8cd64899e12160279a5a9c0abad2407d07cfeb.gz
  * add check-valgrind make target

    darcs-hash:20070201102304-c9803-d26fefaae86038f64ebc557ea5f91a33a9c72a03.gz
  * add/update agent function documentation

    darcs-hash:20070201093313-c9803-8ab03bb81dc585ab915d6e0342a67e6d16182b59.gz
  * add more spaces to header files

    darcs-hash:20070131232926-c9803-d79432cb512cf4be4fb6937179c1882365818999.gz
  * make type<->typedef name mapping more consistent (makes gtk-doc happier)

    darcs-hash:20070131230744-c9803-46332f2b3e13f2a0f798a61d913f734e5ca57f8e.gz
  * make type<->typedef name mapping more consistent (makes gtk-doc happier)

    darcs-hash:20070131224738-c9803-52551da30ad6edc34cf362308acec1793bff8304.gz
  * fix memory leak in test

    darcs-hash:20070131223726-c9803-a00e761d2c39f602e43fcd86ad3b3b089de867f5.gz
  * split agent STUN test into several smaller ones

    darcs-hash:20070131223218-c9803-dc5fba4bc334e7ebd9171a4c68768e2b96bfe984.gz
  * add libnice.pc

    darcs-hash:20070131211053-c9803-2ef6026eb7323049fda72d19a7b479100d65ffd7.gz
  * verify username on connectivity checks

    darcs-hash:20070131203222-c9803-69bb96903ad69286eb899414fe5c0acf68794ae6.gz
  * add spaces in agent.h for readability

    darcs-hash:20070131174426-c9803-a4866934a2f50f43f3246c407f480370e5950c99.gz
  * add stream/component/username/password to nice_agent_remote_candidate_new

    darcs-hash:20070131162228-c9803-412321b4b6209009c7f9d3d1de64fe82a035235e.gz
  * generate random usernames/passwords for local candidates

    darcs-hash:20070131161113-c9803-550a9fd4d61c6aa696bd046336e0e14dae2e71cf.gz
  * include random.h in nice.h

    darcs-hash:20070131160951-c9803-753b4f18cb542852de1603a21ed3dfc110d754ba.gz
  * build random/ before agent/

    darcs-hash:20070131151139-c9803-efe42c7476491c532180c3f8d4724be07d7b8c79.gz
  * refactor readline flow control

    darcs-hash:20070131145719-c9803-520db32925eb3206f0a411b1d630d75947e09e95.gz
  * assert that payload is aligned when packing STUN message

    darcs-hash:20070131143243-c9803-1ba794adfd98d7be8082ba0b032bbd89e521c538.gz
  * terminate STUN message dumps with a newline

    darcs-hash:20070131142215-c9803-f8acb32280edf0fd528c7fead7d9a48d14d4c1b4.gz
  * add nice_rng_free

    darcs-hash:20070131135712-c9803-ffa82a9d3bc6e823d2b2500604ea1866ae5985f5.gz
  * make nice_rng_new explicitly take void

    darcs-hash:20070131135528-c9803-6a99cc7ec2227304ecbb6dde2f8081633aaa2801.gz
  * install random.h

    darcs-hash:20070131135449-c9803-7e9c84c51d88db6732f80c8cb2ab76bedce127e8.gz
  * add scripts for generating/checking symbol lists

    darcs-hash:20070131123026-c9803-98cea90c5235f7c67b1c98ee94c4b83f518b1178.gz
  * add random number generation code

    darcs-hash:20070131115247-c9803-7ab718af8e311c0c37df2aa92343a6bdc1b9d30c.gz
  * add valgrind wrapper script

    darcs-hash:20070130155851-c9803-01fe933f2e02f51f174d4a204829ed60216bfb75.gz
  * add simple test client

    darcs-hash:20070130153756-c9803-1a1c20f3d910284a7a13a8e551347a387d42c117.gz
  * initialize addresses in test

    darcs-hash:20070130141930-c9803-bf822c511f34e4a08f8bf16a43f20534c20391d8.gz
  * discard STUN binding requests that don't have a password

    darcs-hash:20070130141518-c9803-1d7e3b52bf73bf33d97d9e00ae410d137ccc1823.gz
  * remove dependency on check

    darcs-hash:20070130120047-c9803-b2859bf889b93762c7bb443c70c3e56d616b8954.gz
  * fix memleak in nice_candidate_from_string

    darcs-hash:20070130115748-c9803-44a6e19820cf68bade92983c2eea0e3b676a2796.gz
  * fix memleak in readline test

    darcs-hash:20070130115642-c9803-5199ea5345810b6b442a3ccd5c3766603dabac99.gz
  * add support for packing STUN usernames

    darcs-hash:20070130112905-c9803-66d17400e841246fa09c95f0f211a50ea7ad2fa9.gz
  * stun_attribute_username_new

    darcs-hash:20070130112714-c9803-7af1e55e269dadfb83fa6447eda28fc41b9c403d.gz
  * fix code for calculating STUN attribute padding

    darcs-hash:20070130112429-c9803-cf50942c820cda76e81b5ccb8ddb1a724be02599.gz
  * add support for dumping STUN username attribute

    darcs-hash:20070130103357-c9803-ad38140f742ccaae54ac1fc0fdf3af004ab4ff58.gz
  * simplify STUN message packing to not use GString

    darcs-hash:20070130102852-c9803-721a10f151e246866d39c968d09c080f5ce4eca7.gz
  * fix memory leak when unpacking attribute fails

    darcs-hash:20070130102738-c9803-eefe3866cc7da4bbdd0592b2e5e3776f0a655b5c.gz
  * use calculated length to preallocate GString when packing STUN message

    darcs-hash:20070130101111-c9803-bb9747289f5c567cf5674ac6753ceb19c57e9bb7.gz
  * don't use StunAttribute.length as packed value length when packing messages

    darcs-hash:20070130100801-c9803-bd4067a42ceac4b97f25d5c8dbaa30a062709185.gz
  * update boring patterns

    darcs-hash:20070130095126-c9803-e1a7f6d7c17a5ed1f1e6811614a0a11d87890960.gz
  * split STUN test into smaller test programs

    darcs-hash:20070130094435-c9803-5c0a4340ba829ae5c83be5aeef2c55ceaf116d69.gz
  * initialize address to 0 in UDP test

    darcs-hash:20070130090148-c9803-688d0676dc3eb38b388dd91a5754e2ed4dbef239.gz
  * expand STUN attribute enums to those introduced by drafts

    darcs-hash:20070129203259-c9803-11f6c8486effd21c9ff343a1e97e42a6c4e91f6a.gz
  * add support for STUN usernames/passwords

    darcs-hash:20070129203101-c9803-ea9942fbd30ad6d5c47441d7e6d784179e434e15.gz
  * initialize STUN attributes to 0 when allocated

    darcs-hash:20070129202722-c9803-fa4d54065e2c21b3ddf2f6242b84e1f61f857931.gz
  * refactor STUN handling code

    darcs-hash:20070129185951-c9803-df57e1d824411b0e9766074e3ece5777bf896991.gz
  * create nice.h

    darcs-hash:20070129173714-c9803-8521814bf1883decc43e3429fd9f3d5b877c4f32.gz
  * tidy up headers/#includes

    darcs-hash:20070129173049-c9803-6719527a015d994ff576293d155b8d1507a70ea9.gz
  * add user data parameter to recv callback

    darcs-hash:20070129171427-c9803-febd6b6907659bcdde4ae4fb353002f56d1b0a74.gz
  * move readline/util code from agent/ to nice/

    darcs-hash:20070129170620-c9803-2db3a8d16538a68d3879e9107866bb640898abeb.gz
  * remove unnecessary casts from void *

    darcs-hash:20070129162038-c9803-fe8e0d4d7a711d27280df2d1600da85e239c27e1.gz
  * add "nice" prefix to agent, candidate, address

    darcs-hash:20070129161236-c9803-bec5e2eb1477d5e12ae0dd3da3794fb73d180294.gz
  * agent.c: add some comments

    darcs-hash:20070129160222-c9803-6695f7d7826ec933d8e03f7e6084d47471559c97.gz
  * add function for retrieving list of local candidates

    darcs-hash:20070129151924-c9803-59ee83484399a76502a5e272b5738b5b3057dfae.gz
  * add storage for candidate username/password

    darcs-hash:20070129151215-c9803-d8f3b82ebf3c50caa93d1d288fc6c2ecbf8fe776.gz
  * split out candidate code

    darcs-hash:20070129151050-c9803-eac37135f61f529b6fcf0db513db10beeb3102ae.gz
  * include dependant headers in agent.h

    darcs-hash:20070129150127-c9803-f6c8a5c9f0cb7b85ecd764984a4738aa51562aa8.gz
  * remove media type property from stream, as it's not used

    darcs-hash:20070129134058-c9803-b63d9f73c3af44da352ef77f930f78f0a3ded087.gz
  * add functions for calculating candidate priority

    darcs-hash:20070129133026-c9803-856ad09c7a437c7ca65c3baa8fb5832e14df3030.gz
  * STUN: warn about unused results from various functions

    darcs-hash:20070126091150-c9803-ca551c782cbea292f127c06fd01af226edd40c82.gz
  * support STUN attributes that aren't a multiple of 4 bytes long

    darcs-hash:20070126090121-c9803-c74ae3b4fc28b79b2668d4ba1aafa330d947d162.gz
  * validate lengths of STUN attributes

    darcs-hash:20070126083620-c9803-22d03fb3d1af72a45b84fe0210f12640e3628661.gz
  * stun_message_unpack: include attribute header in header length

    darcs-hash:20070126083105-c9803-58155f9ecca179512d945089de8447426cd76477.gz
  * give _stun_attribute_unpack a return value so that it can indicate errors

    darcs-hash:20070126082317-c9803-d7cc6d7e1beea6c01496ecd27fdc91e04782599f.gz
  * remove unused header

    darcs-hash:20070126072844-c9803-4c23ceb88d25073ca34d2e9eaed2a548d5bea388.gz
  * STUN: add test case for packing and unpacking unknown attributes

    darcs-hash:20070126072154-c9803-560469ce34ad9de023cdf8a3f15e4ec7f645fc9f.gz
  * fix STUN test formatting

    darcs-hash:20070126071055-c9803-83e3bc33c29bfea3eb89f7c16bb839a9be744be8.gz
  * fix some indentation

    darcs-hash:20070125172533-c9803-8889dc8b3a9e55b3e3a8bc0173fef2efe8184157.gz
  * add typedef for data recv callback

    darcs-hash:20070125172402-c9803-fe08ec8c69970bac5a7568e857df399b45a70d7d.gz
  * add component ID parameter to media recv callback

    darcs-hash:20070125171756-c9803-25d4c93a98e158e519376b6436da93986fb663b5.gz
  * rename label from "EOF" to "END" to avoid conflict with stdio.h value

    darcs-hash:20070125163539-c9803-41837b88c58ac45e44bf2b1966e366e6ecf1a8b1.gz
  * make boring pattern match top level lcov/ directory

    darcs-hash:20070125151037-c9803-c0bae8a2e2d1e53f82a69b5af31b4f7268cbfbfb.gz
  * don't try to decode packets as STUN unless top two bits are 0

    darcs-hash:20070125150352-c9803-c9c056163f4b13de2ae3756fd0e4e7d06328e7e7.gz
  * distribute scripts/ directory

    darcs-hash:20070124105234-c9803-5fa0d5002f3456255465dba8b7b83f84bca96bc7.gz
  * add makefile/script for generating lcov report

    darcs-hash:20070124105053-c9803-38b34a6da597017d4640707adb574e00d5d14c44.gz
  * gcov/lcov files are boring

    darcs-hash:20070124104426-c9803-3a2f47de9aec9d6df113f42bf9203ac6d13cbaf5.gz
  * fix setting of transaction ID in responses to STUN requests

    darcs-hash:20070123175146-c9803-2ff07145f3414aeed473900213ed2e24af95c176.gz
  * factor out common link flags in makefiles

    darcs-hash:20070123173026-c9803-f01c2f11d4fe4c6a60e777b4db2e59fd5499a8f7.gz
  * UDP: fix comment and move to header file

    darcs-hash:20070123122213-c9803-197be7f0810212108cb02360ca61596cfcc30ef5.gz
  * split address code into separate file

    darcs-hash:20070123112239-c9803-4ee436dea71845eb5e857dab3d98a2180149e304.gz
  * install agent/udp header files

    darcs-hash:20070123102854-c9803-68976426c489777a12361b1da3ddf8ac4af9f3fe.gz
  * link ice-test-server to libnice instead of libagent

    darcs-hash:20070122185107-c9803-a7ca1153ac224346f84dc4fe9c4505a23d5baead.gz
  * be more lenient about which symbols libnice exports

    darcs-hash:20070122185007-c9803-e0672a310ae53d15a39a09102a544478f7486bcd.gz
  * move libnice.ver to _SOURCES proper

    darcs-hash:20070122184852-c9803-aa60a864235aff5f35cd071cf5e07b5d06b6d996.gz
  * ice-test-server: use ice_agent_recv

    darcs-hash:20070122184249-c9803-1edc02bb26cfe90b06c3616f19f5667476df3fde.gz
  * add binaries to _boring

    darcs-hash:20070122183022-c9803-2cfc57ac2b4e75bf3ace521943e05e27df64e5fc.gz
  * agent: respond to inline STUN binding requests

    darcs-hash:20070122182751-c9803-0d067208b074bf65b1e1891877312d35a36d3488.gz
  * fix fake UDP send, including 0-cleanliness

    darcs-hash:20070122182609-c9803-d06c9d6d9c38e40fafced8c766dfe2a16d8d4fce.gz
  * remove debug print

    darcs-hash:20070122182250-c9803-265b931fb2cdedcfa53b0484c1f9f6111662c1ef.gz
  * remove dead code

    darcs-hash:20070122163323-c9803-2d2b155971da0dbf4c85307cd24330b177bcc1c7.gz
  * make address memebers of Candidate not pointers

    darcs-hash:20070122162925-c9803-182e8ac93559f46ec08b084a5ab14d316c367bf5.gz
  * use paths relative to top_builddir for linking in libraries

    darcs-hash:20070122162107-c9803-0e6dd631bdc87a62951f60b732ddc1bd8276e6ac.gz
  * Address: separate allocation from assignment in order to allow static allocation

    darcs-hash:20070122161909-c9803-57d3fc94d42bbbff6fb3f28c2aed0a7f3be3f730.gz
  * address_equal: don't compare irrelevant bits

    darcs-hash:20070122160429-c9803-ec73f72437c16baba49049f8f2d08958ee0416d2.gz
  * address_new_ipv4: set address type

    darcs-hash:20070122153253-c9803-a00b8571813c4bba9c271d6cb8c531a31b408d4b.gz
  * link libstun into libagent

    darcs-hash:20070122151405-c9803-6a26cc9a59e49d6a44c91bb76bf2708f5dba40fd.gz
  * implement ice_agent_recv ()

    darcs-hash:20070122150905-c9803-feee5994406b308152c0d7c421189bd0a65d15f3.gz
  * make ice_agent_add_stream take callback function

    darcs-hash:20070122144214-c9803-0d9ffdcd6f0c7befe6dbaddc2eab3033bc92523d.gz
  * make ice_agent_add_local_host_candidate take stream/candidate ID instead of Component *

    darcs-hash:20070122143930-c9803-f95b8c2f64fa80c75c998ce8e0ac71f0abcfe9c5.gz
  * make stream_free static

    darcs-hash:20070122134343-c9803-6a0023b2a4623057c42e23fb0bec2f9b0f383873.gz
  * add stream/candidate ID members to Candidate struct

    darcs-hash:20070122134248-c9803-e78808a676a1cc1844b67050752a34cf9cf8b160.gz
  * give streams IDs

    darcs-hash:20070122122526-c9803-6f4c4ae139a84f9debd0a3c81bb59cf573bac547.gz
  * make stream_new static

    darcs-hash:20070122122401-c9803-f9c3b8f0b5738ca3b251bd7cd9cfdf2762568fab.gz
  * agent: use UDP library for network operations

    darcs-hash:20070122120338-c9803-3d6e60931c24ce9e96d66017f1887cfc005aaf7c.gz
  * STUN: add comment

    darcs-hash:20070122120107-c9803-7ea1cb58df5f0e0c843b545c12bd34dc2ec89cb4.gz
  * README: reformat, add notes on structure, pkg-config dependency

    darcs-hash:20070122115851-c9803-5b2e1c0748d69ebdc72e73731cb037f3cfc42586.gz
  * store address data in native endianness; use inet_ntop instead of inet_ntoa

    darcs-hash:20070122043415-c9803-eef14fc5437db099eb27f1c0d96f8f0baaeb1941.gz
  * add ICE server skeleton

    darcs-hash:20070121144746-c9803-0f0319ec897e42d47d17d3b796378a526aa3b7b2.gz
  * make Agent struct public so conversions to/from it are possible

    darcs-hash:20070121144145-c9803-d4e4c160d314ea3604c4148f4bf16b6f38303927.gz
  * declare stun_message_binding_request_new as taking void

    darcs-hash:20070121143240-c9803-5c2a9f9e79e3b8f5006796655f2139c7d23b2b2d.gz
  * include nice/ in build

    darcs-hash:20070121031539-c9803-51434533ace7ac01dcca53f36051db9e2634c0cf.gz
  * nice/Makefile.am: libnice.ver is in $(srcdir)

    darcs-hash:20070121031436-c9803-da6ba12f552e29c12050e2c45f1ec66967be3fee.gz
  * config.h.in is boring

    darcs-hash:20070121030722-c9803-ed4c0bd3cb765c2c8a07cb77e944e0e55470219b.gz
  * remove config.h.in; it's generated

    darcs-hash:20070121030519-c9803-346cfea4d82bef32539f08426db11722312113f8.gz
  * extend/update _boring patterns

    darcs-hash:20070121030336-c9803-9f7a77fa1167155f3b4a050d161f174a7d1b4805.gz
  * add nice/ directory

    darcs-hash:20070121025904-c9803-6fc44578731ba5fc451984db0872cf0c450637ba.gz
  * readline(): fix EOF handling

    darcs-hash:20070121024148-c9803-75bac581c823605e337cb9222c0dd68d337338b0.gz
  * _boring: ignore more autofoo files

    darcs-hash:20070120144536-c9803-d05246551bed3c211d7fa308eb81d2d255a52fa2.gz
  * local/Makefile.am: reformat

    darcs-hash:20070120144121-c9803-69446f3b22fb64427da54fea524dfb5216132990.gz
  * switch local/ to building shared rather than static library

    darcs-hash:20070120144013-c9803-ea8ee18e2aab0bd1e960417ba584f16425c3c5e0.gz
  * agent/Makefile.am: reformat

    darcs-hash:20070120142330-c9803-a77a5835830943b9baacb52924b4e5bff7364390.gz
  * agent/: change noinst_PROGRAMS to check_PROGRAMS

    darcs-hash:20070120142157-c9803-a2fdbf30cf3b4a984b75a1a4f2a701a5b9b20e00.gz
  * switch agent/ to building shared rather than static library

    darcs-hash:20070120142019-c9803-9b2c1a47ba4607280402d0e6044ad86b574c7f34.gz
  * stun/Makefile.am: reformat

    darcs-hash:20070120141824-c9803-b9b8651049621118744ba4757d618a64da1a0fdf.gz
  * move stun/test from noinst_PROGRAMS to check_PROGRAMS

    darcs-hash:20070120141715-c9803-dd2274e6b23ab4fb3ff7938ab388ca2e53a335e4.gz
  * switch stun/ to building shared instead of static library

    darcs-hash:20070120141544-c9803-466e3b231bc67ee58a31af36db2ab9fff74acc4f.gz
  * udp/Makefile.am: reformat

    darcs-hash:20070120141449-c9803-f4d95423adb67da171c105170dada881acbce6df.gz
  * switch udp/ to building shared instead of static library

    darcs-hash:20070120141001-c9803-a3a005b365b696765769db6c153ee67dedf642cf.gz
  * configure.ac: replace AC_PROG_RANLIB with AC_PROG_LIBTOOL

    darcs-hash:20070120135811-c9803-02686c277dd16ab9c32e17676b807b21e18d7225.gz
  * move agent/ to end of top level SUBDIRS

    darcs-hash:20070120054014-c9803-e0bbf944e28975a656e339b13265bfc39a1ca4a9.gz
  * fake UDP: add comment

    darcs-hash:20070120051731-c9803-10da7616c63323b48ea35629a5834f0b5e5f2483.gz
  * fake UDP: correctly initialize socket struct address

    darcs-hash:20070120051528-c9803-accf9a690ff38cf28f4ed93dc1b1fe9796de5b20.gz
  * give UDPSocket an address instead of just a port

    darcs-hash:20070120051357-c9803-f23e8f6b9bb73946868b9de76c0e05457c863858.gz
  * fake UDP: use recv pipe fd as socket fd

    darcs-hash:20070120045445-c9803-4016ae24913becca718508596fc5d10f25884e6c.gz
  * give fake UDP sockets individual send/recv queues

    darcs-hash:20070120044222-c9803-0b813ca8408257ee58ab65365390a886a9100b0f.gz
  * UDP test: initialize buffer to 0s

    darcs-hash:20070120043829-c9803-039f6e4f78d8bf4247c3e599430e861e98c72bca.gz
  * fake UDP: use pipe for recv queue so socket can be select()ed

    darcs-hash:20070120040653-c9803-08d3e94ba3b6fb292b3bcbd7f688b7871c2ced2a.gz
  * fake UDP: simplify Packet struct

    darcs-hash:20070120033445-c9803-09408144ece3f71be9f9631501de29bc4fd5aa39.gz
  * add candidate utility code

    darcs-hash:20070117060418-c9803-9d9334ee8b542b072a63f67a86eb97daadbc9f9a.gz
  * export address_new_ipv4 and address_to_string

    darcs-hash:20070117060338-c9803-37c3ba0048f4d4d80f667e5e94ad62b4459e7e01.gz
  * export candidate_new and candidate_free

    darcs-hash:20070117060144-c9803-71a7f296bae86e90c807194d20da12added8df6b.gz
  * readline()

    darcs-hash:20070116051933-c9803-ac4be0259365978cf0e34bd52d13034af2af0ec9.gz
  * add fake UDP socket implementation

    darcs-hash:20070113154659-c9803-35893e1d1a40a64cea7a10bd6dc5001904ee5184.gz
  * add private data pointers to UDP structs

    darcs-hash:20070113154600-c9803-e9ef82fa94a7f20b54432594d52bbb1dce09ad17.gz
  * UDP echo server: print error when binding to port failed

    darcs-hash:20070113111728-c9803-b26d70602ccca6d5a790439addca23c9312d3256.gz
  * add wrappers for UDP vtable functions

    darcs-hash:20070111192418-c9803-e45d7896b9d6a33cde41d8e73d850e940833a804.gz
  * udp.c: remove udp_ prefix from private function names.

    darcs-hash:20070111190950-c9803-bbce781b2a85c483ec6971757655edad5b3ddf06.gz
  * fix chmod of test-echo.sh and include it in EXTRA_DIST

    darcs-hash:20070111190842-c9803-4efebc2e90eb9f4cc9f5b7600c3219c998f4cc66.gz
  * add UDP echo test script

    darcs-hash:20070111183708-c9803-2b2622de843b15c1570a319b6c9b83926e325f44.gz
  * add typedefs for UDP structs

    darcs-hash:20070111165210-c9803-0d25f5e8d8a8a1eab6f74c8eb87c0db267241cba.gz
  * document some limitations in README

    darcs-hash:20070111162215-c9803-2ee071fff69024687c1e09dd607b35a027134703.gz
  * prefer g_slice_new to g_slice_alloc

    darcs-hash:20070111162041-c9803-8344e3776708a583e82b0e00fbee6eedbcd507de.gz
  * factor out attribute decoding from memory allocation

    darcs-hash:20070111161553-c9803-b38789d8d3bc3e0b58fa14d63076f8e581bfb16a.gz
  * make udp_socket_manager_close static

    darcs-hash:20070111160635-c9803-834bacce2e79343703ade60e0ac0909dfd711ab4.gz
  * add close() function to UDP socket manager vtable

    darcs-hash:20070111142052-c9803-53a00fcb6bea370784de0ad518140e84812b20c3.gz
  * remove udp_socket_manager_deinit declaration

    darcs-hash:20070111141854-c9803-14817e91f6e0de65a5357e4d63b52a6d20ba043c.gz
  * udp: pass socket manager to socket init function

    darcs-hash:20070111120203-c9803-35d33e058d7479f2d7ea0f67fbc8f25ec0fe912c.gz
  * add stun.h to libtun_a_SOURCES

    darcs-hash:20070110170931-c9803-d840c5a8ab78b2f83e8944414f1584fc851687fa.gz
  * configure.ac: bump glib/gobject requirements to >= 2.10

    darcs-hash:20070110170735-c9803-49b4568ad08d4c1bb884890840cd86454cf7459f.gz
  * reindent stun.c for consistency

    darcs-hash:20070110164644-c9803-71026228f7b135922e39f9d6a7b2d75f77125e0f.gz
  * modify stun_message_unpack to avoid signed/unsigned comparison and increase readability

    darcs-hash:20070110164125-c9803-f2c96f8e69b8c1273aae2f49a72768bd7f1bf763.gz
  * implement ice_agent_add_remote_candidate

    darcs-hash:20070110160508-c9803-d49e47bb68b69a17f425f54082b6259a5f3da9e1.gz
  * make candidate_new and candidate_free functions static

    darcs-hash:20070110154442-c9803-d8b3cc48c4879ec2ebaaa6fb49f2ca778231f621.gz
  * remove unused code

    darcs-hash:20070109204249-c9803-c21f47b2b9710a92c2fa6ccc3fabfd7c4dc7187c.gz
  * add typedefs for enums

    darcs-hash:20070109204149-c9803-66fbb9acf78bb14e0b202f5cef5fd0dadee90cd8.gz
  * add agent/ stuff to _boring

    darcs-hash:20070109181619-c9803-237ed7e57cdd7878863887fec398fe713985b392.gz
  * add agent/ subdirectory to build

    darcs-hash:20070109175855-c9803-a8989fe2447240554661d024d609e397eb088cd1.gz
  * add agent/ subdirectory

    darcs-hash:20070109175616-c9803-f537be0381966922b3a33ce453fed2eedea70c75.gz
  * mark stun test as boring

    darcs-hash:20070109124639-c9803-a49ba2d2930f438d4b9ff8b5e70fcde433b1d526.gz
  * add stun_message_init() to allow use of static StunMessage objects

    darcs-hash:20070109123507-c9803-fea397b8b65d469ee6eb4ff8a0a0485b96e7bc0f.gz
  * declare variable holding fd as signed, since socket () can return negative values

    darcs-hash:20070109123233-c9803-baadb2c08dc2cd83da1b7fbc58f6ed202f8af963.gz
  * fix name resolution helper to look at parameter, not global

    darcs-hash:20070109123111-c9803-f47cd727eb892bd43f5911d53a60f5ac7984825c.gz
  * move stun test to stun/ directory

    darcs-hash:20070109122412-c9803-7ebca8e6b2b05dc0f184a84ab3ebad0c8c8d607d.gz
  * mark udp/ binaries as boring

    darcs-hash:20070109122210-c9803-71f15697cbd2e1d1ff512659b190ed0392e7f5b1.gz
  * udp client: free socket before exiting

    darcs-hash:20070109120239-c9803-15fff884e60bf64a8e09aa2e6d8ff1d24b5f9101.gz
  * include udp/ subdirectory in the build

    darcs-hash:20070108191142-c9803-8dd4038a724ccfa0a97e0046df3b7a811bb5f961.gz
  * add first sketch of UDP abstraction code

    darcs-hash:20070108190700-c9803-b7969dc7df8bd91ee759079d0d9e24e06fdc311f.gz
  * stun.h: make indentation consistent with other code

    darcs-hash:20070107173701-c9803-c28f9857015956e58a10d1c70a9a630974b4bf06.gz
  * stun.c: use g_slice_free rather than g_slice_free1

    darcs-hash:20070107173405-c9803-95757f4d2657db121f6f55378fa60e5cc5e51132.gz
  * stun.c: make indentation consistent with other code

    darcs-hash:20070107173235-c9803-b25f8bf1451b48140561f096532cda0b65e7b2b7.gz
  * license is LGPL; copyright is Collabora/Nokia

    darcs-hash:20070107160108-c9803-32be2f15aff19745db20949fb455c58291b5a0ce.gz
  * mark core files as boring

    darcs-hash:20070107155009-c9803-d8a676b0ecbf436c6819bdbd847e0d1fd73b4fbb.gz
  * mark stun server binary as boring

    darcs-hash:20070107154951-c9803-ec91ff15381aa098ebf855d7f116de0c9bf38a3b.gz
  * add simple incomplete STUN server

    darcs-hash:20070107154752-c9803-a2168eb421996ae86f6fcc4a0d6e7b52ab4d7c1d.gz
  * add local.h to sources

    darcs-hash:20070107151955-c9803-a833477c4675b51e763705f1cd31d48cadae378a.gz
  * make stun_message_new non-static

    darcs-hash:20070107151854-c9803-a6e6eb8c0f1fcca11da919fc6614ef1c4e0ced1b.gz
  * add basic information to README

    darcs-hash:20070107151823-c9803-a0ccc878e70c5e25abfc4a35112e6563ba9ee2fa.gz
  * name "nice"

    darcs-hash:20070107151204-c9803-df11909a61c03fd5e761c6473cf3d3add0aa2566.gz
  * stun client: time out request after 5 seconds

    darcs-hash:20070107151007-c9803-ec392192f425d6b554d81f58a81cc0164fd0f83d.gz
  * stun client: allow overriding server on command line

    darcs-hash:20070105210221-c9803-624f95b4665afe14cab69cad864c224466ccb461.gz
  * fix boring regexes for autotool files

    darcs-hash:20070105210052-c9803-599e03c51ecf5c32f312915e8e1feffd2e65aee6.gz
  * configure.ac: generate local/Makefile

    darcs-hash:20070105205856-c9803-27daa03bf279491818fed22c8cdaa6ee396b7038.gz
  * add local/Makefile.am

    darcs-hash:20070105205828-c9803-1e2aa08ebf57fc5bdcb47ef4e288171c76b1237b.gz
  * stun client: don't abort on name resolution failure

    darcs-hash:20070105204635-c9803-33e02c8191579fccdbe80eaa1d7b8805ca0a9c6c.gz
  * stun client: remove unnecessary extra variable

    darcs-hash:20070105204211-c9803-89899ca84babe5d4f3a9bbde9e30d0b6a5458f55.gz
  * remove StunAttributeAddress struct in favour of nested anonymous struct

    darcs-hash:20070105202908-c9803-be773d83c6046340291735a2d0d87ebd48af62d8.gz
  * add local/ directory

    darcs-hash:20061221015014-c9803-0f6d2d17bdf4525ccdf6a2e8c622f587b32e352e.gz
  * stun: add -Werror to CFLAGS

    darcs-hash:20061221014308-c9803-b6cd92ac72516a9be108090792557318dded446f.gz
  * add various things to _boring file

    darcs-hash:20061220203205-c9803-ee297272bdb3551512fdcb4c4aa46d2c8ef80931.gz
  * change temporary name from "stun" to "ice"

    darcs-hash:20061220202717-c9803-6b1f79e1f50ddcbd0598526efa4e26caaca0238b.gz
  * add simple STUN client

    darcs-hash:20061220202640-c9803-88f897518a8adab7a22fd294ff9512a803e5e403.gz
  * stun: don't assert on unknown attributes

    darcs-hash:20061220202508-c9803-878d2918e033b80d6d2dc2e22d4c37270acd4d78.gz
  * stun: support dumping binding response messages

    darcs-hash:20061220200643-c9803-8631724d71d09845dba5e4ec1d0b930050b60e73.gz
  * stun: don't include message header size in packed length

    darcs-hash:20061220200459-c9803-c88efb120656f7cf5870e91cf80ceb9622088da5.gz
  * test: comment packed structure

    darcs-hash:20061217202711-c9803-138c77055b5f9c5cd17ef1a9631f86a48a958577.gz
  * split PKG_CHECK_MODULES call over multiple lines

    darcs-hash:20061217202552-c9803-72da89a2b84e15c7e5dffb7258d2403b256fa65b.gz
  * replace AM_PATH_CHECK with PKG_CHECK_MODULES call

    darcs-hash:20061217202254-c9803-46ececa53f126432e24b34e766af156caecbc134.gz
  * stun_attribute_dump: handle unknown attributes

    darcs-hash:20061217202149-c9803-a5ce6fb838b9cf6f201a818a6ff8763a0f90ed9c.gz
  * configure.ac/Makefile.am: include stun/ subdir

    darcs-hash:20061217202053-c9803-f9feaf288fc8a9ba2eb66ad9c81b81127eb7f3fe.gz
  * configure.ac: include AC_PROG_RANLIB for making libraries

    darcs-hash:20061217202020-c9803-64a071cad8ac7c39765dec7cda763ec7e2574ffd.gz
  * add stun/Makefile.am

    darcs-hash:20061217201555-c9803-0fa0453c004c32cff11192a38a4e033ec77dd9a5.gz
  * import

    darcs-hash:20060926215024-b59df-787a30444c3ae416c309322e1bdd26fd438fdc10.gz



-- Youness Alaoui <kakaroto@kakaroto.(none)>  Wed, 05 Nov 2008 16:33:00 -0500

